(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 31 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 30 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (30 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 104 0 0][@model_trace:15119] [@name:Default_Priority] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 31 31 >
 
 val constant first 
   : int
  ensures { result =  (31 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "database" defined at variablestore.ads:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__database
 use export Variablestore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 1024 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__mystring__T13s.t13s) : int =
  (Variablestore__variables__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__mystring__T13s.t13s, 
 predicate in_range = Variablestore__variables__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__TmystringstrD1.tmystringstrD1) : int =
  (Variablestore__variables__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Variablestore__variables__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Variablestore__variables__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__mystringstr as Variablestore__variables__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__variablestore__variables__mystring__length [@model_trace:.67525] [@name:Length] : Variablestore__variables__mystring__T13s.t13s; rec__variablestore__variables__mystring__str [@model_trace:.67540] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__variablestore__variables__mystring__length__projection [@model_trace:.67525] [@name:Length] 
   (a : __split_fields) : Variablestore__variables__mystring__T13s.t13s =
  a.rec__variablestore__variables__mystring__length
 
 meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__length__projection
 
 function __split_fields_rec__variablestore__variables__mystring__str__projection [@model_trace:.67540] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__variablestore__variables__mystring__str
 
 meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate variablestore__variables__mystring__length__pred 
   (a : __rep) =
  true
 val variablestore__variables__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> variablestore__variables__mystring__length__pred (a : __rep) }
 
 val rec__variablestore__variables__mystring__length_ 
   (a : __rep) : Variablestore__variables__mystring__T13s.t13s
  requires {  (variablestore__variables__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__variablestore__variables__mystring__length) }
 
 predicate variablestore__variables__mystring__str__pred 
   (a : __rep) =
  true
 val variablestore__variables__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> variablestore__variables__mystring__str__pred (a : __rep) }
 
 val rec__variablestore__variables__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (variablestore__variables__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__variablestore__variables__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Variablestore__variables__mystring__T13s__rep.to_rep a.__split_fields.rec__variablestore__variables__mystring__length) = (Variablestore__variables__mystring__T13s__rep.to_rep b.__split_fields.rec__variablestore__variables__mystring__length)) /\ (Variablestore__variables__mystringstr.bool_eq a.__split_fields.rec__variablestore__variables__mystring__str b.__split_fields.rec__variablestore__variables__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring
 use export Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant variablestore__variables__mystring__length__first__bit 
   : int

 
 val constant variablestore__variables__mystring__length__last__bit 
   : int

 
 val constant variablestore__variables__mystring__length__position 
   : int

 
 axiom variablestore__variables__mystring__length__first__bit_axiom :
  ((variablestore__variables__mystring__length__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__length__last__bit_axiom :
  ((variablestore__variables__mystring__length__last__bit ) > (variablestore__variables__mystring__length__first__bit ))
 
 axiom variablestore__variables__mystring__length__position_axiom :
  ((variablestore__variables__mystring__length__position ) >= (0 : int))
 
 val constant variablestore__variables__mystring__str__first__bit 
   : int

 
 val constant variablestore__variables__mystring__str__last__bit 
   : int

 
 val constant variablestore__variables__mystring__str__position 
   : int

 
 axiom variablestore__variables__mystring__str__first__bit_axiom :
  ((variablestore__variables__mystring__str__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__str__last__bit_axiom :
  ((variablestore__variables__mystring__str__last__bit ) > (variablestore__variables__mystring__str__first__bit ))
 
 axiom variablestore__variables__mystring__str__position_axiom :
  ((variablestore__variables__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variable
 use export Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type variable =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant variablestore__variables__mystring__length__first__bit 
   : int

 
 val constant variablestore__variables__mystring__length__last__bit 
   : int

 
 val constant variablestore__variables__mystring__length__position 
   : int

 
 axiom variablestore__variables__mystring__length__first__bit_axiom :
  ((variablestore__variables__mystring__length__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__length__last__bit_axiom :
  ((variablestore__variables__mystring__length__last__bit ) > (variablestore__variables__mystring__length__first__bit ))
 
 axiom variablestore__variables__mystring__length__position_axiom :
  ((variablestore__variables__mystring__length__position ) >= (0 : int))
 
 val constant variablestore__variables__mystring__str__first__bit 
   : int

 
 val constant variablestore__variables__mystring__str__last__bit 
   : int

 
 val constant variablestore__variables__mystring__str__position 
   : int

 
 axiom variablestore__variables__mystring__str__first__bit_axiom :
  ((variablestore__variables__mystring__str__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__str__last__bit_axiom :
  ((variablestore__variables__mystring__str__last__bit ) > (variablestore__variables__mystring__str__first__bit ))
 
 axiom variablestore__variables__mystring__str__position_axiom :
  ((variablestore__variables__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : variable) (b : variable) : bool
 
 val constant dummy 
   : variable

 
 type variable__ref =
  { mutable variable__content : variable }
 
 function variable__ref_variable__content__projection 
   (a : variable__ref) : variable =
  a.variable__content
 
 meta "model_projection" function variable__ref_variable__content__projection
 
 meta "inline:no" function variable__ref_variable__content__projection
 
 val variable__havoc 
   (x : variable__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1b" defined at main.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Main__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at variablestore.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"variablestore.ads" 30 0 0][@model_projected] [@name:S] [@model_trace:3668] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at variablestore.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "max_variable_length" defined at variablestore.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__max_variable_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_variable_length [#"variablestore.ads" 8 0 0][@name:Max_Variable_Length] [@model_trace:3437] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for possibly declaring a logic function for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variable as Variablestore__variable

 val function from_string 
   (s : Standard__string.string) : Variablestore__variable.variable
 
 val predicate from_string__function_guard 
   (temp___result_156 : Variablestore__variable.variable) (s : Standard__string.string)

end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T2b" defined at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 5 0 0][@model_trace:19555] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_157 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "TTenter_pin_strSP1" defined at main.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Main__TTenter_pin_strSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTenter_pin_strSP1 =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTenter_pin_strSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTenter_pin_strSP1__ref =
  { mutable tTenter_pin_strSP1__content : tTenter_pin_strSP1 }
 
 function tTenter_pin_strSP1__ref_tTenter_pin_strSP1__content__projection 
   (a : tTenter_pin_strSP1__ref) : tTenter_pin_strSP1 =
  a.tTenter_pin_strSP1__content
 
 meta "model_projection" function tTenter_pin_strSP1__ref_tTenter_pin_strSP1__content__projection
 
 meta "inline:no" function tTenter_pin_strSP1__ref_tTenter_pin_strSP1__content__projection
 
 val tTenter_pin_strSP1__havoc 
   (x : tTenter_pin_strSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTenter_pin_strSP1" defined at main.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Main__TTenter_pin_strSP1__rep
 use        Main__TTenter_pin_strSP1 as Main__TTenter_pin_strSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTenter_pin_strSP1.tTenter_pin_strSP1) : int =
  (Main__TTenter_pin_strSP1.tTenter_pin_strSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTenter_pin_strSP1.tTenter_pin_strSP1, 
 predicate in_range = Main__TTenter_pin_strSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tenter_pin_strS" defined at main.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Main__Tenter_pin_strS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at main.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Main__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 2 0 0][@name:Max_MyString_Length] [@model_trace:103002] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T16b" defined at mystring.ads:38 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t16b =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t16b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t16b__ref =
  { mutable t16b__content : t16b }
 
 function t16b__ref_t16b__content__projection 
   (a : t16b__ref) : t16b =
  a.t16b__content
 
 meta "model_projection" function t16b__ref_t16b__content__projection
 
 meta "inline:no" function t16b__ref_t16b__content__projection
 
 val t16b__havoc 
   (x : t16b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T16b" defined at mystring.ads:38 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T16b__rep
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__mystring__T16b.t16b) : int =
  (Main__lines__mystring__T16b.t16b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__mystring__T16b.t16b, 
 predicate in_range = Main__lines__mystring__T16b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__2__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__TmystringstrD1.tmystringstrD1) : int =
  (Main__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Main__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Main__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__2__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at main.adb:27, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__mystringstr as Main__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__main__lines__mystring__length [@model_trace:.102911] [@name:Length] : Main__lines__mystring__T16b.t16b; rec__main__lines__mystring__str [@model_trace:.102926] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__main__lines__mystring__length__projection [@model_trace:.102911] [@name:Length] 
   (a : __split_fields) : Main__lines__mystring__T16b.t16b =
  a.rec__main__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
 
 function __split_fields_rec__main__lines__mystring__str__projection [@model_trace:.102926] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__main__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate main__lines__mystring__length__pred 
   (a : __rep) =
  true
 val main__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__length__pred (a : __rep) }
 
 val rec__main__lines__mystring__length_ 
   (a : __rep) : Main__lines__mystring__T16b.t16b
  requires {  (main__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__length) }
 
 predicate main__lines__mystring__str__pred 
   (a : __rep) =
  true
 val main__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__str__pred (a : __rep) }
 
 val rec__main__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (main__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Main__lines__mystring__T16b__rep.to_rep a.__split_fields.rec__main__lines__mystring__length) = (Main__lines__mystring__T16b__rep.to_rep b.__split_fields.rec__main__lines__mystring__length)) /\ (Main__lines__mystringstr.bool_eq a.__split_fields.rec__main__lines__mystring__str b.__split_fields.rec__main__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
 use export Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant main__lines__mystring__length__first__bit 
   : int

 
 val constant main__lines__mystring__length__last__bit 
   : int

 
 val constant main__lines__mystring__length__position 
   : int

 
 axiom main__lines__mystring__length__first__bit_axiom :
  ((main__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__length__last__bit_axiom :
  ((main__lines__mystring__length__last__bit ) > (main__lines__mystring__length__first__bit ))
 
 axiom main__lines__mystring__length__position_axiom :
  ((main__lines__mystring__length__position ) >= (0 : int))
 
 val constant main__lines__mystring__str__first__bit 
   : int

 
 val constant main__lines__mystring__str__last__bit 
   : int

 
 val constant main__lines__mystring__str__position 
   : int

 
 axiom main__lines__mystring__str__first__bit_axiom :
  ((main__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__str__last__bit_axiom :
  ((main__lines__mystring__str__last__bit ) > (main__lines__mystring__str__first__bit ))
 
 axiom main__lines__mystring__str__position_axiom :
  ((main__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__2__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__2__projection
 
 meta "inline:no" function mystring__ref_mystring__content__2__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:8 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 8 0 0][@model_trace:102610] [@model_projected] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:8 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 23 0 0][@model_projected] [@model_trace:102761] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function length 
   (m : Main__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_158 : int) (m : Main__lines__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:8 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_159 : Standard__string.string) (m : Main__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:12 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 12 0 0][@model_projected] [@model_trace:102644] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:12 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:12 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_160 : Main__lines__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:16 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 16 0 0][@model_projected] [@name:M1] [@model_trace:102663] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:16 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:16 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 16 0 0][@model_projected] [@model_trace:102672] [@name:M2] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:16 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:16 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_161 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:18 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 18 0 0][@model_projected] [@model_trace:102727] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:18 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:18 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 18 0 0][@model_trace:102736] [@model_projected] [@name:M2] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:18 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T13b" defined at mystring.ads:21 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L12b__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t13b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t13b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t13b__ref =
  { mutable t13b__content : t13b }
 
 function t13b__ref_t13b__content__projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref_t13b__content__projection
 
 meta "inline:no" function t13b__ref_t13b__content__projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:30 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 30 0 0][@model_projected] [@model_trace:102847] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:30 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:30 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 30 0 0][@model_trace:102856] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:30 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:30 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function get 
   (m : Main__lines__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_162 : int) (m : Main__lines__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:18 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_163 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 26 0 0][@model_projected] [@model_trace:102803] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 26 0 0][@name:From] [@model_trace:102812] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 26 0 0][@name:To] [@model_trace:102821] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_164 : Main__lines__mystring.mystring) (m : Main__lines__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T68b" defined at mystring.adb:8 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T68b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t68b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t68b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t68b__ref =
  { mutable t68b__content : t68b }
 
 function t68b__ref_t68b__content__projection 
   (a : t68b__ref) : t68b =
  a.t68b__content
 
 meta "model_projection" function t68b__ref_t68b__content__projection
 
 meta "inline:no" function t68b__ref_t68b__content__projection
 
 val t68b__havoc 
   (x : t68b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T69b" defined at mystring.adb:8 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T69b
 use export Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t69b =
  tmystringstrB
 
 type t69b__ref =
  { mutable t69b__content : t69b }
 
 function t69b__ref_t69b__content__projection 
   (a : t69b__ref) : t69b =
  a.t69b__content
 
 meta "model_projection" function t69b__ref_t69b__content__projection
 
 meta "inline:no" function t69b__ref_t69b__content__projection
 
 val t69b__havoc 
   (x : t69b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS71bP1" defined at mystring.adb:12 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__TS71bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS71bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS71bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS71bP1__ref =
  { mutable tS71bP1__content : tS71bP1 }
 
 function tS71bP1__ref_tS71bP1__content__projection 
   (a : tS71bP1__ref) : tS71bP1 =
  a.tS71bP1__content
 
 meta "model_projection" function tS71bP1__ref_tS71bP1__content__projection
 
 meta "inline:no" function tS71bP1__ref_tS71bP1__content__projection
 
 val tS71bP1__havoc 
   (x : tS71bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S71b" defined at mystring.adb:12 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__S71b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s71b =
  string
 
 type s71b__ref =
  { mutable s71b__content : s71b }
 
 function s71b__ref_s71b__content__projection 
   (a : s71b__ref) : s71b =
  a.s71b__content
 
 meta "model_projection" function s71b__ref_s71b__content__projection
 
 meta "inline:no" function s71b__ref_s71b__content__projection
 
 val s71b__havoc 
   (x : s71b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T72b" defined at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T72b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t72b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t72b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t72b__ref =
  { mutable t72b__content : t72b }
 
 function t72b__ref_t72b__content__projection 
   (a : t72b__ref) : t72b =
  a.t72b__content
 
 meta "model_projection" function t72b__ref_t72b__content__projection
 
 meta "inline:no" function t72b__ref_t72b__content__projection
 
 val t72b__havoc 
   (x : t72b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T72b" defined at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T72b__rep
 use        Main__lines__from_string__T72b as Main__lines__from_string__T72b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__from_string__T72b.t72b) : int =
  (Main__lines__from_string__T72b.t72b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__from_string__T72b.t72b, 
 predicate in_range = Main__lines__from_string__T72b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T73b" defined at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T73b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T74b" defined at mystring.adb:20 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__L_1__T74b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t74b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t74b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t74b__ref =
  { mutable t74b__content : t74b }
 
 function t74b__ref_t74b__content__projection 
   (a : t74b__ref) : t74b =
  a.t74b__content
 
 meta "model_projection" function t74b__ref_t74b__content__projection
 
 meta "inline:no" function t74b__ref_t74b__content__projection
 
 val t74b__havoc 
   (x : t74b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T85b" defined at mystring.adb:60 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L84b__T85b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t85b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t85b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t85b__ref =
  { mutable t85b__content : t85b }
 
 function t85b__ref_t85b__content__projection 
   (a : t85b__ref) : t85b =
  a.t85b__content
 
 meta "model_projection" function t85b__ref_t85b__content__projection
 
 meta "inline:no" function t85b__ref_t85b__content__projection
 
 val t85b__havoc 
   (x : t85b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T83b" defined at mystring.adb:60 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L82b__T83b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t83b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t83b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t83b__ref =
  { mutable t83b__content : t83b }
 
 function t83b__ref_t83b__content__projection 
   (a : t83b__ref) : t83b =
  a.t83b__content
 
 meta "model_projection" function t83b__ref_t83b__content__projection
 
 meta "inline:no" function t83b__ref_t83b__content__projection
 
 val t83b__havoc 
   (x : t83b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T88b" defined at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T88b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t88b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t88b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t88b__ref =
  { mutable t88b__content : t88b }
 
 function t88b__ref_t88b__content__projection 
   (a : t88b__ref) : t88b =
  a.t88b__content
 
 meta "model_projection" function t88b__ref_t88b__content__projection
 
 meta "inline:no" function t88b__ref_t88b__content__projection
 
 val t88b__havoc 
   (x : t88b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T88b" defined at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T88b__rep
 use        Main__lines__substring__T88b as Main__lines__substring__T88b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__substring__T88b.t88b) : int =
  (Main__lines__substring__T88b.t88b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__substring__T88b.t88b, 
 predicate in_range = Main__lines__substring__T88b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T89b" defined at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T89b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T90b" defined at mystring.adb:75 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__L_4__T90b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t90b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t90b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t90b__ref =
  { mutable t90b__content : t90b }
 
 function t90b__ref_t90b__content__projection 
   (a : t90b__ref) : t90b =
  a.t90b__content
 
 meta "model_projection" function t90b__ref_t90b__content__projection
 
 meta "inline:no" function t90b__ref_t90b__content__projection
 
 val t90b__havoc 
   (x : t90b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T19b" defined at main.adb:36, created in Gnat2Why.Types.Translate_Type *)
module Main__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T13s" defined at stack.ads:36 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__stack__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 512 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__2__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__2__projection
 
 meta "inline:no" function t13s__ref_t13s__content__2__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at stack.ads:36 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__stack__T13s__rep
 use        Operations__operandstack__stack__T13s as Operations__operandstack__stack__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Operations__operandstack__stack__T13s.t13s) : int =
  (Operations__operandstack__stack__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Operations__operandstack__stack__T13s.t13s, 
 predicate in_range = Operations__operandstack__stack__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TstoragearrayD1" defined at stack.ads:33 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__TstoragearrayD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tstoragearrayD1 =
  < range 1 512 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tstoragearrayD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tstoragearrayD1__ref =
  { mutable tstoragearrayD1__content : tstoragearrayD1 }
 
 function tstoragearrayD1__ref_tstoragearrayD1__content__projection 
   (a : tstoragearrayD1__ref) : tstoragearrayD1 =
  a.tstoragearrayD1__content
 
 meta "model_projection" function tstoragearrayD1__ref_tstoragearrayD1__content__projection
 
 meta "inline:no" function tstoragearrayD1__ref_tstoragearrayD1__content__projection
 
 val tstoragearrayD1__havoc 
   (x : tstoragearrayD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TstoragearrayD1" defined at stack.ads:33 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__TstoragearrayD1__rep
 use        Operations__operandstack__TstoragearrayD1 as Operations__operandstack__TstoragearrayD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Operations__operandstack__TstoragearrayD1.tstoragearrayD1) : int =
  (Operations__operandstack__TstoragearrayD1.tstoragearrayD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Operations__operandstack__TstoragearrayD1.tstoragearrayD1, 
 predicate in_range = Operations__operandstack__TstoragearrayD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "item" defined at stack.ads:4 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type item =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = item, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type item__ref =
  { mutable item__content : item }
 
 function item__ref_item__content__projection 
   (a : item__ref) : item =
  a.item__content
 
 meta "model_projection" function item__ref_item__content__projection
 
 meta "inline:no" function item__ref_item__content__projection
 
 val item__havoc 
   (x : item__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "item" defined at stack.ads:4 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__item__rep
 use        Operations__operandstack__item as Operations__operandstack__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Operations__operandstack__item.item) : int =
  (Operations__operandstack__item.item'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Operations__operandstack__item.item, 
 predicate in_range = Operations__operandstack__item.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TstoragearrayB" defined at stack.ads:33 instantiated at operations.ads:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Operations__operandstack__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__item as Operations__operandstack__item
 use        Operations__operandstack__item__rep as Operations__operandstack__item__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Operations__operandstack__item.item
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_165   : int.
   (if (( (a__first <= temp___idx_165) /\ (temp___idx_165 <= a__last) )) then (
    ((Operations__operandstack__item__rep.to_rep (get a temp___idx_165)) = (Operations__operandstack__item__rep.to_rep (get b ((b__first - a__first) + temp___idx_165))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_165   : int.
    (if (( (a__first <= temp___idx_165) /\ (temp___idx_165 <= a__last) )) then (
     ((Operations__operandstack__item__rep.to_rep (get a temp___idx_165)) = (Operations__operandstack__item__rep.to_rep (get b ((b__first - a__first) + temp___idx_165))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TstoragearrayB" defined at stack.ads:33 instantiated at operations.ads:5, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Operations__operandstack__item__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Operations__operandstack__item.component_type, 
 type map = Array__Int__Operations__operandstack__item.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Operations__operandstack__item.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TstoragearrayB" defined at stack.ads:33 instantiated at operations.ads:5, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Operations__operandstack__item_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__item__rep as Operations__operandstack__item__rep
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Operations__operandstack__item.component_type, 
 function to_rep = Operations__operandstack__item__rep.to_rep, 
 type map = Array__Int__Operations__operandstack__item.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Operations__operandstack__item.get, 
 function bool_eq = Array__Int__Operations__operandstack__item.bool_eq

end

(* Module for axiomatizing type "TstoragearrayB" defined at stack.ads:33 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__TstoragearrayB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Operations__operandstack__TstoragearrayD1 as Operations__operandstack__TstoragearrayD1
 use        Operations__operandstack__item as Operations__operandstack__item
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item

 type component_type =
  Operations__operandstack__item.item
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Operations__operandstack__item.map, 
 function array_bool_eq = Array__Int__Operations__operandstack__item.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Operations__operandstack__TstoragearrayD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tstoragearrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tstoragearrayB__ref =
  { mutable tstoragearrayB__content : tstoragearrayB }
 
 function tstoragearrayB__ref_tstoragearrayB__content__projection 
   (a : tstoragearrayB__ref) : tstoragearrayB =
  a.tstoragearrayB__content
 
 meta "model_projection" function tstoragearrayB__ref_tstoragearrayB__content__projection
 
 meta "inline:no" function tstoragearrayB__ref_tstoragearrayB__content__projection
 
 val tstoragearrayB__havoc 
   (x : tstoragearrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "storagearray" defined at stack.ads:33 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__storagearray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__item as Operations__operandstack__item
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item

 type component_type =
  Operations__operandstack__item.item
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Operations__operandstack__item.map, 
 function array_bool_eq = Array__Int__Operations__operandstack__item.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack" defined at stack.ads:35 instantiated at operations.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Operations__operandstack__stack__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack__T13s as Operations__operandstack__stack__T13s
 use        Operations__operandstack__stack__T13s__rep as Operations__operandstack__stack__T13s__rep
 use        Operations__operandstack__storagearray as Operations__operandstack__storagearray
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item

 type __split_fields =
  { rec__operations__operandstack__stack__size [@name:size] [@model_trace:.101547] : Operations__operandstack__stack__T13s.t13s; rec__operations__operandstack__stack__storage [@name:storage] [@model_trace:.101562] : Array__Int__Operations__operandstack__item.map }
 
 function __split_fields_rec__operations__operandstack__stack__size__projection [@name:size] [@model_trace:.101547] 
   (a : __split_fields) : Operations__operandstack__stack__T13s.t13s =
  a.rec__operations__operandstack__stack__size
 
 meta "model_projection" function __split_fields_rec__operations__operandstack__stack__size__projection
 
 meta "inline:no" function __split_fields_rec__operations__operandstack__stack__size__projection
 
 function __split_fields_rec__operations__operandstack__stack__storage__projection [@name:storage] [@model_trace:.101562] 
   (a : __split_fields) : Array__Int__Operations__operandstack__item.map =
  a.rec__operations__operandstack__stack__storage
 
 meta "model_projection" function __split_fields_rec__operations__operandstack__stack__storage__projection
 
 meta "inline:no" function __split_fields_rec__operations__operandstack__stack__storage__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate operations__operandstack__stack__size__pred 
   (a : __rep) =
  true
 val operations__operandstack__stack__size__pred 
   (a : __rep) : bool
  ensures { result <-> operations__operandstack__stack__size__pred (a : __rep) }
 
 val rec__operations__operandstack__stack__size_ 
   (a : __rep) : Operations__operandstack__stack__T13s.t13s
  requires {  (operations__operandstack__stack__size__pred a) }
  ensures {  (result = a.__split_fields.rec__operations__operandstack__stack__size) }
 
 predicate operations__operandstack__stack__storage__pred 
   (a : __rep) =
  true
 val operations__operandstack__stack__storage__pred 
   (a : __rep) : bool
  ensures { result <-> operations__operandstack__stack__storage__pred (a : __rep) }
 
 val rec__operations__operandstack__stack__storage_ 
   (a : __rep) : Array__Int__Operations__operandstack__item.map
  requires {  (operations__operandstack__stack__storage__pred a) }
  ensures {  (result = a.__split_fields.rec__operations__operandstack__stack__storage) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Operations__operandstack__stack__T13s__rep.to_rep a.__split_fields.rec__operations__operandstack__stack__size) = (Operations__operandstack__stack__T13s__rep.to_rep b.__split_fields.rec__operations__operandstack__stack__size)) /\ (Operations__operandstack__storagearray.bool_eq a.__split_fields.rec__operations__operandstack__stack__storage b.__split_fields.rec__operations__operandstack__stack__storage) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "stack" defined at stack.ads:35 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__stack
 use export Operations__operandstack__stack__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type stack =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant operations__operandstack__stack__size__first__bit 
   : int

 
 val constant operations__operandstack__stack__size__last__bit 
   : int

 
 val constant operations__operandstack__stack__size__position 
   : int

 
 axiom operations__operandstack__stack__size__first__bit_axiom :
  ((operations__operandstack__stack__size__first__bit ) >= (0 : int))
 
 axiom operations__operandstack__stack__size__last__bit_axiom :
  ((operations__operandstack__stack__size__last__bit ) > (operations__operandstack__stack__size__first__bit ))
 
 axiom operations__operandstack__stack__size__position_axiom :
  ((operations__operandstack__stack__size__position ) >= (0 : int))
 
 val constant operations__operandstack__stack__storage__first__bit 
   : int

 
 val constant operations__operandstack__stack__storage__last__bit 
   : int

 
 val constant operations__operandstack__stack__storage__position 
   : int

 
 axiom operations__operandstack__stack__storage__first__bit_axiom :
  ((operations__operandstack__stack__storage__first__bit ) >= (0 : int))
 
 axiom operations__operandstack__stack__storage__last__bit_axiom :
  ((operations__operandstack__stack__storage__last__bit ) > (operations__operandstack__stack__storage__first__bit ))
 
 axiom operations__operandstack__stack__storage__position_axiom :
  ((operations__operandstack__stack__storage__position ) >= (0 : int))
 
 val function user_eq 
   (a : stack) (b : stack) : bool
 
 val constant dummy 
   : stack

 
 type stack__ref =
  { mutable stack__content : stack }
 
 function stack__ref_stack__content__projection 
   (a : stack__ref) : stack =
  a.stack__content
 
 meta "model_projection" function stack__ref_stack__content__projection
 
 meta "inline:no" function stack__ref_stack__content__projection
 
 val stack__havoc 
   (x : stack__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at stack.ads:14 instantiated at operations.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__operandstack__size__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val constant s [#"stack.ads" 14 0 0][@model_projected] [@model_trace:101313] [@name:S] 
   : Operations__operandstack__stack.stack

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:14 instantiated at operations.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__operandstack__size__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "size" defined at stack.ads:14 instantiated at operations.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__operandstack__size
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val function size 
   (s : Operations__operandstack__stack.stack) : int
 
 val predicate size__function_guard 
   (temp___result_166 : int) (s : Operations__operandstack__stack.stack)

end

(* Module for axiomatizing type "T20b" defined at main.adb:49, created in Gnat2Why.Types.Translate_Type *)
module Main__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (9 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_projected] [@model_trace:22631] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "i" defined at main.adb:54, created in Gnat2Why.Decls.Translate_Constant *)
module Main__L21b__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant i [#"main.adb" 54 0 0][@model_trace:2517] [@name:I] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L21b__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T22b" defined at main.adb:57, created in Gnat2Why.Types.Translate_Type *)
module Main__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (18 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24b" defined at main.adb:65, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@name:Start] [@model_trace:.16507] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@model_trace:.16517] [@name:Length] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@name:Start] [@model_trace:.16507] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@model_trace:.16517] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__4__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__4__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__4__projection
 
 meta "inline:no" function __rep___split_fields__4__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_167   : int.
   (if (( (a__first <= temp___idx_167) /\ (temp___idx_167 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_167) (get b ((b__first - a__first) + temp___idx_167)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_167   : int.
    (if (( (a__first <= temp___idx_167) /\ (temp___idx_167 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_167) (get b ((b__first - a__first) + temp___idx_167)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTtSP1 =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTtSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTtSP1__ref =
  { mutable tTtSP1__content : tTtSP1 }
 
 function tTtSP1__ref_tTtSP1__content__projection 
   (a : tTtSP1__ref) : tTtSP1 =
  a.tTtSP1__content
 
 meta "model_projection" function tTtSP1__ref_tTtSP1__content__projection
 
 meta "inline:no" function tTtSP1__ref_tTtSP1__content__projection
 
 val tTtSP1__havoc 
   (x : tTtSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTtSP1" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__TTtSP1__rep
 use        Main__B_3__TTtSP1 as Main__B_3__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_3__TTtSP1.tTtSP1) : int =
  (Main__B_3__TTtSP1.tTtSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_3__TTtSP1.tTtSP1, 
 predicate in_range = Main__B_3__TTtSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtS" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__TtS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T25b" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t25b =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t25b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t25b__ref =
  { mutable t25b__content : t25b }
 
 function t25b__ref_t25b__content__projection 
   (a : t25b__ref) : t25b =
  a.t25b__content
 
 meta "model_projection" function t25b__ref_t25b__content__projection
 
 meta "inline:no" function t25b__ref_t25b__content__projection
 
 val t25b__havoc 
   (x : t25b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T25b" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T25b__rep
 use        Main__B_3__T25b as Main__B_3__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_3__T25b.t25b) : int =
  (Main__B_3__T25b.t25b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_3__T25b.t25b, 
 predicate in_range = Main__B_3__T25b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T26b" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T26b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Mystringtokeniser__tokenise__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystringtokeniser.ads" 16 0 0][@model_projected] [@model_trace:16590] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7s" defined at mystringtokeniser.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenise__L6s__T7s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t7s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t7s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7s__ref =
  { mutable t7s__content : t7s }
 
 function t7s__ref_t7s__content__projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref_t7s__content__projection
 
 meta "inline:no" function t7s__ref_t7s__content__projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T27b" defined at main.adb:74, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (36 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_projected] [@model_trace:22943] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "R29b" defined at main.adb:78, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_3__L_4__R29b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r29b [#"main.adb" 78 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T30b" defined at main.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__L_4__T30b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t30b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t30b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t30b__ref =
  { mutable t30b__content : t30b }
 
 function t30b__ref_t30b__content__projection 
   (a : t30b__ref) : t30b =
  a.t30b__content
 
 meta "model_projection" function t30b__ref_t30b__content__projection
 
 meta "inline:no" function t30b__ref_t30b__content__projection
 
 val t30b__havoc 
   (x : t30b__ref) : unit
  writes {x}

end

(* Module for defining the constant "i" defined at main.adb:89, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_3__B_5__L31b__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant i [#"main.adb" 89 0 0][@model_trace:2706] [@name:I] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_5__L31b__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T32b" defined at main.adb:93, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_5__T32b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (64 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T35b" defined at main.adb:102, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "i" defined at main.adb:103, created in Gnat2Why.Decls.Translate_Constant *)
module Main__L_2__L34b__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant i [#"main.adb" 103 0 0][@model_trace:2747] [@name:I] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2__L34b__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T36b" defined at main.adb:109, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T36b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T38b" defined at main.adb:113, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T38b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (58 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T39b" defined at main.adb:122, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T39b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:125, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTtSP1 =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTtSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTtSP1__ref =
  { mutable tTtSP1__content : tTtSP1 }
 
 function tTtSP1__ref_tTtSP1__content__2__projection 
   (a : tTtSP1__ref) : tTtSP1 =
  a.tTtSP1__content
 
 meta "model_projection" function tTtSP1__ref_tTtSP1__content__2__projection
 
 meta "inline:no" function tTtSP1__ref_tTtSP1__content__2__projection
 
 val tTtSP1__havoc 
   (x : tTtSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTtSP1" defined at main.adb:125, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__TTtSP1__rep
 use        Main__B_7__TTtSP1 as Main__B_7__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_7__TTtSP1.tTtSP1) : int =
  (Main__B_7__TTtSP1.tTtSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_7__TTtSP1.tTtSP1, 
 predicate in_range = Main__B_7__TTtSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtS" defined at main.adb:125, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__TtS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T40b" defined at main.adb:125, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__T40b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t40b =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t40b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t40b__ref =
  { mutable t40b__content : t40b }
 
 function t40b__ref_t40b__content__projection 
   (a : t40b__ref) : t40b =
  a.t40b__content
 
 meta "model_projection" function t40b__ref_t40b__content__projection
 
 meta "inline:no" function t40b__ref_t40b__content__projection
 
 val t40b__havoc 
   (x : t40b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T40b" defined at main.adb:125, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__T40b__rep
 use        Main__B_7__T40b as Main__B_7__T40b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_7__T40b.t40b) : int =
  (Main__B_7__T40b.t40b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_7__T40b.t40b, 
 predicate in_range = Main__B_7__T40b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T41b" defined at main.adb:125, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__T41b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T42b" defined at main.adb:132, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__T42b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (48 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "R44b" defined at main.adb:137, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_7__L_8__R44b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r44b [#"main.adb" 137 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T45b" defined at main.adb:137, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__L_8__T45b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t45b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t45b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t45b__ref =
  { mutable t45b__content : t45b }
 
 function t45b__ref_t45b__content__projection 
   (a : t45b__ref) : t45b =
  a.t45b__content
 
 meta "model_projection" function t45b__ref_t45b__content__projection
 
 meta "inline:no" function t45b__ref_t45b__content__projection
 
 val t45b__havoc 
   (x : t45b__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at stringtointeger.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Stringtointeger__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"stringtointeger.ads" 6 0 0][@model_projected] [@name:S] [@model_trace:3389] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stringtointeger.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringtointeger__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_168 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "T46b" defined at main.adb:153, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__B_9__T46b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (60 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T48b" defined at main.adb:158, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__B_9__T48b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "i" defined at main.adb:160, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_7__B_9__L49b__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant i [#"main.adb" 160 0 0][@model_trace:2976] [@name:I] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:160, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_7__B_9__L49b__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T50b" defined at main.adb:164, created in Gnat2Why.Types.Translate_Type *)
module Main__B_7__B_9__T50b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (64 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T52b" defined at main.adb:174, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T52b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T53b" defined at main.adb:177, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T53b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "islocked" defined at operations.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__plus__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 8 0 0][@name:IsLocked] [@model_trace:29505] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__plus__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T54b" defined at main.adb:181, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T54b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (65 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T55b" defined at main.adb:183, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T55b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "islocked" defined at operations.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__minus__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 13 0 0][@model_trace:29567] [@name:IsLocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__minus__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T56b" defined at main.adb:187, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T56b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (65 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T57b" defined at main.adb:189, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T57b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "islocked" defined at operations.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__multiply__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 17 0 0][@name:IsLocked] [@model_trace:29629] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__multiply__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T58b" defined at main.adb:193, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T58b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (65 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T59b" defined at main.adb:195, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T59b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "islocked" defined at operations.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__divide__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 21 0 0][@name:IsLocked] [@model_trace:29691] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__divide__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T60b" defined at main.adb:199, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T60b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (65 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T61b" defined at main.adb:201, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T61b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "i" defined at operations.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__push_operation__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant i [#"operations.ads" 25 0 0][@model_trace:29753] [@name:I] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at operations.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__push_operation__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "islocked" defined at operations.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__push_operation__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 25 0 0][@name:IsLocked] [@model_trace:29762] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__push_operation__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T62b" defined at main.adb:203, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T62b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "islocked" defined at operations.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__pop_operation__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 29 0 0][@name:IsLocked] [@model_trace:29824] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__pop_operation__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T63b" defined at main.adb:205, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T63b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "v" defined at operations.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__load__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"operations.ads" 34 0 0][@model_projected] [@model_trace:29866] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at operations.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__load__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "db" defined at operations.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__load__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant db [#"operations.ads" 34 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at operations.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__load__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "islocked" defined at operations.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__load__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 34 0 0][@name:IsLocked] [@model_trace:29899] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__load__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T64b" defined at main.adb:207, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T64b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "islocked" defined at operations.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__store__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 40 0 0][@name:IsLocked] [@model_trace:29974] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__store__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T65b" defined at main.adb:209, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T65b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "islocked" defined at operations.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__remove__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 45 0 0][@name:IsLocked] [@model_trace:30038] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__remove__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T66b" defined at main.adb:211, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T66b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "db" defined at operations.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__list__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant db [#"operations.ads" 48 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at operations.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__list__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "islocked" defined at operations.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Operations__list__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant islocked [#"operations.ads" 48 0 0][@model_trace:30074] [@name:IsLocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at operations.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__list__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T67b" defined at main.adb:214, created in Gnat2Why.Types.Translate_Type *)
module Main__L_6__T67b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (60 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "db" defined at main.adb:18, created in Gnat2Why.Decls.Translate_Variable *)
module Main__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val db [#"main.adb" 18 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at main.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "var" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Main__var
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val var__split_fields [#"main.adb" 19 0 0][@model_projected] [@name:VAR] [@model_trace:2360]  : Variablestore__variable.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "var" defined at main.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__var___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "master_pin" defined at main.adb:21, created in Gnat2Why.Decls.Translate_Variable *)
module Main__master_pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val master_pin [#"main.adb" 21 0 0][@model_projected] [@name:MASTER_PIN] [@model_trace:2376]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "master_pin" defined at main.adb:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__master_pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "enter_pin" defined at main.adb:24, created in Gnat2Why.Decls.Translate_Variable *)
module Main__enter_pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val enter_pin [#"main.adb" 24 0 0][@model_projected] [@model_trace:2387] [@name:ENTER_PIN]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "enter_pin" defined at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__enter_pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "enter_pin_str" defined at main.adb:25, created in Gnat2Why.Decls.Translate_Variable *)
module Main__enter_pin_str
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val enter_pin_str [#"main.adb" 25 0 0][@model_trace:2403] [@model_projected] [@name:ENTER_PIN_STR]  : Array__Int__Standard__character.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "enter_pin_str" defined at main.adb:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__enter_pin_str___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:33 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.ads" 33 0 0][@model_projected] [@model_trace:102875] [@name:M]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:33 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:130787] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 6 0 0][@model_trace:130787'First] [@model_projected] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:130787'Last] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.adb" 13 0 0][@model_projected] [@name:M] [@model_trace:130842]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 14 0 0][@model_trace:130861] [@model_projected] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 20 0 0][@model_projected] [@name:I] [@model_trace:130938]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 29 0 0][@model_projected] [@name:I] [@model_trace:131005]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:53 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 53 0 0][@model_projected] [@name:I] [@model_trace:131182]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:53 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val r__split_fields [#"mystring.adb" 72 0 0][@model_projected] [@name:R] [@model_trace:131382]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 73 0 0][@model_projected] [@name:J] [@model_trace:131405]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 75 0 0][@model_projected] [@model_trace:131471] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:22753]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:22753'First] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:22753'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_trace:22762] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "p" defined at main.adb:29, created in Gnat2Why.Decls.Translate_Variable *)
module Main__p
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val p__split_fields [#"main.adb" 29 0 0][@model_projected] [@model_trace:2426] [@name:P]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p" defined at main.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__p___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "islocked" defined at main.adb:33, created in Gnat2Why.Decls.Translate_Variable *)
module Main__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val islocked [#"main.adb" 33 0 0][@name:IsLocked] [@model_projected] [@model_trace:2437]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at main.adb:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "command" defined at main.adb:36, created in Gnat2Why.Decls.Translate_Variable *)
module Main__command
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val command__split_fields [#"main.adb" 36 0 0][@name:COMMAND] [@model_trace:2447] [@model_projected]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "command" defined at main.adb:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__command___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "number" defined at main.adb:39, created in Gnat2Why.Decls.Translate_Variable *)
module Main__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val number [#"main.adb" 39 0 0][@model_projected] [@model_trace:2463] [@name:NUMBER]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at main.adb:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "opstack" defined at main.adb:42, created in Gnat2Why.Decls.Translate_Variable *)
module Main__opstack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val opstack__split_fields [#"main.adb" 42 0 0][@name:OpStack] [@model_trace:2473] [@model_projected]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "opstack" defined at main.adb:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__opstack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:11 instantiated at operations.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__operandstack__init__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"stack.ads" 11 0 0][@model_trace:101295] [@model_projected] [@name:S]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:11 instantiated at operations.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__operandstack__init__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at variablestore.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__init__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val d [#"variablestore.ads" 17 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__init__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:68, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val t [#"main.adb" 68 0 0][@model_projected] [@model_trace:2573] [@name:T]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at main.adb:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:69, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"main.adb" 69 0 0][@model_trace:2599] [@model_projected] [@name:NumTokens]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:69, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:16599]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:16599'First] 
   : Standard__integer.integer

 
 val constant tokens__last [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:16599'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"mystringtokeniser.ads" 16 0 0][@model_projected] [@name:Count] [@model_trace:16608]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at main.adb:78, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"main.adb" 78 0 0][@model_trace:2630] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokstr" defined at main.adb:80, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_5__tokstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokstr [#"main.adb" 80 0 0][@model_trace:2646] [@name:TokStr] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant tokstr__first [#"main.adb" 80 0 0][@name:TokStr] [@model_projected] [@model_trace:2646'First] 
   : Standard__integer.integer

 
 val constant tokstr__last [#"main.adb" 80 0 0][@name:TokStr] [@model_projected] [@model_trace:2646'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokstr" defined at main.adb:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_5__tokstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:125, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_7__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val t [#"main.adb" 125 0 0][@model_trace:2806] [@model_projected] [@name:T]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at main.adb:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_7__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:126, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_7__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"main.adb" 126 0 0][@model_trace:2832] [@model_projected] [@name:NumTokens]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_7__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at main.adb:137, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_7__L_8__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"main.adb" 137 0 0][@model_trace:2863] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_7__L_8__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokstr" defined at main.adb:139, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_7__B_9__tokstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val tokstr [#"main.adb" 139 0 0][@model_trace:2879] [@name:TokStr] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant tokstr__first [#"main.adb" 139 0 0][@model_trace:2879'First] [@name:TokStr] [@model_projected] 
   : Standard__integer.integer

 
 val constant tokstr__last [#"main.adb" 139 0 0][@name:TokStr] [@model_projected] [@model_trace:2879'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokstr" defined at main.adb:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_7__B_9__tokstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:8, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__plus__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 8 0 0][@model_projected] [@model_trace:29494] [@name:S]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__plus__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__minus__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 13 0 0][@model_trace:29556] [@model_projected] [@name:S]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__minus__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__multiply__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 17 0 0][@model_projected] [@name:S] [@model_trace:29618]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__multiply__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:21, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__divide__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 21 0 0][@model_projected] [@model_trace:29680] [@name:S]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__divide__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__push_operation__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 25 0 0][@model_projected] [@model_trace:29742] [@name:S]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__push_operation__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__pop_operation__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 29 0 0][@model_trace:29804] [@model_projected] [@name:S]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__pop_operation__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at operations.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__pop_operation__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"operations.ads" 29 0 0][@model_projected] [@name:I] [@model_trace:29815]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at operations.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__pop_operation__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:34, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__load__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 34 0 0][@model_projected] [@name:S] [@model_trace:29888]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__load__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "v" defined at operations.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__store__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val v__split_fields [#"operations.ads" 40 0 0][@model_trace:29941] [@model_projected] [@name:V]  : Variablestore__variable.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at operations.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__store__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "db" defined at operations.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__store__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val db [#"operations.ads" 40 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at operations.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__store__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at operations.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__store__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 val s__split_fields [#"operations.ads" 40 0 0][@model_projected] [@model_trace:29963] [@name:S]  : Operations__operandstack__stack.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at operations.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__store__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "v" defined at operations.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__remove__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val v__split_fields [#"operations.ads" 45 0 0][@model_projected] [@model_trace:30016] [@name:V]  : Variablestore__variable.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at operations.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__remove__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "db" defined at operations.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Operations__remove__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val db [#"operations.ads" 45 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at operations.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Operations__remove__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "main" defined at main.adb:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:33 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:58 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:58 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at stack.ads:11 instantiated at operations.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__operandstack__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at variablestore.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:61, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:64, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mystringtokeniser__tokenise
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at main.adb:78, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B_3__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at main.adb:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_6" defined at main.adb:118, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_6
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_6

end

(* Module giving an empty axiom for the entity "L_6" defined at main.adb:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_6___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_8" defined at main.adb:137, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B_7__L_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_8

end

(* Module giving an empty axiom for the entity "L_8" defined at main.adb:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_7__L_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "plus" defined at operations.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__plus
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "minus" defined at operations.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__minus
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "multiply" defined at operations.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__multiply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "divide" defined at operations.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__divide
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "push_operation" defined at operations.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__push_operation
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "pop_operation" defined at operations.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__pop_operation
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "load" defined at operations.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__load
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "store" defined at operations.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__store
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "remove" defined at operations.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "list" defined at operations.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__list
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) =
  (if (( temp___is_init_169 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_173)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_174 : int) (temp___skip_top_level_175 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) =
  (if (( temp___is_init_176 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_180)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_181 : int) (temp___skip_top_level_182 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) =
  (if (( temp___is_init_183 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_187)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_188 : int) (temp___skip_top_level_189 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) =
  (if (( temp___is_init_190 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_194)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_195 : int) (temp___skip_top_level_196 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_195 : int) (temp___skip_top_level_196 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_195 : int) (temp___skip_top_level_196 : bool) }

end

(* Module giving axioms for type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 predicate dynamic_invariant [@inline] 
   (temp___expr_201 : Variablestore__database.database) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_201 : Variablestore__database.database) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_201 : Variablestore__database.database) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_202 : Variablestore__database.database) (temp___skip_top_level_203 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_202 : Variablestore__database.database) (temp___skip_top_level_203 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_202 : Variablestore__database.database) (temp___skip_top_level_203 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_208 : Array__Int__Standard__character.map) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_208 : Array__Int__Standard__character.map) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_208 : Array__Int__Standard__character.map) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_210 : Array__Int__Standard__character.map) (temp___skip_top_level_211 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_210 : Array__Int__Standard__character.map) (temp___skip_top_level_211 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_210 : Array__Int__Standard__character.map) (temp___skip_top_level_211 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_218 : Variablestore__variables__mystring.mystring) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_218 : Variablestore__variables__mystring.mystring) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_218 : Variablestore__variables__mystring.mystring) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_220 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_221 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_220 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_221 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_220 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_221 : bool) }

end

(* Module giving axioms for type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 predicate dynamic_invariant [@inline] 
   (temp___expr_230 : Variablestore__variable.variable) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_230 : Variablestore__variable.variable) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_230 : Variablestore__variable.variable) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_232 : Variablestore__variable.variable) (temp___skip_top_level_233 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_232 : Variablestore__variable.variable) (temp___skip_top_level_233 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_232 : Variablestore__variable.variable) (temp___skip_top_level_233 : bool) }

end

(* Module giving axioms for type "T1b" defined at main.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) =
  (if (( temp___is_init_240 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_244)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_245 : int) (temp___skip_top_level_246 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_245 : int) (temp___skip_top_level_246 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_245 : int) (temp___skip_top_level_246 : bool) }

end

(* Module giving axioms for type "T2b" defined at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTenter_pin_strSP1" defined at main.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTenter_pin_strSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tenter_pin_strS" defined at main.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__Tenter_pin_strS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_253 : Array__Int__Standard__character.map) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_253 : Array__Int__Standard__character.map) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_253 : Array__Int__Standard__character.map) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_255 : Array__Int__Standard__character.map) (temp___skip_top_level_256 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_255 : Array__Int__Standard__character.map) (temp___skip_top_level_256 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_255 : Array__Int__Standard__character.map) (temp___skip_top_level_256 : bool) }

end

(* Module giving axioms for type "T3b" defined at main.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at mystring.ads:38 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_263 : Array__Int__Standard__character.map) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_263 : Array__Int__Standard__character.map) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_263 : Array__Int__Standard__character.map) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_265 : Array__Int__Standard__character.map) (temp___skip_top_level_266 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_265 : Array__Int__Standard__character.map) (temp___skip_top_level_266 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_265 : Array__Int__Standard__character.map) (temp___skip_top_level_266 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_273 : Main__lines__mystring.mystring) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_273 : Main__lines__mystring.mystring) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_273 : Main__lines__mystring.mystring) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_275 : Main__lines__mystring.mystring) (temp___skip_top_level_276 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_275 : Main__lines__mystring.mystring) (temp___skip_top_level_276 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_275 : Main__lines__mystring.mystring) (temp___skip_top_level_276 : bool) }

end

(* Module giving axioms for type "T13b" defined at mystring.ads:21 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L12b__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_304 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_300 : bool) (temp___skip_constant_301 : bool) (temp___do_toplevel_302 : bool) (temp___do_typ_inv_303 : bool) =
  (if (temp___skip_constant_301) then (
   true) else (
   ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Main__lines__to_string__TresultS.first temp___expr_304) (Main__lines__to_string__TresultS.last temp___expr_304)) /\ ( ((Main__lines__to_string__TresultS.first temp___expr_304) = (1 : int)) /\ ((Main__lines__to_string__TresultS.last temp___expr_304) = (Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_304 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_300 : bool) (temp___skip_constant_301 : bool) (temp___do_toplevel_302 : bool) (temp___do_typ_inv_303 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_304 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_300 : bool) (temp___skip_constant_301 : bool) (temp___do_toplevel_302 : bool) (temp___do_typ_inv_303 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_306 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_307 : bool) =
  ( ( true /\ ((Main__lines__to_string__TresultS.first temp___expr_306) = (1 : int)) )/\((Main__lines__to_string__TresultS.last temp___expr_306) = (Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_306 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_307 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_306 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_307 : bool) }

end

(* Module giving axioms for type "T68b" defined at mystring.adb:8 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T68b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T69b" defined at mystring.adb:8 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T69b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS71bP1" defined at mystring.adb:12 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__TS71bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S71b" defined at mystring.adb:12 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__S71b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__from_string__S71b as Main__lines__from_string__S71b

 predicate dynamic_invariant [@inline] 
   (temp___expr_314 : Main__lines__from_string__S71b.s71b) (temp___is_init_310 : bool) (temp___skip_constant_311 : bool) (temp___do_toplevel_312 : bool) (temp___do_typ_inv_313 : bool) =
  (if (temp___skip_constant_311) then (
   true) else (
   ( (Main__lines__from_string__S71b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) (Main__lines__from_string__S71b.first temp___expr_314) (Main__lines__from_string__S71b.last temp___expr_314)) /\ ( ((Main__lines__from_string__S71b.first temp___expr_314) = (Standard__string.first Main__lines__from_string__s.s)) /\ ((Main__lines__from_string__S71b.last temp___expr_314) = (Standard__string.last Main__lines__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_314 : Main__lines__from_string__S71b.s71b) (temp___is_init_310 : bool) (temp___skip_constant_311 : bool) (temp___do_toplevel_312 : bool) (temp___do_typ_inv_313 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_314 : Main__lines__from_string__S71b.s71b) (temp___is_init_310 : bool) (temp___skip_constant_311 : bool) (temp___do_toplevel_312 : bool) (temp___do_typ_inv_313 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_316 : Main__lines__from_string__S71b.s71b) (temp___skip_top_level_317 : bool) =
  ( ( true /\ ((Main__lines__from_string__S71b.first temp___expr_316) = (Standard__string.first Main__lines__from_string__s.s)) )/\((Main__lines__from_string__S71b.last temp___expr_316) = (Standard__string.last Main__lines__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_316 : Main__lines__from_string__S71b.s71b) (temp___skip_top_level_317 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_316 : Main__lines__from_string__S71b.s71b) (temp___skip_top_level_317 : bool) }

end

(* Module giving axioms for type "T72b" defined at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T72b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T73b" defined at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T73b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T74b" defined at mystring.adb:20 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__L_1__T74b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T85b" defined at mystring.adb:60 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L84b__T85b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T83b" defined at mystring.adb:60 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L82b__T83b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T88b" defined at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T88b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T89b" defined at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T89b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T90b" defined at mystring.adb:75 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__L_4__T90b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19b" defined at main.adb:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13s" defined at stack.ads:36 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__stack__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TstoragearrayD1" defined at stack.ads:33 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__TstoragearrayD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "item" defined at stack.ads:4 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__item as Operations__operandstack__item

 predicate dynamic_invariant [@inline] 
   (temp___expr_326 : int) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) =
  (if (( temp___is_init_322 \/ (Operations__operandstack__item.first <= Operations__operandstack__item.last) )) then (
   (Operations__operandstack__item.dynamic_property Operations__operandstack__item.first Operations__operandstack__item.last temp___expr_326)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_326 : int) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_326 : int) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_327 : int) (temp___skip_top_level_328 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_327 : int) (temp___skip_top_level_328 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_327 : int) (temp___skip_top_level_328 : bool) }

end

(* Module giving axioms for type "TstoragearrayB" defined at stack.ads:33 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__TstoragearrayB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "storagearray" defined at stack.ads:33 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__storagearray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item
 use        Array__Int__Operations__operandstack__item as Array__Int__Operations__operandstack__item

 predicate dynamic_invariant [@inline] 
   (temp___expr_333 : Array__Int__Operations__operandstack__item.map) (temp___is_init_329 : bool) (temp___skip_constant_330 : bool) (temp___do_toplevel_331 : bool) (temp___do_typ_inv_332 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_333 : Array__Int__Operations__operandstack__item.map) (temp___is_init_329 : bool) (temp___skip_constant_330 : bool) (temp___do_toplevel_331 : bool) (temp___do_typ_inv_332 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_333 : Array__Int__Operations__operandstack__item.map) (temp___is_init_329 : bool) (temp___skip_constant_330 : bool) (temp___do_toplevel_331 : bool) (temp___do_typ_inv_332 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_335 : Array__Int__Operations__operandstack__item.map) (temp___skip_top_level_336 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_335 : Array__Int__Operations__operandstack__item.map) (temp___skip_top_level_336 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_335 : Array__Int__Operations__operandstack__item.map) (temp___skip_top_level_336 : bool) }

end

(* Module giving axioms for type "stack" defined at stack.ads:35 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack

 predicate dynamic_invariant [@inline] 
   (temp___expr_343 : Operations__operandstack__stack.stack) (temp___is_init_339 : bool) (temp___skip_constant_340 : bool) (temp___do_toplevel_341 : bool) (temp___do_typ_inv_342 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_343 : Operations__operandstack__stack.stack) (temp___is_init_339 : bool) (temp___skip_constant_340 : bool) (temp___do_toplevel_341 : bool) (temp___do_typ_inv_342 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_343 : Operations__operandstack__stack.stack) (temp___is_init_339 : bool) (temp___skip_constant_340 : bool) (temp___do_toplevel_341 : bool) (temp___do_typ_inv_342 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_345 : Operations__operandstack__stack.stack) (temp___skip_top_level_346 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_345 : Operations__operandstack__stack.stack) (temp___skip_top_level_346 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_345 : Operations__operandstack__stack.stack) (temp___skip_top_level_346 : bool) }

end

(* Module giving axioms for type "T20b" defined at main.adb:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at main.adb:57, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24b" defined at main.adb:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_359 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_355 : bool) (temp___skip_constant_356 : bool) (temp___do_toplevel_357 : bool) (temp___do_typ_inv_358 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_359 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_355 : bool) (temp___skip_constant_356 : bool) (temp___do_toplevel_357 : bool) (temp___do_typ_inv_358 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_359 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_355 : bool) (temp___skip_constant_356 : bool) (temp___do_toplevel_357 : bool) (temp___do_typ_inv_358 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_360 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_361 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_360 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_361 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_360 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_361 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_368 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_364 : bool) (temp___skip_constant_365 : bool) (temp___do_toplevel_366 : bool) (temp___do_typ_inv_367 : bool) =
  (if (temp___skip_constant_365) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_368) (Mystringtokeniser__tokenarray.last temp___expr_368))))
 val dynamic_invariant [@inline] 
   (temp___expr_368 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_364 : bool) (temp___skip_constant_365 : bool) (temp___do_toplevel_366 : bool) (temp___do_typ_inv_367 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_368 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_364 : bool) (temp___skip_constant_365 : bool) (temp___do_toplevel_366 : bool) (temp___do_typ_inv_367 : bool) }

end

(* Module giving axioms for type "TTtSP1" defined at main.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__TTtSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtS" defined at main.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__TtS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_374 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_370 : bool) (temp___skip_constant_371 : bool) (temp___do_toplevel_372 : bool) (temp___do_typ_inv_373 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_374 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_370 : bool) (temp___skip_constant_371 : bool) (temp___do_toplevel_372 : bool) (temp___do_typ_inv_373 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_374 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_370 : bool) (temp___skip_constant_371 : bool) (temp___do_toplevel_372 : bool) (temp___do_typ_inv_373 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_376 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_377 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_376 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_377 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_376 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_377 : bool) }

end

(* Module giving axioms for type "T25b" defined at main.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26b" defined at main.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7s" defined at mystringtokeniser.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenise__L6s__T7s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27b" defined at main.adb:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30b" defined at main.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__L_4__T30b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32b" defined at main.adb:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_5__T32b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35b" defined at main.adb:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36b" defined at main.adb:109, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T36b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38b" defined at main.adb:113, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T39b" defined at main.adb:122, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T39b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTtSP1" defined at main.adb:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__TTtSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtS" defined at main.adb:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__TtS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_391 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_387 : bool) (temp___skip_constant_388 : bool) (temp___do_toplevel_389 : bool) (temp___do_typ_inv_390 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_391 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_387 : bool) (temp___skip_constant_388 : bool) (temp___do_toplevel_389 : bool) (temp___do_typ_inv_390 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_391 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_387 : bool) (temp___skip_constant_388 : bool) (temp___do_toplevel_389 : bool) (temp___do_typ_inv_390 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_393 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_394 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_393 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_394 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_393 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_394 : bool) }

end

(* Module giving axioms for type "T40b" defined at main.adb:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__T40b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T41b" defined at main.adb:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__T41b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T42b" defined at main.adb:132, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__T42b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T45b" defined at main.adb:137, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__L_8__T45b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T46b" defined at main.adb:153, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__B_9__T46b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T48b" defined at main.adb:158, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__B_9__T48b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T50b" defined at main.adb:164, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_7__B_9__T50b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T52b" defined at main.adb:174, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T52b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T53b" defined at main.adb:177, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T53b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T54b" defined at main.adb:181, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T54b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T55b" defined at main.adb:183, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T56b" defined at main.adb:187, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T56b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T57b" defined at main.adb:189, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T57b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T58b" defined at main.adb:193, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T58b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T59b" defined at main.adb:195, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T59b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T60b" defined at main.adb:199, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T60b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T61b" defined at main.adb:201, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T61b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T62b" defined at main.adb:203, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T62b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T63b" defined at main.adb:205, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T63b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T64b" defined at main.adb:207, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T64b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T65b" defined at main.adb:209, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T65b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T66b" defined at main.adb:211, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T66b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T67b" defined at main.adb:214, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_6__T67b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at main.adb:19, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_442
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_442 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_442__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_442 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at main.adb:24, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_443
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_443 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_443__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_443 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (1 : int))) = (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (2 : int))) = (48 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (3 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (4 : int))) = (48 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:25, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_444
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_444 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_444__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_444 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (1 : int))) = (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (2 : int))) = (48 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (3 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (4 : int))) = (48 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:36, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_447
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_447 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_447__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_447 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at main.adb:49, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_450
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_450 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_450__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_450 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (1 : int))) = (36 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (2 : int))) = (32 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (3 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (4 : int))) = (47 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (5 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (6 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (7 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (8 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (9 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:57, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_451
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_451 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_451__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_451 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (1 : int))) = (70 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (4 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (6 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (8 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (9 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (10 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (11 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (12 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (13 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (14 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (15 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (16 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_451 __void_param) (18 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:65, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_457
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_457 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_457__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_457 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (4 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (5 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (7 : int))) = (62 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (10 : int))) = (32 : int)) ) ) ) ))

end

(* Module for declaring an abstract function for the aggregate at main.adb:68, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_3__t__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val function main__B_3__t__aggregate_def 
   (temp___459 : Mystringtokeniser__tokenextent.tokenextent) : Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:74, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_462
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_462 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_462__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_462 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (1 : int))) = (89 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (7 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (8 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (9 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (11 : int))) = (100 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (13 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (14 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (15 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (16 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (17 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (18 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (19 : int))) = (110 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (20 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (21 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (22 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (23 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (24 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (25 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (26 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (27 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (28 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (30 : int))) = (120 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (31 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (32 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (33 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (34 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (35 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_462 __void_param) (36 : int))) = (50 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:93, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_468
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_468 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_468__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_468 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (8 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (9 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (10 : int))) = (104 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (14 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (15 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (16 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (17 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (18 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (19 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (20 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (21 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (22 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (23 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (24 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (25 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (26 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (27 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (28 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (29 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (30 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (32 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (33 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (34 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (35 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (36 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (37 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (38 : int))) = (52 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (39 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (40 : int))) = (79 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (41 : int))) = (82 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (42 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (43 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (44 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (45 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (46 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (47 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (48 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (49 : int))) = (114 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (50 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (51 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (52 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (53 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (54 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (55 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (56 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (57 : int))) = (105 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (58 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (59 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (60 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (61 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (62 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (63 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_468 __void_param) (64 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:109, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_474
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_474 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_474__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_474 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (5 : int))) = (80 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (6 : int))) = (73 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (7 : int))) = (78 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (10 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (11 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (13 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (14 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (16 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (17 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (18 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (19 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (20 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (21 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_474 __void_param) (23 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:113, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_476
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_476 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_476__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_476 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (5 : int))) = (67 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (6 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (7 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (8 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (9 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (10 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (11 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (13 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (14 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (16 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (17 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (18 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (20 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (21 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (22 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (23 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (26 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (27 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (28 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (29 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (30 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (31 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (32 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (33 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (34 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (35 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (36 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (37 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (39 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (40 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (41 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (42 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (43 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (44 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (45 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (46 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (47 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (48 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (49 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (50 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (51 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (52 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (53 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (54 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (55 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (56 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (57 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_476 __void_param) (58 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:102, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_477
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_477 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_477__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_477 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (2 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_477 __void_param) (6 : int))) = (107 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:122, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_485
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_485 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_485__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_485 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (6 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (8 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (9 : int))) = (62 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_485 __void_param) (10 : int))) = (32 : int)) ) ) ) ))

end

(* Module for declaring an abstract function for the aggregate at main.adb:125, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_7__t__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val function main__B_7__t__aggregate_def 
   (temp___487 : Mystringtokeniser__tokenextent.tokenextent) : Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:132, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_490
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_490 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_490__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_490 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (1 : int))) = (89 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (7 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (8 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (9 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (10 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (11 : int))) = (100 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (13 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (14 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (15 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (17 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (18 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (19 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (20 : int))) = (121 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (22 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (23 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (24 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (25 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (26 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (27 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (28 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (29 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (30 : int))) = (45 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (31 : int))) = (45 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (32 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (33 : int))) = (73 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (34 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (35 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (36 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (37 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (38 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (39 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (40 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (41 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (42 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (43 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (44 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (45 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (46 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (47 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_490 __void_param) (48 : int))) = (50 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:153, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_497
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_497 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_497__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_497 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (8 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (9 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (10 : int))) = (104 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (14 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (15 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (16 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (17 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (18 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (19 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (20 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (21 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (22 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (24 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (25 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (26 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (27 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (29 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (30 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (31 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (32 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (33 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (34 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (35 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (36 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (37 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (38 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (39 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (40 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (41 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (42 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (43 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (44 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (45 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (46 : int))) = (108 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (47 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (48 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (49 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (50 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (51 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (52 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (53 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (54 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (55 : int))) = (40 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (56 : int))) = (49 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (57 : int))) = (48 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (58 : int))) = (50 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (59 : int))) = (52 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (60 : int))) = (41 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:164, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_499
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_499 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_499__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_499 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (8 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (9 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (10 : int))) = (104 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (14 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (15 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (16 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (17 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (18 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (19 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (20 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (21 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (22 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (23 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (24 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (25 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (26 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (27 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (28 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (29 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (30 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (32 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (33 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (34 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (35 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (36 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (37 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (38 : int))) = (52 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (39 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (40 : int))) = (79 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (41 : int))) = (82 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (42 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (43 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (44 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (45 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (46 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (47 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (48 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (49 : int))) = (114 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (50 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (51 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (52 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (53 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (54 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (55 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (56 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (57 : int))) = (105 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (58 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (59 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (60 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (61 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (62 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (63 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_499 __void_param) (64 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:158, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_503
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_503 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_503__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_503 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_503 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_503 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_503 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_503 __void_param) (4 : int))) = (107 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:214, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_508
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_508 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_508__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_508 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (5 : int))) = (67 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (6 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (7 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (8 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (9 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (11 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (12 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (14 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (16 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (17 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (18 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (20 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (22 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (23 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (24 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (25 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (26 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (28 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (29 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (30 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (31 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (32 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (33 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (34 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (35 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (36 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (37 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (39 : int))) = (115 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (40 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (41 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (42 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (43 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (44 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (45 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (46 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (47 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (48 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (49 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (50 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (51 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (52 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (53 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (54 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (55 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (56 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (57 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (58 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (59 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_508 __void_param) (60 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:211, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_509
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_509 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_509__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_509 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_509 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_509 __void_param) (2 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_509 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_509 __void_param) (4 : int))) = (116 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:209, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_510
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_510 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_510__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_510 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (1 : int))) = (114 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (2 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (5 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (6 : int))) = (101 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:207, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_511
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_511 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_511__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_511 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_511 __void_param) (1 : int))) = (115 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_511 __void_param) (2 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_511 __void_param) (3 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_511 __void_param) (4 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_511 __void_param) (5 : int))) = (101 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:205, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_512
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_512 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_512__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_512 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (4 : int))) = (100 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:203, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_513
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_513 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_513__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_513 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_513 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_513 __void_param) (2 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_513 __void_param) (3 : int))) = (112 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:201, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_514
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_514 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_514__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_514 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (2 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (4 : int))) = (104 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:199, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_515
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_515 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_515__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_515 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (5 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (6 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (7 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (8 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (9 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (10 : int))) = (114 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (14 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (15 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (16 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (17 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (18 : int))) = (109 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (19 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (20 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (21 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (22 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (23 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (24 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (25 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (26 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (28 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (29 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (30 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (31 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (32 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (34 : int))) = (97 : int)) ) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (35 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (36 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (37 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (38 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (39 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (40 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (41 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (42 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (43 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (44 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (45 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (46 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (47 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (48 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (49 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (50 : int))) = (104 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (51 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (52 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (53 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (54 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (55 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (56 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (57 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (58 : int))) = (102 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (59 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (60 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (61 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (62 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (63 : int))) = (47 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (64 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_515 __void_param) (65 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:195, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_516
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_516 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_516__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_516 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_516 __void_param) (1 : int))) = (47 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:193, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_517
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_517 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_517__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_517 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (5 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (6 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (7 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (8 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (9 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (10 : int))) = (114 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (14 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (15 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (16 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (17 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (18 : int))) = (109 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (19 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (20 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (21 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (22 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (23 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (24 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (25 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (26 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (28 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (29 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (30 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (31 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (32 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (34 : int))) = (97 : int)) ) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (35 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (36 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (37 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (38 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (39 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (40 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (41 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (42 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (43 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (44 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (45 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (46 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (47 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (48 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (49 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (50 : int))) = (104 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (51 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (52 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (53 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (54 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (55 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (56 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (57 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (58 : int))) = (102 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (59 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (60 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (61 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (62 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (63 : int))) = (42 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (64 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_517 __void_param) (65 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:189, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_518
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_518 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_518__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_518 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (1 : int))) = (42 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:187, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_519
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_519 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_519__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_519 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (5 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (6 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (7 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (8 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (9 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (10 : int))) = (114 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (14 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (15 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (16 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (17 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (18 : int))) = (109 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (19 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (20 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (21 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (22 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (23 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (24 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (25 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (26 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (28 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (29 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (30 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (31 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (32 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (34 : int))) = (97 : int)) ) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (35 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (36 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (37 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (38 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (39 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (40 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (41 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (42 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (43 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (44 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (45 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (46 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (47 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (48 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (49 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (50 : int))) = (104 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (51 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (52 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (53 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (54 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (55 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (56 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (57 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (58 : int))) = (102 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (59 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (60 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (61 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (62 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (63 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (64 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_519 __void_param) (65 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:183, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_520
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_520 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_520__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_520 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (1 : int))) = (45 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:181, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_521
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_521 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_521__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_521 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (5 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (6 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (7 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (8 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (9 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (10 : int))) = (114 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (14 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (15 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (16 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (17 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (18 : int))) = (109 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (19 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (20 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (21 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (22 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (23 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (24 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (25 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (26 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (28 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (29 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (30 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (31 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (32 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (34 : int))) = (97 : int)) ) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (35 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (36 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (37 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (38 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (39 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (40 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (41 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (42 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (43 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (44 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (45 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (46 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (47 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (48 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (49 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (50 : int))) = (104 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (51 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (52 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (53 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (54 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (55 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (56 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (57 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (58 : int))) = (102 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (59 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (60 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (61 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (62 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (63 : int))) = (43 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (64 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_521 __void_param) (65 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:177, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_522
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_522 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_522__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_522 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (1 : int))) = (43 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:174, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_523
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_523 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_523__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_523 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_523 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_523 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_523 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_523 __void_param) (4 : int))) = (107 : int)) ) ))

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_554
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_554 
   (temp___556 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_597
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_597 
   (temp___599 : int) : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (15 : int))

end

(* Module for defining the value of constant "max_variable_length" defined at variablestore.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Variablestore__max_variable_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__max_variable_length as Variablestore__max_variable_length

 axiom max_variable_length__def_axiom :
  ((Variablestore__max_variable_length.max_variable_length ) = (1024 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Main__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "R29b" defined at main.adb:78, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_3__L_4__R29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the value of constant "R44b" defined at main.adb:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_7__L_8__R44b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__from_string as Variablestore__from_string
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val from_string 
   (s : Standard__string.string) : Variablestore__variable.variable
  requires {  ( [@GP_Pretty_Ada:68296] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Variablestore__from_string.from_string s)) /\ (Variablestore__from_string.from_string__function_guard result s) )/\(Variablestore__variable___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:19575] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:19578]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:19592] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:19598] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:19575] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:19578]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:19592] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:19598] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep

 val length 
   (m : Main__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Main__lines__mystring__T16b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:103149] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__length.length m) in (
    (if ((Main__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:103149] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Main__lines__length.length m) in (
    (Main__lines__length.length__function_guard result m)))
    ) -> ((Main__lines__length.length m) = (Main__lines__mystring__T16b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:8 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__to_string as Main__lines__to_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Main__lines__to_string.to_string m)) /\ (Main__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:102582] ((Standard__string.length result) = (epsilon temp___result_281 : int.
   ( (temp___result_281 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_281 m) ))) ) /\ ( [@GP_Pretty_Ada:102589] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:102594] ((Standard__string.last result) = (epsilon temp___result_282 : int.
   ( (temp___result_282 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_282 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__to_string.to_string m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__to_string.to_string m) in (
    (if ((Main__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:102582] ((Standard__string.length result) = (epsilon temp___result_283 : int.
      ( (temp___result_283 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_283 m) ))) ) /\ ( [@GP_Pretty_Ada:102589] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:102594] ((Standard__string.last result) = (epsilon temp___result_284 : int.
      ( (temp___result_284 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_284 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:12 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__from_string as Main__lines__from_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:103067] ((Standard__string.length s) <= (2048 : int)) ) }
  ensures {  ( ( (result = (Main__lines__from_string.from_string s)) /\ (Main__lines__from_string.from_string__function_guard result s) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:103081] ((epsilon temp___result_285 : int.
   ( (temp___result_285 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_285 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Main__lines__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:103067] ((Standard__string.length s) <= (2048 : int)) ) ) -> (let result = (Main__lines__from_string.from_string s) in (
    (if ((Main__lines__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:103081] ((epsilon temp___result_286 : int.
      ( (temp___result_286 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_286 result) )) = (Standard__string.length s)) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:16 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less as Main__lines__less

 val less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__less.less m1 m2)) /\ (Main__lines__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:30 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Main__lines__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:103217] (index <= (epsilon temp___result_287 : int.
   ( (temp___result_287 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_287 m) ))) ) }
  ensures {  ( ( (result = (Main__lines__get.get m index)) /\ (Main__lines__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___288 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
   (Array__Int__Standard__character.get temp___288 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:103217] (index <= (epsilon temp___result_289 : int.
    ( (temp___result_289 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_289 m) ))) ) ) -> (let result = (Main__lines__get.get m index) in (
    (if ((Main__lines__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Main__lines__get.get m index) in (
    (Main__lines__get.get__function_guard result m index)))
    ) -> ((Main__lines__get.get m index) = (Standard__character__rep.to_rep (let temp___290 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get temp___290 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:18 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__equal as Main__lines__equal

 val equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__equal.equal m1 m2)) /\ (Main__lines__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:102688] ((epsilon temp___result_291 : int.
    ( (temp___result_291 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_291 m1) )) = (epsilon temp___result_292 : int.
    ( (temp___result_292 = (Main__lines__length.length m2)) /\ (Main__lines__length.length__function_guard temp___result_292 m2) ))) ) /\ (forall i   [@model_trace:102706] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_293 : int.
     ( (temp___result_293 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_293 m1) ))) ) -> ( [@GP_Pretty_Ada:102696] ((epsilon temp___result_294 : int.
     ( (temp___result_294 = (Main__lines__get.get m1 i)) /\ (Main__lines__get.get__function_guard temp___result_294 m1 i) )) = (epsilon temp___result_295 : int.
     ( (temp___result_295 = (Main__lines__get.get m2 i)) /\ (Main__lines__get.get__function_guard temp___result_295 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:103295] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__substring as Main__lines__substring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:102774] (from <= to__) ) /\ ( [@GP_Pretty_Ada:102777] (to__ <= (epsilon temp___result_296 : int.
   ( (temp___result_296 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_296 m) ))) ) ) }
  ensures {  ( ( (result = (Main__lines__substring.substring m from to__)) /\ (Main__lines__substring.substring__function_guard result m from to__) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:103190] ((epsilon temp___result_297 : int.
   ( (temp___result_297 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_297 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall from   to__   : int [(Main__lines__substring.substring m from to__)].
   ( ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:102774] (from <= to__) ) /\ ( [@GP_Pretty_Ada:102777] (to__ <= (epsilon temp___result_298 : int.
    ( (temp___result_298 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_298 m) ))) ) ) ) -> (let result = (Main__lines__substring.substring m from to__) in (
    (if ((Main__lines__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:103190] ((epsilon temp___result_299 : int.
      ( (temp___result_299 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_299 result) )) = ((to__ - from) + (1 : int))) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:33 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Main__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:22781] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:22787] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:22796] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:22807] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, item, last}

end

(* Module giving a program function and a defining axiom for the expression function "size" defined at stack.ads:14 instantiated at operations.ads:5, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Operations__operandstack__size___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size
 use        Operations__operandstack__stack__T13s as Operations__operandstack__stack__T13s
 use        Operations__operandstack__stack__T13s__rep as Operations__operandstack__stack__T13s__rep

 val size 
   (s : Operations__operandstack__stack.stack) : int
  requires {  true }
  ensures {  ( ( (result = (Operations__operandstack__size.size s)) /\ (Operations__operandstack__size.size__function_guard result s) )/\( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ (result = (Operations__operandstack__stack__T13s__rep.to_rep s.Operations__operandstack__stack.__split_fields.Operations__operandstack__stack.rec__operations__operandstack__stack__size)) ) ) }
 
 axiom size__def_axiom :
  (forall s   : Operations__operandstack__stack.stack [(Operations__operandstack__size.size s)].
   ( ( (Operations__operandstack__stack___axiom.dynamic_invariant s True True True True) /\ (let result = (Operations__operandstack__size.size s) in (
    (Operations__operandstack__size.size__function_guard result s)))
    ) -> ((Operations__operandstack__size.size s) = (Operations__operandstack__stack__T13s__rep.to_rep s.Operations__operandstack__stack.__split_fields.Operations__operandstack__stack.rec__operations__operandstack__stack__size)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at stack.ads:11 instantiated at operations.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__operandstack__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val init 
   (s__split_fields : Operations__operandstack__stack.__split_fields__ref) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:101706] ((epsilon temp___result_352 : int.
   ( (temp___result_352 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_352 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = (0 : int)) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at variablestore.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val init 
   (d : Variablestore__database.database__ref) : unit
  requires {  true }
  ensures {  (Variablestore__database___axiom.dynamic_invariant d.Variablestore__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:22650] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:22656] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenise 
   (s : Standard__string.string) (tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first : Standard__integer.integer) (tokens__last : Standard__integer.integer) (count : int__ref) : unit
  requires {  ( (if (((Standard__string.length s) > (0 : int))) then (
   ( [@GP_Pretty_Ada:16632] ((Standard__string.first s) <= (Standard__string.last s)) )) else (
   ( [@GP_Pretty_Ada:93274] true ))) /\ ( [@GP_Pretty_Ada:16641] ((Standard__integer__rep.to_rep tokens__first) <= (Standard__integer__rep.to_rep tokens__last)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:16649] (count.int__content <= (Integer.length (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last))) ) /\ (forall index   [@model_trace:16654] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep tokens__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep tokens__first) + (count.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:16679] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first s)) ) /\ ( [@GP_Pretty_Ada:16689] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:16699] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last s) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) /\ ( ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last)))) /\ (forall temp___383   : int.
   (if (( ((Standard__integer__rep.to_rep tokens__first) <= temp___383) /\ (temp___383 <= (Standard__integer__rep.to_rep tokens__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___383) True False True True)) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant count.int__content True True True True) ) ) }
  writes {tokens, count}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:22962] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:22968] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringtointeger__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Stringtointeger__from_string as Stringtointeger__from_string

 val from_string 
   (s : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (Stringtointeger__from_string.from_string s)) /\ (Stringtointeger__from_string.from_string__function_guard result s) )/\(Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Stringtointeger__from_string.from_string s)].
   (let result = (Stringtointeger__from_string.from_string s) in (
    (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "plus" defined at operations.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__plus___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val plus 
   (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (islocked : bool) : unit
  requires {  ( ( [@GP_Pretty_Ada:29526] ((epsilon temp___result_400 : int.
   ( (temp___result_400 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_400 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) >= (2 : int)) ) /\ ( [@GP_Pretty_Ada:29530] ( (islocked = True) <-> false ) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102079] ((epsilon temp___result_401 : int.
   ( (temp___result_401 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_401 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_402 : int.
   ( (temp___result_402 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_402 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) - (1 : int))) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "minus" defined at operations.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__minus___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val minus 
   (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (islocked : bool) : unit
  requires {  ( ( [@GP_Pretty_Ada:29588] ((epsilon temp___result_405 : int.
   ( (temp___result_405 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_405 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) >= (2 : int)) ) /\ ( [@GP_Pretty_Ada:29592] ( (islocked = True) <-> false ) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102133] ((epsilon temp___result_406 : int.
   ( (temp___result_406 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_406 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_407 : int.
   ( (temp___result_407 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_407 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) - (1 : int))) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "multiply" defined at operations.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__multiply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val multiply 
   (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (islocked : bool) : unit
  requires {  ( ( [@GP_Pretty_Ada:29650] ((epsilon temp___result_410 : int.
   ( (temp___result_410 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_410 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) >= (2 : int)) ) /\ ( [@GP_Pretty_Ada:29654] ( (islocked = True) <-> false ) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102187] ((epsilon temp___result_411 : int.
   ( (temp___result_411 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_411 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_412 : int.
   ( (temp___result_412 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_412 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) - (1 : int))) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "divide" defined at operations.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__divide___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val divide 
   (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (islocked : bool) : unit
  requires {  ( ( [@GP_Pretty_Ada:29712] ((epsilon temp___result_415 : int.
   ( (temp___result_415 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_415 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) >= (2 : int)) ) /\ ( [@GP_Pretty_Ada:29716] ( (islocked = True) <-> false ) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102241] ((epsilon temp___result_416 : int.
   ( (temp___result_416 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_416 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_417 : int.
   ( (temp___result_417 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_417 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) - (1 : int))) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "push_operation" defined at operations.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__push_operation___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val push_operation 
   (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (i : int) (islocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:102266] ( (islocked = True) <-> false ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102287] ((epsilon temp___result_420 : int.
   ( (temp___result_420 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_420 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_421 : int.
   ( (temp___result_421 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_421 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) + (1 : int))) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "pop_operation" defined at operations.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__pop_operation___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val pop_operation 
   (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (i : int__ref) (islocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:102312] ( (islocked = True) <-> false ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102333] ((epsilon temp___result_424 : int.
   ( (temp___result_424 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_424 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_425 : int.
   ( (temp___result_425 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_425 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) - (1 : int))) ) /\ ( (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) /\ (Standard__integer___axiom.dynamic_invariant i.int__content True True True True) ) ) }
  writes {s__split_fields, i}

end

(* Module for declaring a program function (and possibly an axiom) for "load" defined at operations.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__load___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size

 val load 
   (v : Variablestore__variable.variable) (db : Variablestore__database.database) (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (islocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:102358] ( (islocked = True) <-> false ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102379] ((epsilon temp___result_428 : int.
   ( (temp___result_428 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_428 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_429 : int.
   ( (temp___result_429 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_429 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) + (1 : int))) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "store" defined at operations.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__store___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size as Operations__operandstack__size
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val store 
   (v__split_fields : Variablestore__variable.__split_fields__ref) (db : Variablestore__database.database__ref) (s__split_fields : Operations__operandstack__stack.__split_fields__ref) (islocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:102404] ( (islocked = True) <-> false ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:102425] ((epsilon temp___result_433 : int.
   ( (temp___result_433 = (Operations__operandstack__size.size { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content })) /\ (Operations__operandstack__size.size__function_guard temp___result_433 { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content }) )) = ((epsilon temp___result_434 : int.
   ( (temp___result_434 = (Operations__operandstack__size.size (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } ))) /\ (Operations__operandstack__size.size__function_guard temp___result_434 (old { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } )) )) - (1 : int))) ) /\ ( ( (Variablestore__variable___axiom.dynamic_invariant { Variablestore__variable.__split_fields = v__split_fields.Variablestore__variable.__split_fields__content } True True True True) /\ (Variablestore__database___axiom.dynamic_invariant db.Variablestore__database.database__content True True True True) ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = s__split_fields.Operations__operandstack__stack.__split_fields__content } True True True True) ) ) }
  writes {v__split_fields, db, s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at operations.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val remove 
   (v__split_fields : Variablestore__variable.__split_fields__ref) (db : Variablestore__database.database__ref) (islocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:102450] ( (islocked = True) <-> false ) ) }
  ensures {  ( (Variablestore__variable___axiom.dynamic_invariant { Variablestore__variable.__split_fields = v__split_fields.Variablestore__variable.__split_fields__content } True True True True) /\ (Variablestore__database___axiom.dynamic_invariant db.Variablestore__database.database__content True True True True) ) }
  writes {v__split_fields, db}

end

(* Module for declaring a program function (and possibly an axiom) for "list" defined at operations.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__list___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val list 
   (db : Variablestore__database.database) (islocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:102468] ( (islocked = True) <-> false ) ) }
  ensures {  true }

end

(* Module for defining the value of the aggregate at main.adb:68, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_3__t__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_3__t__aggregate_def as Main__B_3__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom def_axiom :
  (forall temp___459   : Mystringtokeniser__tokenextent.tokenextent.
   (let temp___458 [@mlw:proxy_symbol] [@introduced] = (Main__B_3__t__aggregate_def.main__B_3__t__aggregate_def temp___459) in (
    (if ((Mystringtokeniser__tokenextent___axiom.dynamic_invariant temp___459 True True True True)) then (
     (forall temp___460   : int.
      ((Array__Int__Mystringtokeniser__tokenextent.get temp___458 temp___460) = temp___459))) else true)))
  )

end

(* Module for defining the value of the aggregate at main.adb:125, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_7__t__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_7__t__aggregate_def as Main__B_7__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom def_axiom :
  (forall temp___487   : Mystringtokeniser__tokenextent.tokenextent.
   (let temp___486 [@mlw:proxy_symbol] [@introduced] = (Main__B_7__t__aggregate_def.main__B_7__t__aggregate_def temp___487) in (
    (if ((Mystringtokeniser__tokenextent___axiom.dynamic_invariant temp___487 True True True True)) then (
     (forall temp___488   : int.
      ((Array__Int__Mystringtokeniser__tokenextent.get temp___486 temp___488) = temp___487))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:16, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Variablestore__database as Variablestore__database
 use        Main__db as Main__db
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__from_string___axiom as Variablestore__from_string___axiom
 use        Main__var as Main__var
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Main__master_pin as Main__master_pin
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Main__enter_pin as Main__enter_pin
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__enter_pin_str as Main__enter_pin_str
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string as Main__lines__to_string
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__from_string___axiom as Main__lines__from_string___axiom
 use        Main__lines__equal___axiom as Main__lines__equal___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__p as Main__p
 use        Main__islocked as Main__islocked
 use        Main__command as Main__command
 use        Main__number as Main__number
 use        Main__opstack as Main__opstack
 use        Operations__operandstack__stack as Operations__operandstack__stack
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__size___axiom as Operations__operandstack__size___axiom
 use        Operations__operandstack__init___axiom as Operations__operandstack__init___axiom
 use        Variablestore__init___axiom as Variablestore__init___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_3__t as Main__B_3__t
 use        Main__B_3__numtokens as Main__B_3__numtokens
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Main__B_3__L_4__R29b as Main__B_3__L_4__R29b
 use        Main__B_3__L_4__i as Main__B_3__L_4__i
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_5__tokstr as Main__B_3__B_5__tokstr
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_7__t as Main__B_7__t
 use        Main__B_7__numtokens as Main__B_7__numtokens
 use        Main__B_7__L_8__R44b as Main__B_7__L_8__R44b
 use        Main__B_7__L_8__i as Main__B_7__L_8__i
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_7__B_9__tokstr as Main__B_7__B_9__tokstr
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Operations__plus___axiom as Operations__plus___axiom
 use        Operations__minus___axiom as Operations__minus___axiom
 use        Operations__multiply___axiom as Operations__multiply___axiom
 use        Operations__divide___axiom as Operations__divide___axiom
 use        Operations__push_operation___axiom as Operations__push_operation___axiom
 use        Operations__pop_operation___axiom as Operations__pop_operation___axiom
 use        Operations__load___axiom as Operations__load___axiom
 use        Operations__store___axiom as Operations__store___axiom
 use        Operations__remove___axiom as Operations__remove___axiom
 use        Operations__list___axiom as Operations__list___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Main__TTenter_pin_strSP1 as Main__TTenter_pin_strSP1
 use        Main__Tenter_pin_strS___axiom as Main__Tenter_pin_strS___axiom
 use        Main__L_1 as Main__L_1
 use        Main__L_2 as Main__L_2
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Main__B_3__TTtSP1 as Main__B_3__TTtSP1
 use        Main__B_3__TtS___axiom as Main__B_3__TtS___axiom
 use        Main__B_3__L_4 as Main__B_3__L_4
 use        Main__L_6 as Main__L_6
 use        Main__B_7__TTtSP1 as Main__B_7__TTtSP1
 use        Main__B_7__TtS___axiom as Main__B_7__TtS___axiom
 use        Main__B_7__L_8 as Main__B_7__L_8
 use        Temp___String_Literal_442 as Temp___String_Literal_442
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_443 as Temp___String_Literal_443
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_444 as Temp___String_Literal_444
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_447 as Temp___String_Literal_447
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_450 as Temp___String_Literal_450
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_451 as Temp___String_Literal_451
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_457 as Temp___String_Literal_457
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_3__t__aggregate_def as Main__B_3__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_462 as Temp___String_Literal_462
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_468 as Temp___String_Literal_468
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_474 as Temp___String_Literal_474
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_476 as Temp___String_Literal_476
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_477 as Temp___String_Literal_477
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_485 as Temp___String_Literal_485
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_7__t__aggregate_def as Main__B_7__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_490 as Temp___String_Literal_490
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_497 as Temp___String_Literal_497
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_499 as Temp___String_Literal_499
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_503 as Temp___String_Literal_503
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_508 as Temp___String_Literal_508
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_509 as Temp___String_Literal_509
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_510 as Temp___String_Literal_510
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_511 as Temp___String_Literal_511
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_512 as Temp___String_Literal_512
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_513 as Temp___String_Literal_513
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_514 as Temp___String_Literal_514
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_515 as Temp___String_Literal_515
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_516 as Temp___String_Literal_516
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_517 as Temp___String_Literal_517
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_518 as Temp___String_Literal_518
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_519 as Temp___String_Literal_519
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_520 as Temp___String_Literal_520
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_521 as Temp___String_Literal_521
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_522 as Temp___String_Literal_522
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_523 as Temp___String_Literal_523
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__db___axiom as Main__db___axiom
 use        Main__var___axiom as Main__var___axiom
 use        Main__master_pin___axiom as Main__master_pin___axiom
 use        Main__enter_pin___axiom as Main__enter_pin___axiom
 use        Main__enter_pin_str___axiom as Main__enter_pin_str___axiom
 use        Main__p___axiom as Main__p___axiom
 use        Main__islocked___axiom as Main__islocked___axiom
 use        Main__command___axiom as Main__command___axiom
 use        Main__number___axiom as Main__number___axiom
 use        Main__opstack___axiom as Main__opstack___axiom
 use        Main__B_3__t___axiom as Main__B_3__t___axiom
 use        Main__B_3__t__aggregate_def___axiom as Main__B_3__t__aggregate_def___axiom
 use        Main__B_3__numtokens___axiom as Main__B_3__numtokens___axiom
 use        Main__B_3__L_4__i___axiom as Main__B_3__L_4__i___axiom
 use        Main__B_3__B_5__tokstr___axiom as Main__B_3__B_5__tokstr___axiom
 use        Main__B_7__t___axiom as Main__B_7__t___axiom
 use        Main__B_7__t__aggregate_def___axiom as Main__B_7__t__aggregate_def___axiom
 use        Main__B_7__numtokens___axiom as Main__B_7__numtokens___axiom
 use        Main__B_7__L_8__i___axiom as Main__B_7__L_8__i___axiom
 use        Main__B_7__B_9__tokstr___axiom as Main__B_7__B_9__tokstr___axiom
 use        Main__B_3__L_4___axiom as Main__B_3__L_4___axiom
 use        Main__L_2___axiom as Main__L_2___axiom
 use        Main__B_7__L_8___axiom as Main__B_7__L_8___axiom
 use        Main__L_6___axiom as Main__L_6___axiom
 use        Main__L_1___axiom as Main__L_1___axiom
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__init___axiom as Variablestore__init___axiom
 use        Variablestore__from_string___axiom as Variablestore__from_string___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Operations__plus___axiom as Operations__plus___axiom
 use        Operations__minus___axiom as Operations__minus___axiom
 use        Operations__multiply___axiom as Operations__multiply___axiom
 use        Operations__divide___axiom as Operations__divide___axiom
 use        Operations__push_operation___axiom as Operations__push_operation___axiom
 use        Operations__pop_operation___axiom as Operations__pop_operation___axiom
 use        Operations__load___axiom as Operations__load___axiom
 use        Operations__store___axiom as Operations__store___axiom
 use        Operations__remove___axiom as Operations__remove___axiom
 use        Operations__list___axiom as Operations__list___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Operations__operandstack__init___axiom as Operations__operandstack__init___axiom
 use        Operations__operandstack__size___axiom as Operations__operandstack__size___axiom
 use        Operations__operandstack__storagearray___axiom as Operations__operandstack__storagearray___axiom
 use        Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
 use        Operations__operandstack__item___axiom as Operations__operandstack__item___axiom
 use        Operations__operandstack__stack__T13s___axiom as Operations__operandstack__stack__T13s___axiom
 use        Main__Tenter_pin_strS___axiom as Main__Tenter_pin_strS___axiom
 use        Main__TTenter_pin_strSP1___axiom as Main__TTenter_pin_strSP1___axiom
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__from_string___axiom as Main__lines__from_string___axiom
 use        Main__lines__equal___axiom as Main__lines__equal___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom
 use        Main__B_3__TtS___axiom as Main__B_3__TtS___axiom
 use        Main__B_3__TTtSP1___axiom as Main__B_3__TTtSP1___axiom
 use        Main__B_3__L_4__R29b___axiom as Main__B_3__L_4__R29b___axiom
 use        Main__B_7__TtS___axiom as Main__B_7__TtS___axiom
 use        Main__B_7__TTtSP1___axiom as Main__B_7__TTtSP1___axiom
 use        Main__B_7__L_8__R44b___axiom as Main__B_7__L_8__R44b___axiom

 exception Temp___exception_463
 
 exception Temp___exception_469
 
 exception Temp___exception_475
 
 exception Temp___exception_491
 
 exception Temp___exception_498
 
 exception Temp___exception_500
 
 let def [#"main.adb" 16 0 0][@GP_Subp:main.adb:16] 
   (__void_param : unit)
  requires { [#"main.adb" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:16 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:16 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:16 *)
  ;
  [#"main.adb" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:16 *)
  ;
  [#"main.adb" 16 0 0] try
   ( ();
   ([#"main.adb" 17 0 0] ());
   ([#"main.adb" 18 0 0] ( [#"main.adb" 18 0 0] begin ensures {true} let _ = (let _ = ( () ) in (
    ()))
    in () end ;
   [#"main.adb" 18 0 0] assume { [#"main.adb" 18 0 0] (Variablestore__database___axiom.default_initial_assumption Main__db.db.Variablestore__database.database__content False) };
   [#"main.adb" 18 0 0] assume { [#"main.adb" 18 0 0] (Variablestore__database___axiom.dynamic_invariant Main__db.db.Variablestore__database.database__content False False True True) } ));
   ([#"main.adb" 19 0 0] ());
   ([#"main.adb" 19 0 0] ( (let main__var__assume = ([#"main.adb" 19 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:   VAR : VariableStore.Variable := VariableStore.From_String("");                                                 ^ main.adb:19:49:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:var_decl__call_from_string] [@GP_Sloc:main.adb:19:49] [@GP_Id:0] (Variablestore__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_442.temp___String_Literal_442(()))) ((1 : int)) ((0 : int))))) )) in (
     (Main__var.var__split_fields.Variablestore__variable.__split_fields__content <- ( main__var__assume.Variablestore__variable.__split_fields ))))
   ;
    assume {  (Variablestore__variable___axiom.dynamic_invariant { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content } True False True True) } ));
   ([#"main.adb" 21 0 0] ( [#"main.adb" 21 0 0] assume { [#"main.adb" 21 0 0] (Pin__pin___axiom.default_initial_assumption Main__master_pin.master_pin.int__content False) };
   [#"main.adb" 21 0 0] assume { [#"main.adb" 21 0 0] (Pin__pin___axiom.dynamic_invariant Main__master_pin.master_pin.int__content False False True True) } ));
   ([#"main.adb" 24 0 0] ());
   ([#"main.adb" 24 0 0] ( [#"main.adb" 24 0 0] (Main__enter_pin.enter_pin.int__content <- ( ([#"main.adb" 24 0 0] ( [@comment:   ENTER_PIN : PIN.PIN := PIN.From_String("0000");                              ^ main.adb:24:30:VC_PRECONDITION] [@GP_Sloc:main.adb:24:30] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:enter_pin_decl__call_from_string] [@GP_Id:1] (Pin__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_443.temp___String_Literal_443(()))) ((1 : int)) ((4 : int))))) )) ));
    assume {  (Pin__pin___axiom.dynamic_invariant Main__enter_pin.enter_pin.int__content True False True True) } ));
   ([#"main.adb" 25 0 0] ());
   ([#"main.adb" 25 0 0] ( [#"main.adb" 25 0 0] (Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content <- ( (Temp___String_Literal_444.temp___String_Literal_444(())) ));
   [#"main.adb" 25 0 0] assume { [#"main.adb" 25 0 0] (Main__Tenter_pin_strS___axiom.dynamic_invariant Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content True False True True) } ));
   ([#"main.adb" 27 0 0] ());
   ([#"mystring.adb" 3 0 0] ());
   ([#"main.adb" 27 0 0] ());
   ([#"main.adb" 29 0 0] ( [#"main.adb" 29 0 0] begin ensures {true} let _ = (let _ = (let temp___445 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 29 0 0] (val _f : Main__lines__mystring.mystring
   ensures {[#"main.adb" 29 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 29 0 0] assume { [#"main.adb" 29 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } False) };
   [#"main.adb" 29 0 0] assume { [#"main.adb" 29 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
   ([#"main.adb" 33 0 0] [#"main.adb" 33 0 0] (Main__islocked.islocked.bool__content <- ( (Boolean.of_int((1 : int))) )));
   ([#"main.adb" 36 0 0] ());
   ([#"main.adb" 36 0 0] ( (let main__command__assume = ([#"main.adb" 36 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:command_decl__call_from_string] [@comment:   COMMAND : Lines.MyString := Lines.From_String("");                                     ^ main.adb:36:37:VC_PRECONDITION] [@GP_Id:2] [@GP_Sloc:main.adb:36:37] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_447.temp___String_Literal_447(()))) ((1 : int)) ((0 : int))))) )) in (
     (Main__command.command__split_fields.Main__lines__mystring.__split_fields__content <- ( main__command__assume.Main__lines__mystring.__split_fields ))))
   ;
    assume {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"main.adb" 39 0 0] ( [#"main.adb" 39 0 0] (Main__number.number.int__content <- ( (0 : int) ));
   [#"main.adb" 39 0 0] assume { [#"main.adb" 39 0 0] (Standard__integer___axiom.dynamic_invariant Main__number.number.int__content True False True True) } ));
   ([#"main.adb" 42 0 0] ( [#"main.adb" 42 0 0] begin ensures {true} let _ = (let _ = (let temp___448 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 42 0 0] (val _f : Operations__operandstack__stack.stack
   ensures {[#"main.adb" 42 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 42 0 0] assume { [#"main.adb" 42 0 0] (Operations__operandstack__stack___axiom.default_initial_assumption { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content } False) };
   [#"main.adb" 42 0 0] assume { [#"main.adb" 42 0 0] (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content } False False True True) } ));
   ([#"main.adb" 67 0 0] ());
   ([#"main.adb" 64 0 0] ());
   ([#"main.adb" 124 0 0] ());
   ([#"main.adb" 118 0 0] ());
   ([#"main.adb" 61 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:46:33] ([#"main.adb" 46 0 0] ()) );
   ( [@GP_Sloc:main.adb:46:27] ([#"main.adb" 46 0 0] ()) );
   ( [@GP_Sloc:main.adb:46:27] ([#"main.adb" 46 0 0] ( (Operations__operandstack__init___axiom.init(Main__opstack.opstack__split_fields)) )) );
   ( [@GP_Sloc:main.adb:47:23] ([#"main.adb" 47 0 0] ()) );
   ( [@GP_Sloc:main.adb:47:17] ([#"main.adb" 47 0 0] ()) );
   ( [@GP_Sloc:main.adb:47:17] ([#"main.adb" 47 0 0] ( (Variablestore__init___axiom.init(Main__db.db)) )) );
   ( [@GP_Sloc:main.adb:49:4] ([#"main.adb" 49 0 0] ()) );
   ( [@GP_Sloc:main.adb:49:4] ([#"main.adb" 49 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_450.temp___String_Literal_450(()))) ((1 : int)) ((9 : int))))) )) );
   ( [@GP_Sloc:main.adb:50:19] ([#"main.adb" 50 0 0] ()) );
   ( [@GP_Sloc:main.adb:50:9] ([#"main.adb" 50 0 0] ()) );
   ( [@GP_Sloc:main.adb:50:9] ([#"main.adb" 50 0 0] ( (Main__lines__get_line___axiom.get_line(Main__p.p__split_fields)) )) );
   ( [@GP_Sloc:main.adb:53:23] ([#"main.adb" 53 0 0] ()) );
   ( [@GP_Sloc:main.adb:53:12] ([#"main.adb" 53 0 0] ()) );
   ( [@GP_Sloc:main.adb:53:4] ([#"main.adb" 53 0 0] (if (( ([#"main.adb" 53 0 0] [#"main.adb" 53 0 0] (([@branch_id=2505] Main.spark__branch).bool__content <- ( (Boolean.andb((( [#"main.adb" 53 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })) in (
    ()))
    in () end ;
   (Standard__string.length((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })))) ) = (4 : int))) ((let temp___453 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })) in (
    ( (let temp___452 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 53 0 0] (val _f : int
    in _f) in (
     (if ((Boolean.andb(((Standard__string.first(temp___453)) <= temp___452)) ((temp___452 <= (Standard__string.last(temp___453)))))) then (
      [#"main.adb" 53 0 0] begin ensures {true} let _ = (let _ = (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array temp___453) temp___452)) in (
       (Boolean.andb((i >= (48 : int))) ((i <= (57 : int))))))
       in (
       ()))
       in () end ))))
    ;
    [#"main.adb" 53 0 0] (val _f : bool
    ensures {[#"main.adb" 53 0 0] ( (result = True) <-> (let temp___456 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_454 : Standard__string.string.
     ( (temp___result_454 = (Main__lines__to_string.to_string { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })) /\ (Main__lines__to_string.to_string__function_guard temp___result_454 { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content }) )) in (
     (forall temp___455 [#"main.adb" 53 0 0]  [@name:I] [@model_trace:2517'Index]  : int.
      ( ( ((Standard__string.first temp___456) <= temp___455) /\ (temp___455 <= (Standard__string.last temp___456)) ) -> (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array temp___456) temp___455)) in (
       ( (i >= (48 : int)) /\ (i <= (57 : int)) )))
       ))))
     )} 
    in _f) )))
   )) )));
   ( [@branch_id=2505] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:55:7] ([#"main.adb" 55 0 0] ()) );
    ( [@GP_Sloc:main.adb:55:53] ([#"main.adb" 55 0 0] ()) );
    ( [@GP_Sloc:main.adb:55:42] ([#"main.adb" 55 0 0] ()) );
    ( [@GP_Sloc:main.adb:55:24] ([#"main.adb" 55 0 0] ()) );
    ( [@GP_Sloc:main.adb:55:18] ([#"main.adb" 55 0 0] [#"main.adb" 55 0 0] (Main__master_pin.master_pin.int__content <- ( ([#"main.adb" 55 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:      MASTER_PIN := PIN.From_String(Lines.To_String(P));                        ^ main.adb:55:24:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:if__master_pin_assign__call_from_string] [@GP_Id:3] [@GP_Sloc:main.adb:55:24] (Pin__from_string___axiom.from_string((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })))) )) ))) ) )) else (
    ( ();
    ( [@GP_Sloc:main.adb:57:7] ([#"main.adb" 57 0 0] ()) );
    ( [@GP_Sloc:main.adb:57:7] ([#"main.adb" 57 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_451.temp___String_Literal_451(()))) ((1 : int)) ((18 : int))))) )) );
    ( [@GP_Sloc:main.adb:58:7] ([#"main.adb" 58 0 0] [#"main.adb" 58 0 0] raise Return__exc) ) )))) );
   ( [@GP_Sloc:main.adb:61:15] ([#"main.adb" 61 0 0] ( () (* Translation of an Ada loop from main.adb:61 *)
   ;
   (if ((Boolean.of_int((1 : int)))) then (
    [#"main.adb" 61 0 0] try
     ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = Main__islocked.islocked.bool__content in (
      ()))
      in () end ;
     (let temp___542 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : bool
     ensures {[#"main.adb" 61 0 0] (result = Main__islocked.islocked.bool__content)} 
     in _f) in (
      ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = Main__master_pin.master_pin.int__content in (
       ()))
       in () end ;
      (let temp___541 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : int
      ensures {[#"main.adb" 61 0 0] (result = Main__master_pin.master_pin.int__content)} 
      in _f) in (
       ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } in (
        ()))
        in () end ;
       (let temp___540 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : Main__lines__mystring.mystring
       ensures {[#"main.adb" 61 0 0] (result = { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })} 
       in _f) in (
        ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content } in (
         ()))
         in () end ;
        (let temp___539 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : Operations__operandstack__stack.stack
        ensures {[#"main.adb" 61 0 0] (result = { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content })} 
        in _f) in (
         ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content } in (
          ()))
          in () end ;
         (let temp___538 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : Variablestore__variable.variable
         ensures {[#"main.adb" 61 0 0] (result = { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content })} 
         in _f) in (
          ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = Main__number.number.int__content in (
           ()))
           in () end ;
          (let temp___537 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : int
          ensures {[#"main.adb" 61 0 0] (result = Main__number.number.int__content)} 
          in _f) in (
           ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content in (
            ()))
            in () end ;
           (let temp___536 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : Array__Int__Standard__character.map
           ensures {[#"main.adb" 61 0 0] (result = Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content)} 
           in _f) in (
            ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = Main__db.db.Variablestore__database.database__content in (
             ()))
             in () end ;
            (let temp___535 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : Variablestore__database.database
            ensures {[#"main.adb" 61 0 0] (result = Main__db.db.Variablestore__database.database__content)} 
            in _f) in (
             ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } in (
              ()))
              in () end ;
             (let temp___534 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : Main__lines__mystring.mystring
             ensures {[#"main.adb" 61 0 0] (result = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content })} 
             in _f) in (
              ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = Main__enter_pin.enter_pin.int__content in (
               ()))
               in () end ;
              (let temp___533 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 61 0 0] (val _f : int
              ensures {[#"main.adb" 61 0 0] (result = Main__enter_pin.enter_pin.int__content)} 
              in _f) in (
               ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:61 *)
               ;
               () (* While loop translating the Ada loop from main.adb:61 *)
               ;
               [#"main.adb" 61 0 0] while True do
                ( () (* Assume implicit invariants from the loop main.adb:61 *)
                ;
                [#"main.adb" 61 0 0] assume { [#"main.adb" 61 0 0] ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( true /\ (Pin__pin___axiom.dynamic_invariant Main__enter_pin.enter_pin.int__content True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\true ) /\ (Variablestore__database___axiom.dynamic_invariant Main__db.db.Variablestore__database.database__content False True True True) )/\true ) /\ (Main__Tenter_pin_strS___axiom.dynamic_invariant Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content True True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Main__number.number.int__content True True True True) )/\true ) /\ (Variablestore__variable___axiom.dynamic_invariant { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content } True True True True) )/\true ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content } False True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ (Pin__pin___axiom.dynamic_invariant Main__master_pin.master_pin.int__content False True True True) )/\true ) /\ true )/\true ) };
                () (* Check for absence of RTE in the invariant of loop main.adb:61 *)
                ;
                () (* Loop statements appearing after the loop invariant of loop main.adb:61 *)
                ;
                ();
                ( [@GP_Sloc:main.adb:64:27] ([#"main.adb" 64 0 0] ( () (* Translation of an Ada loop from main.adb:64 *)
                ;
                (if (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((1 : int))))))) then (
                 [#"main.adb" 64 0 0] try
                  [#"main.adb" 64 0 0] try
                   ( [#"main.adb" 64 0 0] begin ensures {true} let _ = (let _ = Main__islocked.islocked.bool__content in (
                    ()))
                    in () end ;
                   (let temp___484 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 64 0 0] (val _f : bool
                   ensures {[#"main.adb" 64 0 0] (result = Main__islocked.islocked.bool__content)} 
                   in _f) in (
                    ( [#"main.adb" 64 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } in (
                     ()))
                     in () end ;
                    (let temp___483 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 64 0 0] (val _f : Main__lines__mystring.mystring
                    ensures {[#"main.adb" 64 0 0] (result = { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })} 
                    in _f) in (
                     ( [#"main.adb" 64 0 0] begin ensures {true} let _ = (let _ = Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content in (
                      ()))
                      in () end ;
                     (let temp___482 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 64 0 0] (val _f : Array__Int__Standard__character.map
                     ensures {[#"main.adb" 64 0 0] (result = Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content)} 
                     in _f) in (
                      ( [#"main.adb" 64 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } in (
                       ()))
                       in () end ;
                      (let temp___481 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 64 0 0] (val _f : Main__lines__mystring.mystring
                      ensures {[#"main.adb" 64 0 0] (result = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content })} 
                      in _f) in (
                       ( [#"main.adb" 64 0 0] begin ensures {true} let _ = (let _ = Main__enter_pin.enter_pin.int__content in (
                        ()))
                        in () end ;
                       (let temp___480 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 64 0 0] (val _f : int
                       ensures {[#"main.adb" 64 0 0] (result = Main__enter_pin.enter_pin.int__content)} 
                       in _f) in (
                        ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:64 *)
                        ;
                        () (* While loop translating the Ada loop from main.adb:64 *)
                        ;
                        [#"main.adb" 64 0 0] while True do
                         ( () (* Assume implicit invariants from the loop main.adb:64 *)
                         ;
                         [#"main.adb" 64 0 0] assume { [#"main.adb" 64 0 0] (Boolean.andb(( ( ( ( ( ( ( ( ( ( true /\ (Pin__pin___axiom.dynamic_invariant Main__enter_pin.enter_pin.int__content True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\true ) /\ (Main__Tenter_pin_strS___axiom.dynamic_invariant Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ true )/\true )) (( (Main__islocked.islocked.bool__content = True) <-> true ))) };
                         () (* Check for absence of RTE in the invariant of loop main.adb:64 *)
                         ;
                         () (* Loop statements appearing after the loop invariant of loop main.adb:64 *)
                         ;
                         ();
                         ( [@GP_Sloc:main.adb:65:10] ([#"main.adb" 65 0 0] ()) );
                         ( [@GP_Sloc:main.adb:65:10] ([#"main.adb" 65 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_457.temp___String_Literal_457(()))) ((1 : int)) ((10 : int))))) )) );
                         ( [@GP_Sloc:main.adb:66:25] ([#"main.adb" 66 0 0] ()) );
                         ( [@GP_Sloc:main.adb:66:15] ([#"main.adb" 66 0 0] ()) );
                         ( [@GP_Sloc:main.adb:66:15] ([#"main.adb" 66 0 0] ( (Main__lines__get_line___axiom.get_line(Main__p.p__split_fields)) )) );
                         ( [@GP_Sloc:main.adb:68:13] ([#"main.adb" 68 0 0] ([#"main.adb" 68 0 0] ())) );
                         ( [@GP_Sloc:main.adb:68:13] ([#"main.adb" 68 0 0] ([#"main.adb" 68 0 0] ( [#"main.adb" 68 0 0] (Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Main__B_3__t__aggregate_def.main__B_3__t__aggregate_def({ Mystringtokeniser__tokenextent.__split_fields = { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start = ( 1 : Standard__positive.positive ); Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length = ( 0 : Standard__natural.natural ) } })) ));
                         [#"main.adb" 68 0 0] assume { [#"main.adb" 68 0 0] (Main__B_3__TtS___axiom.dynamic_invariant Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content True False True True) } ))) );
                         ( [@GP_Sloc:main.adb:69:13] ([#"main.adb" 69 0 0] ([#"main.adb" 69 0 0] ( [#"main.adb" 69 0 0] assume { [#"main.adb" 69 0 0] (Standard__natural___axiom.default_initial_assumption Main__B_3__numtokens.numtokens.int__content False) };
                         [#"main.adb" 69 0 0] assume { [#"main.adb" 69 0 0] (Standard__natural___axiom.dynamic_invariant Main__B_3__numtokens.numtokens.int__content False False True True) } ))) );
                         ( [@GP_Sloc:main.adb:79:16] ([#"main.adb" 79 0 0] ()) );
                         ( [@GP_Sloc:main.adb:78:35] ([#"main.adb" 78 0 0] ()) );
                         ( [@GP_Sloc:main.adb:71:56] ([#"main.adb" 71 0 0] ()) );
                         ( [@GP_Sloc:main.adb:71:45] ([#"main.adb" 71 0 0] ()) );
                         ( [@GP_Sloc:main.adb:71:59] ([#"main.adb" 71 0 0] ()) );
                         ( [@GP_Sloc:main.adb:71:61] ([#"main.adb" 71 0 0] ()) );
                         ( [@GP_Sloc:main.adb:71:30] ([#"main.adb" 71 0 0] ()) );
                         ( [@GP_Sloc:main.adb:71:30] ([#"main.adb" 71 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
                          [#"main.adb" 71 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
                           ( ([#"main.adb" 71 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:            MyStringTokeniser.Tokenise(Lines.To_String(P),T,NumTokens);                              ^ main.adb:71:30:VC_PRECONDITION] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__call_tokenise] [@GP_Id:4] [@GP_Sloc:main.adb:71:30] (Mystringtokeniser__tokenise___axiom.tokenise((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__B_3__TTtSP1.first))) ((Standard__integer__rep.of_rep(Main__B_3__TTtSP1.last))) (Main__B_3__numtokens.numtokens)) ));
                            (Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___461 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__B_3__TTtSP1.first) (Main__B_3__TTtSP1.last)) in (
                            (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___461) (Mystringtokeniser__tokenarray.first temp___461) Main__B_3__TTtSP1.first)))
                            )) )))
                         ) );
                         ( [@GP_Sloc:main.adb:73:16] ([#"main.adb" 73 0 0] ()) );
                         ( [@GP_Sloc:main.adb:73:13] ([#"main.adb" 73 0 0] (if (( ([#"main.adb" 73 0 0] [#"main.adb" 73 0 0] (([@branch_id=2620] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content > (2 : int)) )));
                         ( [@branch_id=2620] Main.spark__branch ).bool__content )) then (
                           raise Temp___exception_463) else (
                          ()))) );
                         ( [@GP_Sloc:main.adb:78:25] ([#"main.adb" 78 0 0] ()) );
                         ( [@GP_Sloc:main.adb:78:25] ([#"main.adb" 78 0 0] ([#"main.adb" 78 0 0] ( (let main__B_3__L_4__R29b__assume = Main__B_3__numtokens.numtokens.int__content in (
                          [#"main.adb" 78 0 0] assume { [#"main.adb" 78 0 0] (main__B_3__L_4__R29b__assume = Main__B_3__L_4__R29b.r29b) }))
                         ;
                         [#"main.adb" 78 0 0] assume { [#"main.adb" 78 0 0] (Standard__natural___axiom.dynamic_invariant Main__B_3__L_4__R29b.r29b True False True True) } ))) );
                         ( [@GP_Sloc:main.adb:78:35] ([#"main.adb" 78 0 0] (let temp___464 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
                         (let temp___465 [@mlw:proxy_symbol] [@introduced] = Main__B_3__L_4__R29b.r29b in (
                          ( [#"main.adb" 78 0 0] (Main__B_3__L_4__i.i.int__content <- ( temp___464 ));
                          () (* Translation of an Ada loop from main.adb:78 *)
                          ;
                          (if ((Boolean.andb((temp___464 <= Main__B_3__L_4__i.i.int__content)) ((Main__B_3__L_4__i.i.int__content <= temp___465)))) then (
                           [#"main.adb" 78 0 0] try
                            [#"main.adb" 78 0 0] try
                             ( [#"main.adb" 78 0 0] begin ensures {true} let _ = (let _ = Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content in (
                              ()))
                              in () end ;
                             (let temp___473 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 78 0 0] (val _f : Array__Int__Standard__character.map
                             ensures {[#"main.adb" 78 0 0] (result = Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content)} 
                             in _f) in (
                              ( [#"main.adb" 78 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } in (
                               ()))
                               in () end ;
                              (let temp___472 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 78 0 0] (val _f : Main__lines__mystring.mystring
                              ensures {[#"main.adb" 78 0 0] (result = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content })} 
                              in _f) in (
                               ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:78 *)
                               ;
                               () (* While loop translating the Ada loop from main.adb:78 *)
                               ;
                               [#"main.adb" 78 0 0] while True do
                                ( () (* Assume implicit invariants from the loop main.adb:78 *)
                                ;
                                [#"main.adb" 78 0 0] assume { [#"main.adb" 78 0 0] (Boolean.andb(( ( ( ( true /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\true ) /\ (Main__Tenter_pin_strS___axiom.dynamic_invariant Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content True True True True) )/\true )) (( ((1 : int) <= Main__B_3__L_4__i.i.int__content) /\ (Main__B_3__L_4__i.i.int__content <= Main__B_3__L_4__R29b.r29b) ))) };
                                () (* Check for absence of RTE in the invariant of loop main.adb:78 *)
                                ;
                                () (* Loop statements appearing after the loop invariant of loop main.adb:78 *)
                                ;
                                ();
                                ( [@GP_Sloc:main.adb:80:70] ([#"main.adb" 80 0 0] ()) );
                                ( [@GP_Sloc:main.adb:80:59] ([#"main.adb" 80 0 0] ()) );
                                ( [@GP_Sloc:main.adb:80:43] ([#"main.adb" 80 0 0] ()) );
                                ( [@GP_Sloc:main.adb:80:19] ([#"main.adb" 80 0 0] ([#"main.adb" 80 0 0] ( (let main__B_3__B_5__tokstr__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 80 0 0] ( [@GP_Id:10] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__tokstr_decl__call_to_string__call_substring] [@vc:annotation] [@GP_Sloc:main.adb:80:59] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                           ^ main.adb:80:59:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (( [#"main.adb" 80 0 0] assert { [#"main.adb" 80 0 0] ([#"main.adb" 80 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__tokstr_decl__call_to_string__call_substring__selectcomp__ixdcomp] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                          ^ main.adb:80:74:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:80:74] [@GP_Id:5] ( (Main__B_3__TTtSP1.first <= Main__B_3__L_4__i.i.int__content) /\ (Main__B_3__L_4__i.i.int__content <= Main__B_3__TTtSP1.last) ) )) };
                                Main__B_3__L_4__i.i.int__content ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 80 0 0] ( [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                         ^ main.adb:80:105:VC_RANGE_CHECK] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__tokstr_decl__call_to_string__call_substring__sub] [@GP_Sloc:main.adb:80:105] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:9] (Standard__positive.range_check_((([#"main.adb" 80 0 0] ( [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                             ^ main.adb:80:93:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:80:93] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__tokstr_decl__call_to_string__call_substring__sub__add] [@GP_Id:8] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (( [#"main.adb" 80 0 0] assert { [#"main.adb" 80 0 0] ([#"main.adb" 80 0 0] ( [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                     ^ main.adb:80:85:VC_INDEX_CHECK] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp] [@vc:annotation] [@GP_Sloc:main.adb:80:85] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:6] ( (Main__B_3__TTtSP1.first <= Main__B_3__L_4__i.i.int__content) /\ (Main__B_3__L_4__i.i.int__content <= Main__B_3__TTtSP1.last) ) )) };
                                Main__B_3__L_4__i.i.int__content ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((  assert {  ([#"main.adb" 80 0 0] ( [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                ^ main.adb:80:96:VC_INDEX_CHECK] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp] [@GP_Sloc:main.adb:80:96] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:7] ( (Main__B_3__TTtSP1.first <= Main__B_3__L_4__i.i.int__content) /\ (Main__B_3__L_4__i.i.int__content <= Main__B_3__TTtSP1.last) ) )) };
                                Main__B_3__L_4__i.i.int__content ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                                 (  (Main__B_3__B_5__tokstr.tokstr.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_5__tokstr__assume)) ));
                                  assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__first)) = (Standard__string.first(main__B_3__B_5__tokstr__assume))) };
                                  assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__last)) = (Standard__string.last(main__B_3__B_5__tokstr__assume))) } )))
                                ;
                                 assume {  (if (False) then (
                                 true) else (
                                 (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__first) (Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__last)))) } ))) );
                                ( [@GP_Sloc:main.adb:82:19] ([#"main.adb" 82 0 0] (if (( ([#"main.adb" 82 0 0] [#"main.adb" 82 0 0] (([@branch_id=2683] Main.spark__branch).bool__content <- ( (Main__B_3__L_4__i.i.int__content = (1 : int)) )));
                                ( [@branch_id=2683] Main.spark__branch ).bool__content )) then (
                                 ( ();
                                 ( [@GP_Sloc:main.adb:84:22] ([#"main.adb" 84 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:84:51] ([#"main.adb" 84 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:84:38] ([#"main.adb" 84 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:84:30] ([#"main.adb" 84 0 0] (let temp___467 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 84 0 0] ( [@GP_Id:11] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__if__command_assign__call_from_string] [@vc:annotation] [@comment:                     COMMAND := Lines.From_String(TokStr);                                      ^ main.adb:84:38:VC_PRECONDITION] [@GP_Sloc:main.adb:84:38] (Main__lines__from_string___axiom.from_string((Standard__string.of_array(Main__B_3__B_5__tokstr.tokstr.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__last)))))) )) in (
                                   (Main__command.command__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___467.Main__lines__mystring.__split_fields ))))
                                 ) ) )) else (
                                 ()))) );
                                ( [@GP_Sloc:main.adb:86:19] ([#"main.adb" 86 0 0] (if (( ([#"main.adb" 86 0 0] [#"main.adb" 86 0 0] (([@branch_id=2694] Main.spark__branch).bool__content <- ( (Main__B_3__L_4__i.i.int__content = (2 : int)) )));
                                ( [@branch_id=2694] Main.spark__branch ).bool__content )) then (
                                 ( ();
                                 ( [@GP_Sloc:main.adb:88:25] ([#"main.adb" 88 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:88:22] ([#"main.adb" 88 0 0] (if (( ([#"main.adb" 88 0 0] [#"main.adb" 88 0 0] (([@branch_id=2698] Main.spark__branch).bool__content <- ( (Boolean.andb((( [#"main.adb" 88 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_5__tokstr.tokstr.Array__Int__Standard__character.map__content in (
                                  ()))
                                  in () end ;
                                 (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__last)))) ) = (4 : int))) (( (let temp___470 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 88 0 0] (val _f : int
                                 in _f) in (
                                  (if ((Boolean.andb(((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__first)) <= temp___470)) ((temp___470 <= (Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__last)))))) then (
                                   [#"main.adb" 88 0 0] begin ensures {true} let _ = (let _ = (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_5__tokstr.tokstr.Array__Int__Standard__character.map__content temp___470)) in (
                                    (Boolean.andb((i >= (48 : int))) ((i <= (57 : int))))))
                                    in (
                                    ()))
                                    in () end ))))
                                 ;
                                 [#"main.adb" 88 0 0] (val _f : bool
                                 ensures {[#"main.adb" 88 0 0] ( (result = True) <-> (forall temp___471 [#"main.adb" 88 0 0]  [@name:I] [@model_trace:2706'Index]  : int.
                                  ( ( ((Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__first) <= temp___471) /\ (temp___471 <= (Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__last)) ) -> (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_5__tokstr.tokstr.Array__Int__Standard__character.map__content temp___471)) in (
                                   ( (i >= (48 : int)) /\ (i <= (57 : int)) )))
                                   )) )} 
                                 in _f) ))) )));
                                 ( [@branch_id=2698] Main.spark__branch ).bool__content )) then (
                                  ( ();
                                  ( [@GP_Sloc:main.adb:91:25] ([#"main.adb" 91 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:91:42] ([#"main.adb" 91 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:91:39] ([#"main.adb" 91 0 0] [#"main.adb" 91 0 0] (Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content <- ( ( [#"main.adb" 91 0 0] assert { [#"main.adb" 91 0 0] ([#"main.adb" 91 0 0] ( [@GP_Id:12] [@GP_Shape:L_1_while__L_2_while__B_3_declblk__L_4_while__B_5_declblk__if__if__enter_pin_str_assign] [@vc:annotation] [@comment:                        ENTER_PIN_STR := TokStr;                                          ^ main.adb:91:42:VC_LENGTH_CHECK] [@GP_Sloc:main.adb:91:42] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__first) <= (Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__last))) then (
                                   ( (Main__TTenter_pin_strSP1.first <= Main__TTenter_pin_strSP1.last) /\ (((Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__last) - (Standard__integer__rep.to_rep Main__B_3__B_5__tokstr.tokstr__first)) = (Main__TTenter_pin_strSP1.last - Main__TTenter_pin_strSP1.first)) )) else (
                                   (Main__TTenter_pin_strSP1.last < Main__TTenter_pin_strSP1.first))) ) )) };
                                  (Array__Int__Standard__character.slide(Main__B_3__B_5__tokstr.tokstr.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_5__tokstr.tokstr__first))) (Main__TTenter_pin_strSP1.first)) ) ))) ) )) else (
                                   raise Temp___exception_469))) ) )) else (
                                 ()))) );
                                () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:78 *)
                                ;
                                (if ((Main__B_3__L_4__i.i.int__content = temp___465)) then (
                                  raise Main__B_3__L_4.L_4));
                                ([#"main.adb" 78 0 0] [#"main.adb" 78 0 0] (Main__B_3__L_4__i.i.int__content <- ( (Main__B_3__L_4__i.i.int__content + (1 : int)) ))) )
                               done )))
                               )))
                              )
                            with
                             Temp___exception_469 -> ( ();
                             ( [@GP_Sloc:main.adb:93:25] ([#"main.adb" 93 0 0] ()) );
                             ( [@GP_Sloc:main.adb:93:25] ([#"main.adb" 93 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_468.temp___String_Literal_468(()))) ((1 : int)) ((64 : int))))) )) );
                             ( [@GP_Sloc:main.adb:94:25] ([#"main.adb" 94 0 0] [#"main.adb" 94 0 0] raise Return__exc) ) )
                            end
                           with
                            Main__B_3__L_4.L_4 -> ()
                           end)) )))
                         ))
                         ) );
                         ( [@GP_Sloc:main.adb:102:66] ([#"main.adb" 102 0 0] ()) );
                         ( [@GP_Sloc:main.adb:102:25] ([#"main.adb" 102 0 0] ()) );
                         ( [@GP_Sloc:main.adb:102:38] ([#"main.adb" 102 0 0] ()) );
                         ( [@GP_Sloc:main.adb:102:18] ([#"main.adb" 102 0 0] ()) );
                         ( [@GP_Sloc:main.adb:102:10] ([#"main.adb" 102 0 0] (if (( ([#"main.adb" 102 0 0] [#"main.adb" 102 0 0] (([@branch_id=2732] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 102 0 0] ( [@GP_Shape:L_1_while__L_2_while__if__and__and__call_equal__call_from_string] [@GP_Reason:VC_PRECONDITION] [@GP_Id:14] [@vc:annotation] [@GP_Sloc:main.adb:102:38] [@comment:         if Lines.Equal(COMMAND,Lines.From_String("unlock")) and IsLocked and                                       ^ main.adb:102:38:VC_PRECONDITION] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_477.temp___String_Literal_477(()))) ((1 : int)) ((6 : int))))) ))))) (Main__islocked.islocked.bool__content))) (( (let temp___478 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
                         in _f) in (
                          (if ((Boolean.andb((Main__TTenter_pin_strSP1.first <= temp___478)) ((temp___478 <= Main__TTenter_pin_strSP1.last)))) then (
                            begin ensures {true} let _ = (let _ = (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content temp___478)) in (
                            (Boolean.andb((i >= (48 : int))) ((i <= (57 : int))))))
                            in (
                            ()))
                            in () end ))))
                         ;
                          (val _f : bool
                         ensures { ( (result = True) <-> (forall temp___479   [@model_trace:2747'Index] [@name:I]  : int.
                          ( ( (Main__TTenter_pin_strSP1.first <= temp___479) /\ (temp___479 <= Main__TTenter_pin_strSP1.last) ) -> (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content temp___479)) in (
                           ( (i >= (48 : int)) /\ (i <= (57 : int)) )))
                           )) )} 
                         in _f) ))) )));
                         ( [@branch_id=2732] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:104:13] ([#"main.adb" 104 0 0] ()) );
                          ( [@GP_Sloc:main.adb:104:42] ([#"main.adb" 104 0 0] ()) );
                          ( [@GP_Sloc:main.adb:104:29] ([#"main.adb" 104 0 0] ()) );
                          ( [@GP_Sloc:main.adb:104:23] ([#"main.adb" 104 0 0] [#"main.adb" 104 0 0] (Main__enter_pin.enter_pin.int__content <- ( ([#"main.adb" 104 0 0] ( [@GP_Id:13] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_while__L_2_while__if__enter_pin_assign__call_from_string] [@GP_Sloc:main.adb:104:29] [@comment:            ENTER_PIN := PIN.From_String(ENTER_PIN_STR);                             ^ main.adb:104:29:VC_PRECONDITION] (Pin__from_string___axiom.from_string((Standard__string.of_array(Main__enter_pin_str.enter_pin_str.Array__Int__Standard__character.map__content) (Main__TTenter_pin_strSP1.first) (Main__TTenter_pin_strSP1.last)))) )) ))) );
                          ( [@GP_Sloc:main.adb:106:13] ([#"main.adb" 106 0 0] (if (( ([#"main.adb" 106 0 0] [#"main.adb" 106 0 0] (([@branch_id=2771] Main.spark__branch).bool__content <- ( (Main__master_pin.master_pin.int__content = Main__enter_pin.enter_pin.int__content) )));
                          ( [@branch_id=2771] Main.spark__branch ).bool__content )) then (
                           ( ();
                           ( [@GP_Sloc:main.adb:107:16] ([#"main.adb" 107 0 0] ()) );
                           ( [@GP_Sloc:main.adb:107:25] ([#"main.adb" 107 0 0] [#"main.adb" 107 0 0] (Main__islocked.islocked.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
                            raise Temp___exception_475))) ) )) else (
                          ( ();
                          ( [@GP_Sloc:main.adb:113:13] ([#"main.adb" 113 0 0] ()) );
                          ( [@GP_Sloc:main.adb:113:13] ([#"main.adb" 113 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_476.temp___String_Literal_476(()))) ((1 : int)) ((58 : int))))) )) ) )))) );
                         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:64 *)
                         ;
                         (if (not ( ((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) )) then (
                           raise Main__L_2.L_2)) )
                        done )))
                        )))
                       )))
                      )))
                     )))
                    )
                  with
                   Temp___exception_475 -> ( ();
                   ( [@GP_Sloc:main.adb:109:16] ([#"main.adb" 109 0 0] ()) );
                   ( [@GP_Sloc:main.adb:109:16] ([#"main.adb" 109 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_474.temp___String_Literal_474(()))) ((1 : int)) ((23 : int))))) )) );
                   ( [@GP_Sloc:main.adb:110:16] ([#"main.adb" 110 0 0] [#"main.adb" 110 0 0] raise Return__exc) ) )| 
                   Temp___exception_463 -> ( ();
                   ( [@GP_Sloc:main.adb:74:16] ([#"main.adb" 74 0 0] ()) );
                   ( [@GP_Sloc:main.adb:74:16] ([#"main.adb" 74 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_462.temp___String_Literal_462(()))) ((1 : int)) ((36 : int))))) )) );
                   ( [@GP_Sloc:main.adb:75:16] ([#"main.adb" 75 0 0] [#"main.adb" 75 0 0] raise Return__exc) ) )
                  end
                 with
                  Main__L_2.L_2 -> ()
                 end)) )) );
                ( [@GP_Sloc:main.adb:118:30] ([#"main.adb" 118 0 0] ( () (* Translation of an Ada loop from main.adb:118 *)
                ;
                (if (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int))))))) then (
                 [#"main.adb" 118 0 0] try
                  [#"main.adb" 118 0 0] try
                   ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = Main__islocked.islocked.bool__content in (
                    ()))
                    in () end ;
                   (let temp___532 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : bool
                   ensures {[#"main.adb" 118 0 0] (result = Main__islocked.islocked.bool__content)} 
                   in _f) in (
                    ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = Main__master_pin.master_pin.int__content in (
                     ()))
                     in () end ;
                    (let temp___531 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : int
                    ensures {[#"main.adb" 118 0 0] (result = Main__master_pin.master_pin.int__content)} 
                    in _f) in (
                     ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } in (
                      ()))
                      in () end ;
                     (let temp___530 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : Main__lines__mystring.mystring
                     ensures {[#"main.adb" 118 0 0] (result = { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content })} 
                     in _f) in (
                      ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content } in (
                       ()))
                       in () end ;
                      (let temp___529 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : Operations__operandstack__stack.stack
                      ensures {[#"main.adb" 118 0 0] (result = { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content })} 
                      in _f) in (
                       ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content } in (
                        ()))
                        in () end ;
                       (let temp___528 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : Variablestore__variable.variable
                       ensures {[#"main.adb" 118 0 0] (result = { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content })} 
                       in _f) in (
                        ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = Main__number.number.int__content in (
                         ()))
                         in () end ;
                        (let temp___527 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : int
                        ensures {[#"main.adb" 118 0 0] (result = Main__number.number.int__content)} 
                        in _f) in (
                         ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = Main__db.db.Variablestore__database.database__content in (
                          ()))
                          in () end ;
                         (let temp___526 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : Variablestore__database.database
                         ensures {[#"main.adb" 118 0 0] (result = Main__db.db.Variablestore__database.database__content)} 
                         in _f) in (
                          ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } in (
                           ()))
                           in () end ;
                          (let temp___525 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : Main__lines__mystring.mystring
                          ensures {[#"main.adb" 118 0 0] (result = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content })} 
                          in _f) in (
                           ( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = Main__enter_pin.enter_pin.int__content in (
                            ()))
                            in () end ;
                           (let temp___524 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 118 0 0] (val _f : int
                           ensures {[#"main.adb" 118 0 0] (result = Main__enter_pin.enter_pin.int__content)} 
                           in _f) in (
                            ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:118 *)
                            ;
                            () (* While loop translating the Ada loop from main.adb:118 *)
                            ;
                            [#"main.adb" 118 0 0] while True do
                             ( () (* Assume implicit invariants from the loop main.adb:118 *)
                             ;
                             [#"main.adb" 118 0 0] assume { [#"main.adb" 118 0 0] (Boolean.andb(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( true /\ (Pin__pin___axiom.dynamic_invariant Main__enter_pin.enter_pin.int__content True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\true ) /\ (Variablestore__database___axiom.dynamic_invariant Main__db.db.Variablestore__database.database__content False True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Main__number.number.int__content True True True True) )/\true ) /\ (Variablestore__variable___axiom.dynamic_invariant { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content } True True True True) )/\true ) /\ (Operations__operandstack__stack___axiom.dynamic_invariant { Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content } False True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ (Pin__pin___axiom.dynamic_invariant Main__master_pin.master_pin.int__content False True True True) )/\true ) /\ true )/\true )) (( (Main__islocked.islocked.bool__content = True) <-> false ))) };
                             () (* Check for absence of RTE in the invariant of loop main.adb:118 *)
                             ;
                             () (* Loop statements appearing after the loop invariant of loop main.adb:118 *)
                             ;
                             ();
                             ( [@GP_Sloc:main.adb:122:10] ([#"main.adb" 122 0 0] ()) );
                             ( [@GP_Sloc:main.adb:122:10] ([#"main.adb" 122 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_485.temp___String_Literal_485(()))) ((1 : int)) ((10 : int))))) )) );
                             ( [@GP_Sloc:main.adb:123:25] ([#"main.adb" 123 0 0] ()) );
                             ( [@GP_Sloc:main.adb:123:15] ([#"main.adb" 123 0 0] ()) );
                             ( [@GP_Sloc:main.adb:123:15] ([#"main.adb" 123 0 0] ( (Main__lines__get_line___axiom.get_line(Main__p.p__split_fields)) )) );
                             ( [@GP_Sloc:main.adb:125:13] ([#"main.adb" 125 0 0] ([#"main.adb" 125 0 0] ())) );
                             ( [@GP_Sloc:main.adb:125:13] ([#"main.adb" 125 0 0] ([#"main.adb" 125 0 0] ( [#"main.adb" 125 0 0] (Main__B_7__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Main__B_7__t__aggregate_def.main__B_7__t__aggregate_def({ Mystringtokeniser__tokenextent.__split_fields = { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start = ( 1 : Standard__positive.positive ); Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length = ( 0 : Standard__natural.natural ) } })) ));
                             [#"main.adb" 125 0 0] assume { [#"main.adb" 125 0 0] (Main__B_7__TtS___axiom.dynamic_invariant Main__B_7__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content True False True True) } ))) );
                             ( [@GP_Sloc:main.adb:126:13] ([#"main.adb" 126 0 0] ([#"main.adb" 126 0 0] ( [#"main.adb" 126 0 0] assume { [#"main.adb" 126 0 0] (Standard__natural___axiom.default_initial_assumption Main__B_7__numtokens.numtokens.int__content False) };
                             [#"main.adb" 126 0 0] assume { [#"main.adb" 126 0 0] (Standard__natural___axiom.dynamic_invariant Main__B_7__numtokens.numtokens.int__content False False True True) } ))) );
                             ( [@GP_Sloc:main.adb:138:16] ([#"main.adb" 138 0 0] ()) );
                             ( [@GP_Sloc:main.adb:137:35] ([#"main.adb" 137 0 0] ()) );
                             ( [@GP_Sloc:main.adb:129:56] ([#"main.adb" 129 0 0] ()) );
                             ( [@GP_Sloc:main.adb:129:45] ([#"main.adb" 129 0 0] ()) );
                             ( [@GP_Sloc:main.adb:129:59] ([#"main.adb" 129 0 0] ()) );
                             ( [@GP_Sloc:main.adb:129:61] ([#"main.adb" 129 0 0] ()) );
                             ( [@GP_Sloc:main.adb:129:30] ([#"main.adb" 129 0 0] ()) );
                             ( [@GP_Sloc:main.adb:129:30] ([#"main.adb" 129 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__B_7__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
                              [#"main.adb" 129 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
                               ( ([#"main.adb" 129 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:15] [@comment:            MyStringTokeniser.Tokenise(Lines.To_String(P),T,NumTokens);                              ^ main.adb:129:30:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:129:30] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__call_tokenise] (Mystringtokeniser__tokenise___axiom.tokenise((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__B_7__TTtSP1.first))) ((Standard__integer__rep.of_rep(Main__B_7__TTtSP1.last))) (Main__B_7__numtokens.numtokens)) ));
                                (Main__B_7__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___489 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__B_7__TTtSP1.first) (Main__B_7__TTtSP1.last)) in (
                                (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___489) (Mystringtokeniser__tokenarray.first temp___489) Main__B_7__TTtSP1.first)))
                                )) )))
                             ) );
                             ( [@GP_Sloc:main.adb:131:16] ([#"main.adb" 131 0 0] ()) );
                             ( [@GP_Sloc:main.adb:131:13] ([#"main.adb" 131 0 0] (if (( ([#"main.adb" 131 0 0] [#"main.adb" 131 0 0] (([@branch_id=2853] Main.spark__branch).bool__content <- ( (Main__B_7__numtokens.numtokens.int__content > (2 : int)) )));
                             ( [@branch_id=2853] Main.spark__branch ).bool__content )) then (
                               raise Temp___exception_491) else (
                              ()))) );
                             ( [@GP_Sloc:main.adb:137:25] ([#"main.adb" 137 0 0] ()) );
                             ( [@GP_Sloc:main.adb:137:25] ([#"main.adb" 137 0 0] ([#"main.adb" 137 0 0] ( (let main__B_7__L_8__R44b__assume = Main__B_7__numtokens.numtokens.int__content in (
                              [#"main.adb" 137 0 0] assume { [#"main.adb" 137 0 0] (main__B_7__L_8__R44b__assume = Main__B_7__L_8__R44b.r44b) }))
                             ;
                             [#"main.adb" 137 0 0] assume { [#"main.adb" 137 0 0] (Standard__natural___axiom.dynamic_invariant Main__B_7__L_8__R44b.r44b True False True True) } ))) );
                             ( [@GP_Sloc:main.adb:137:35] ([#"main.adb" 137 0 0] (let temp___492 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
                             (let temp___493 [@mlw:proxy_symbol] [@introduced] = Main__B_7__L_8__R44b.r44b in (
                              ( [#"main.adb" 137 0 0] (Main__B_7__L_8__i.i.int__content <- ( temp___492 ));
                              () (* Translation of an Ada loop from main.adb:137 *)
                              ;
                              (if ((Boolean.andb((temp___492 <= Main__B_7__L_8__i.i.int__content)) ((Main__B_7__L_8__i.i.int__content <= temp___493)))) then (
                               [#"main.adb" 137 0 0] try
                                [#"main.adb" 137 0 0] try
                                 ( [#"main.adb" 137 0 0] begin ensures {true} let _ = (let _ = { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content } in (
                                  ()))
                                  in () end ;
                                 (let temp___507 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 137 0 0] (val _f : Variablestore__variable.variable
                                 ensures {[#"main.adb" 137 0 0] (result = { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content })} 
                                 in _f) in (
                                  ( [#"main.adb" 137 0 0] begin ensures {true} let _ = (let _ = Main__number.number.int__content in (
                                   ()))
                                   in () end ;
                                  (let temp___506 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 137 0 0] (val _f : int
                                  ensures {[#"main.adb" 137 0 0] (result = Main__number.number.int__content)} 
                                  in _f) in (
                                   ( [#"main.adb" 137 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } in (
                                    ()))
                                    in () end ;
                                   (let temp___505 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 137 0 0] (val _f : Main__lines__mystring.mystring
                                   ensures {[#"main.adb" 137 0 0] (result = { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content })} 
                                   in _f) in (
                                    ( [#"main.adb" 137 0 0] begin ensures {true} let _ = (let _ = Main__enter_pin.enter_pin.int__content in (
                                     ()))
                                     in () end ;
                                    (let temp___504 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 137 0 0] (val _f : int
                                    ensures {[#"main.adb" 137 0 0] (result = Main__enter_pin.enter_pin.int__content)} 
                                    in _f) in (
                                     ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:137 *)
                                     ;
                                     () (* While loop translating the Ada loop from main.adb:137 *)
                                     ;
                                     [#"main.adb" 137 0 0] while True do
                                      ( () (* Assume implicit invariants from the loop main.adb:137 *)
                                      ;
                                      [#"main.adb" 137 0 0] assume { [#"main.adb" 137 0 0] (Boolean.andb(( ( ( ( ( ( ( ( true /\ (Pin__pin___axiom.dynamic_invariant Main__enter_pin.enter_pin.int__content True True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Main__number.number.int__content True True True True) )/\true ) /\ (Variablestore__variable___axiom.dynamic_invariant { Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content } True True True True) )/\true )) (( ((1 : int) <= Main__B_7__L_8__i.i.int__content) /\ (Main__B_7__L_8__i.i.int__content <= Main__B_7__L_8__R44b.r44b) ))) };
                                      () (* Check for absence of RTE in the invariant of loop main.adb:137 *)
                                      ;
                                      () (* Loop statements appearing after the loop invariant of loop main.adb:137 *)
                                      ;
                                      ();
                                      ( [@GP_Sloc:main.adb:139:70] ([#"main.adb" 139 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:139:59] ([#"main.adb" 139 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:139:43] ([#"main.adb" 139 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:139:19] ([#"main.adb" 139 0 0] ([#"main.adb" 139 0 0] ( (let main__B_7__B_9__tokstr__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 139 0 0] ( [@GP_Sloc:main.adb:139:59] [@GP_Reason:VC_PRECONDITION] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                           ^ main.adb:139:59:VC_PRECONDITION] [@vc:annotation] [@GP_Id:21] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__tokstr_decl__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__p.p__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_7__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (( [#"main.adb" 139 0 0] assert { [#"main.adb" 139 0 0] ([#"main.adb" 139 0 0] ( [@GP_Id:16] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__tokstr_decl__call_to_string__call_substring__selectcomp__ixdcomp] [@vc:annotation] [@GP_Sloc:main.adb:139:74] [@GP_Reason:VC_INDEX_CHECK] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                          ^ main.adb:139:74:VC_INDEX_CHECK] ( (Main__B_7__TTtSP1.first <= Main__B_7__L_8__i.i.int__content) /\ (Main__B_7__L_8__i.i.int__content <= Main__B_7__TTtSP1.last) ) )) };
                                      Main__B_7__L_8__i.i.int__content ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 139 0 0] ( [@vc:annotation] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                         ^ main.adb:139:105:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:139:105] [@GP_Id:20] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__tokstr_decl__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 139 0 0] ( [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__tokstr_decl__call_to_string__call_substring__sub__add] [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                             ^ main.adb:139:93:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:139:93] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_7__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (( [#"main.adb" 139 0 0] assert { [#"main.adb" 139 0 0] ([#"main.adb" 139 0 0] ( [@GP_Sloc:main.adb:139:85] [@GP_Id:17] [@vc:annotation] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                     ^ main.adb:139:85:VC_INDEX_CHECK] ( (Main__B_7__TTtSP1.first <= Main__B_7__L_8__i.i.int__content) /\ (Main__B_7__L_8__i.i.int__content <= Main__B_7__TTtSP1.last) ) )) };
                                      Main__B_7__L_8__i.i.int__content ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_7__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((  assert {  ([#"main.adb" 139 0 0] ( [@GP_Id:18] [@vc:annotation] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                ^ main.adb:139:96:VC_INDEX_CHECK] [@GP_Sloc:main.adb:139:96] ( (Main__B_7__TTtSP1.first <= Main__B_7__L_8__i.i.int__content) /\ (Main__B_7__L_8__i.i.int__content <= Main__B_7__TTtSP1.last) ) )) };
                                      Main__B_7__L_8__i.i.int__content ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                                       (  (Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_7__B_9__tokstr__assume)) ));
                                        assume {  ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first)) = (Standard__string.first(main__B_7__B_9__tokstr__assume))) };
                                        assume {  ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)) = (Standard__string.last(main__B_7__B_9__tokstr__assume))) } )))
                                      ;
                                       assume {  (if (False) then (
                                       true) else (
                                       (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_7__B_9__tokstr.tokstr__first) (Standard__integer__rep.to_rep Main__B_7__B_9__tokstr.tokstr__last)))) } ))) );
                                      ( [@GP_Sloc:main.adb:141:19] ([#"main.adb" 141 0 0] (if (( ([#"main.adb" 141 0 0] [#"main.adb" 141 0 0] (([@branch_id=2916] Main.spark__branch).bool__content <- ( (Main__B_7__L_8__i.i.int__content = (1 : int)) )));
                                      ( [@branch_id=2916] Main.spark__branch ).bool__content )) then (
                                       ( ();
                                       ( [@GP_Sloc:main.adb:143:22] ([#"main.adb" 143 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:143:51] ([#"main.adb" 143 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:143:38] ([#"main.adb" 143 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:143:30] ([#"main.adb" 143 0 0] (let temp___495 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 143 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:143:38] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__if__command_assign__call_from_string] [@vc:annotation] [@comment:                     COMMAND := Lines.From_String(TokStr);                                      ^ main.adb:143:38:VC_PRECONDITION] [@GP_Id:22] (Main__lines__from_string___axiom.from_string((Standard__string.of_array(Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)))))) )) in (
                                         (Main__command.command__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___495.Main__lines__mystring.__split_fields ))))
                                       ) ) )) else (
                                       ()))) );
                                      ( [@GP_Sloc:main.adb:145:19] ([#"main.adb" 145 0 0] (if (( ([#"main.adb" 145 0 0] [#"main.adb" 145 0 0] (([@branch_id=2927] Main.spark__branch).bool__content <- ( (Main__B_7__L_8__i.i.int__content = (2 : int)) )));
                                      ( [@branch_id=2927] Main.spark__branch ).bool__content )) then (
                                       ( ();
                                       ( [@GP_Sloc:main.adb:147:22] ([#"main.adb" 147 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:147:60] ([#"main.adb" 147 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:147:47] ([#"main.adb" 147 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:147:29] ([#"main.adb" 147 0 0] [#"main.adb" 147 0 0] (Main__number.number.int__content <- ( (Stringtointeger__from_string___axiom.from_string((Standard__string.of_array(Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)))))) ))) );
                                       ( [@GP_Sloc:main.adb:150:25] ([#"main.adb" 150 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:150:22] ([#"main.adb" 150 0 0] (if (( ([#"main.adb" 150 0 0] [#"main.adb" 150 0 0] (([@branch_id=2938] Main.spark__branch).bool__content <- ( (([#"main.adb" 150 0 0] ( [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__if__if__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:24] [@comment:                     if TokStr'Length <= VariableStore.Max_Variable_Length then                               ^ main.adb:150:31:VC_RANGE_CHECK] [@GP_Sloc:main.adb:150:31] (Standard__integer.range_check_(( [#"main.adb" 150 0 0] begin ensures {true} let _ = (let _ = Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content in (
                                        ()))
                                        in () end ;
                                       (Integer.length((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)))) ))) )) <= (1024 : int)) )));
                                       ( [@branch_id=2938] Main.spark__branch ).bool__content )) then (
                                        ( ();
                                        ( [@GP_Sloc:main.adb:151:25] ([#"main.adb" 151 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:151:58] ([#"main.adb" 151 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:151:45] ([#"main.adb" 151 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:151:29] ([#"main.adb" 151 0 0] (let temp___496 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 151 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:151:45] [@vc:annotation] [@comment:                        VAR := VariableStore.From_String(TokStr);                                             ^ main.adb:151:45:VC_PRECONDITION] [@GP_Id:23] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__if__if__var_assign__call_from_string] (Variablestore__from_string___axiom.from_string((Standard__string.of_array(Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)))))) )) in (
                                          (Main__var.var__split_fields.Variablestore__variable.__split_fields__content <- ( temp___496.Variablestore__variable.__split_fields ))))
                                        ) ) )) else (
                                         raise Temp___exception_498))) );
                                       ( [@GP_Sloc:main.adb:158:37] ([#"main.adb" 158 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:158:50] ([#"main.adb" 158 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:158:30] ([#"main.adb" 158 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:158:22] ([#"main.adb" 158 0 0] (if (( ([#"main.adb" 158 0 0] [#"main.adb" 158 0 0] (([@branch_id=2957] Main.spark__branch).bool__content <- ( (Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 158 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:158:50] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__if__if__call_equal__call_from_string] [@comment:                     if Lines.Equal(COMMAND,Lines.From_String("lock")) then                                                  ^ main.adb:158:50:VC_PRECONDITION] [@GP_Id:26] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_503.temp___String_Literal_503(()))) ((1 : int)) ((4 : int))))) )))) )));
                                       ( [@branch_id=2957] Main.spark__branch ).bool__content )) then (
                                        ( ();
                                        ( [@GP_Sloc:main.adb:159:28] ([#"main.adb" 159 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:159:25] ([#"main.adb" 159 0 0] (if (( ([#"main.adb" 159 0 0] [#"main.adb" 159 0 0] (([@branch_id=2968] Main.spark__branch).bool__content <- ( (Boolean.andb((( [#"main.adb" 159 0 0] begin ensures {true} let _ = (let _ = Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content in (
                                         ()))
                                         in () end ;
                                        (Integer.length((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)))) ) = (4 : int))) (( (let temp___501 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 159 0 0] (val _f : int
                                        in _f) in (
                                         (if ((Boolean.andb(((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first)) <= temp___501)) ((temp___501 <= (Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)))))) then (
                                          [#"main.adb" 159 0 0] begin ensures {true} let _ = (let _ = (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content temp___501)) in (
                                           (Boolean.andb((i >= (48 : int))) ((i <= (57 : int))))))
                                           in (
                                           ()))
                                           in () end ))))
                                        ;
                                        [#"main.adb" 159 0 0] (val _f : bool
                                        ensures {[#"main.adb" 159 0 0] ( (result = True) <-> (forall temp___502 [#"main.adb" 159 0 0]  [@model_trace:2976'Index] [@name:I]  : int.
                                         ( ( ((Standard__integer__rep.to_rep Main__B_7__B_9__tokstr.tokstr__first) <= temp___502) /\ (temp___502 <= (Standard__integer__rep.to_rep Main__B_7__B_9__tokstr.tokstr__last)) ) -> (let i = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content temp___502)) in (
                                          ( (i >= (48 : int)) /\ (i <= (57 : int)) )))
                                          )) )} 
                                        in _f) ))) )));
                                        ( [@branch_id=2968] Main.spark__branch ).bool__content )) then (
                                         ( ();
                                         ( [@GP_Sloc:main.adb:162:28] ([#"main.adb" 162 0 0] ()) );
                                         ( [@GP_Sloc:main.adb:162:57] ([#"main.adb" 162 0 0] ()) );
                                         ( [@GP_Sloc:main.adb:162:44] ([#"main.adb" 162 0 0] ()) );
                                         ( [@GP_Sloc:main.adb:162:38] ([#"main.adb" 162 0 0] [#"main.adb" 162 0 0] (Main__enter_pin.enter_pin.int__content <- ( ([#"main.adb" 162 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                           ENTER_PIN := PIN.From_String(TokStr);                                            ^ main.adb:162:44:VC_PRECONDITION] [@GP_Sloc:main.adb:162:44] [@GP_Shape:L_1_while__L_6_while__B_7_declblk__L_8_while__B_9_declblk__if__if__if__enter_pin_assign__call_from_string] [@GP_Id:25] (Pin__from_string___axiom.from_string((Standard__string.of_array(Main__B_7__B_9__tokstr.tokstr.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__first))) ((Standard__integer__rep.to_rep(Main__B_7__B_9__tokstr.tokstr__last)))))) )) ))) ) )) else (
                                          raise Temp___exception_500))) ) )) else (
                                        ()))) ) )) else (
                                       ()))) );
                                      () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:137 *)
                                      ;
                                      (if ((Main__B_7__L_8__i.i.int__content = temp___493)) then (
                                        raise Main__B_7__L_8.L_8));
                                      ([#"main.adb" 137 0 0] [#"main.adb" 137 0 0] (Main__B_7__L_8__i.i.int__content <- ( (Main__B_7__L_8__i.i.int__content + (1 : int)) ))) )
                                     done )))
                                     )))
                                    )))
                                   )))
                                  )
                                with
                                 Temp___exception_498 -> ( ();
                                 ( [@GP_Sloc:main.adb:153:25] ([#"main.adb" 153 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:153:25] ([#"main.adb" 153 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_497.temp___String_Literal_497(()))) ((1 : int)) ((60 : int))))) )) );
                                 ( [@GP_Sloc:main.adb:154:25] ([#"main.adb" 154 0 0] [#"main.adb" 154 0 0] raise Return__exc) ) )| 
                                 Temp___exception_500 -> ( ();
                                 ( [@GP_Sloc:main.adb:164:28] ([#"main.adb" 164 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:164:28] ([#"main.adb" 164 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_499.temp___String_Literal_499(()))) ((1 : int)) ((64 : int))))) )) );
                                 ( [@GP_Sloc:main.adb:165:28] ([#"main.adb" 165 0 0] [#"main.adb" 165 0 0] raise Return__exc) ) )
                                end
                               with
                                Main__B_7__L_8.L_8 -> ()
                               end)) )))
                             ))
                             ) );
                             ( [@GP_Sloc:main.adb:174:64] ([#"main.adb" 174 0 0] ()) );
                             ( [@GP_Sloc:main.adb:174:25] ([#"main.adb" 174 0 0] ()) );
                             ( [@GP_Sloc:main.adb:174:38] ([#"main.adb" 174 0 0] ()) );
                             ( [@GP_Sloc:main.adb:174:18] ([#"main.adb" 174 0 0] ()) );
                             ( [@GP_Sloc:main.adb:174:10] ([#"main.adb" 174 0 0] (if (( ([#"main.adb" 174 0 0] [#"main.adb" 174 0 0] (([@branch_id=3006] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 174 0 0] ( [@comment:         if Lines.Equal(COMMAND,Lines.From_String("lock")) and IsLocked = False then                                      ^ main.adb:174:38:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@GP_Id:47] [@vc:annotation] [@GP_Sloc:main.adb:174:38] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_523.temp___String_Literal_523(()))) ((1 : int)) ((4 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                             ( [@branch_id=3006] Main.spark__branch ).bool__content )) then (
                              ( ();
                              ( [@GP_Sloc:main.adb:175:13] ([#"main.adb" 175 0 0] ()) );
                              ( [@GP_Sloc:main.adb:175:27] ([#"main.adb" 175 0 0] ()) );
                              ( [@GP_Sloc:main.adb:175:24] ([#"main.adb" 175 0 0] [#"main.adb" 175 0 0] (Main__master_pin.master_pin.int__content <- ( Main__enter_pin.enter_pin.int__content ))) );
                              ( [@GP_Sloc:main.adb:176:13] ([#"main.adb" 176 0 0] ()) );
                              ( [@GP_Sloc:main.adb:176:22] ([#"main.adb" 176 0 0] [#"main.adb" 176 0 0] (Main__islocked.islocked.bool__content <- ( (Boolean.of_int((1 : int))) ))) ) )) else (
                              ( [@GP_Sloc:main.adb:177:10] (if (( ([#"main.adb" 177 0 0] [#"main.adb" 177 0 0] (([@branch_id=3028] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 177 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@GP_Id:46] [@vc:annotation] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("+")) and IsLocked = False then                                         ^ main.adb:177:41:VC_PRECONDITION] [@GP_Sloc:main.adb:177:41] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_522.temp___String_Literal_522(()))) ((1 : int)) ((1 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                              ( [@branch_id=3028] Main.spark__branch ).bool__content )) then (
                               ( ();
                               ( [@GP_Sloc:main.adb:178:34] ([#"main.adb" 178 0 0] ()) );
                               ( [@GP_Sloc:main.adb:178:28] ([#"main.adb" 178 0 0] ()) );
                               ( [@GP_Sloc:main.adb:178:13] ([#"main.adb" 178 0 0] (if (( ([#"main.adb" 178 0 0] [#"main.adb" 178 0 0] (([@branch_id=3042] Main.spark__branch).bool__content <- ( ((Operations__operandstack__size___axiom.size({ Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content })) >= (2 : int)) )));
                               ( [@branch_id=3042] Main.spark__branch ).bool__content )) then (
                                ( ();
                                ( [@GP_Sloc:main.adb:179:32] ([#"main.adb" 179 0 0] ()) );
                                ( [@GP_Sloc:main.adb:179:41] ([#"main.adb" 179 0 0] ()) );
                                ( [@GP_Sloc:main.adb:179:26] ([#"main.adb" 179 0 0] ()) );
                                ( [@GP_Sloc:main.adb:179:26] ([#"main.adb" 179 0 0] ( ([#"main.adb" 179 0 0] ( [@GP_Shape:L_1_while__L_6_while__if__if__call_plus] [@GP_Sloc:main.adb:179:26] [@GP_Reason:VC_PRECONDITION] [@GP_Id:45] [@vc:annotation] [@comment:               Operations.Plus(OpStack, IsLocked);                          ^ main.adb:179:26:VC_PRECONDITION] (Operations__plus___axiom.plus(Main__opstack.opstack__split_fields) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                ( ();
                                ( [@GP_Sloc:main.adb:181:16] ([#"main.adb" 181 0 0] ()) );
                                ( [@GP_Sloc:main.adb:181:16] ([#"main.adb" 181 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_521.temp___String_Literal_521(()))) ((1 : int)) ((65 : int))))) )) ) )))) ) )) else (
                               ( [@GP_Sloc:main.adb:183:10] (if (( ([#"main.adb" 183 0 0] [#"main.adb" 183 0 0] (([@branch_id=3060] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 183 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@GP_Id:44] [@vc:annotation] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("-")) and IsLocked = False then                                         ^ main.adb:183:41:VC_PRECONDITION] [@GP_Sloc:main.adb:183:41] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_520.temp___String_Literal_520(()))) ((1 : int)) ((1 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                               ( [@branch_id=3060] Main.spark__branch ).bool__content )) then (
                                ( ();
                                ( [@GP_Sloc:main.adb:184:34] ([#"main.adb" 184 0 0] ()) );
                                ( [@GP_Sloc:main.adb:184:28] ([#"main.adb" 184 0 0] ()) );
                                ( [@GP_Sloc:main.adb:184:13] ([#"main.adb" 184 0 0] (if (( ([#"main.adb" 184 0 0] [#"main.adb" 184 0 0] (([@branch_id=3074] Main.spark__branch).bool__content <- ( ((Operations__operandstack__size___axiom.size({ Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content })) >= (2 : int)) )));
                                ( [@branch_id=3074] Main.spark__branch ).bool__content )) then (
                                 ( ();
                                 ( [@GP_Sloc:main.adb:185:33] ([#"main.adb" 185 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:185:42] ([#"main.adb" 185 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:185:26] ([#"main.adb" 185 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:185:26] ([#"main.adb" 185 0 0] ( ([#"main.adb" 185 0 0] ( [@comment:               Operations.Minus(OpStack, IsLocked);                          ^ main.adb:185:26:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:43] [@vc:annotation] [@GP_Sloc:main.adb:185:26] [@GP_Shape:L_1_while__L_6_while__if__if__call_minus] (Operations__minus___axiom.minus(Main__opstack.opstack__split_fields) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                 ( ();
                                 ( [@GP_Sloc:main.adb:187:16] ([#"main.adb" 187 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:187:16] ([#"main.adb" 187 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_519.temp___String_Literal_519(()))) ((1 : int)) ((65 : int))))) )) ) )))) ) )) else (
                                ( [@GP_Sloc:main.adb:189:10] (if (( ([#"main.adb" 189 0 0] [#"main.adb" 189 0 0] (([@branch_id=3092] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 189 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@GP_Id:42] [@vc:annotation] [@GP_Sloc:main.adb:189:41] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("*")) and IsLocked = False then                                         ^ main.adb:189:41:VC_PRECONDITION] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_518.temp___String_Literal_518(()))) ((1 : int)) ((1 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                ( [@branch_id=3092] Main.spark__branch ).bool__content )) then (
                                 ( ();
                                 ( [@GP_Sloc:main.adb:190:34] ([#"main.adb" 190 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:190:28] ([#"main.adb" 190 0 0] ()) );
                                 ( [@GP_Sloc:main.adb:190:13] ([#"main.adb" 190 0 0] (if (( ([#"main.adb" 190 0 0] [#"main.adb" 190 0 0] (([@branch_id=3106] Main.spark__branch).bool__content <- ( ((Operations__operandstack__size___axiom.size({ Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content })) >= (2 : int)) )));
                                 ( [@branch_id=3106] Main.spark__branch ).bool__content )) then (
                                  ( ();
                                  ( [@GP_Sloc:main.adb:191:36] ([#"main.adb" 191 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:191:45] ([#"main.adb" 191 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:191:26] ([#"main.adb" 191 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:191:26] ([#"main.adb" 191 0 0] ( ([#"main.adb" 191 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:41] [@vc:annotation] [@comment:               Operations.Multiply(OpStack, IsLocked);                          ^ main.adb:191:26:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__if__call_multiply] [@GP_Sloc:main.adb:191:26] (Operations__multiply___axiom.multiply(Main__opstack.opstack__split_fields) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                  ( ();
                                  ( [@GP_Sloc:main.adb:193:16] ([#"main.adb" 193 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:193:16] ([#"main.adb" 193 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_517.temp___String_Literal_517(()))) ((1 : int)) ((65 : int))))) )) ) )))) ) )) else (
                                 ( [@GP_Sloc:main.adb:195:10] (if (( ([#"main.adb" 195 0 0] [#"main.adb" 195 0 0] (([@branch_id=3124] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 195 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:40] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@vc:annotation] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("/")) and IsLocked = False then                                         ^ main.adb:195:41:VC_PRECONDITION] [@GP_Sloc:main.adb:195:41] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_516.temp___String_Literal_516(()))) ((1 : int)) ((1 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                 ( [@branch_id=3124] Main.spark__branch ).bool__content )) then (
                                  ( ();
                                  ( [@GP_Sloc:main.adb:196:34] ([#"main.adb" 196 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:196:28] ([#"main.adb" 196 0 0] ()) );
                                  ( [@GP_Sloc:main.adb:196:13] ([#"main.adb" 196 0 0] (if (( ([#"main.adb" 196 0 0] [#"main.adb" 196 0 0] (([@branch_id=3138] Main.spark__branch).bool__content <- ( ((Operations__operandstack__size___axiom.size({ Operations__operandstack__stack.__split_fields = Main__opstack.opstack__split_fields.Operations__operandstack__stack.__split_fields__content })) >= (2 : int)) )));
                                  ( [@branch_id=3138] Main.spark__branch ).bool__content )) then (
                                   ( ();
                                   ( [@GP_Sloc:main.adb:197:34] ([#"main.adb" 197 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:197:43] ([#"main.adb" 197 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:197:26] ([#"main.adb" 197 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:197:26] ([#"main.adb" 197 0 0] ( ([#"main.adb" 197 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:               Operations.Divide(OpStack, IsLocked);                          ^ main.adb:197:26:VC_PRECONDITION] [@GP_Sloc:main.adb:197:26] [@vc:annotation] [@GP_Id:39] [@GP_Shape:L_1_while__L_6_while__if__if__call_divide] (Operations__divide___axiom.divide(Main__opstack.opstack__split_fields) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                   ( ();
                                   ( [@GP_Sloc:main.adb:199:16] ([#"main.adb" 199 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:199:16] ([#"main.adb" 199 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_515.temp___String_Literal_515(()))) ((1 : int)) ((65 : int))))) )) ) )))) ) )) else (
                                  ( [@GP_Sloc:main.adb:201:10] (if (( ([#"main.adb" 201 0 0] [#"main.adb" 201 0 0] (([@branch_id=3156] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 201 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("push")) and IsLocked = False then                                         ^ main.adb:201:41:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@GP_Sloc:main.adb:201:41] [@vc:annotation] [@GP_Id:38] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_514.temp___String_Literal_514(()))) ((1 : int)) ((4 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                  ( [@branch_id=3156] Main.spark__branch ).bool__content )) then (
                                   ( ();
                                   ( [@GP_Sloc:main.adb:202:42] ([#"main.adb" 202 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:202:51] ([#"main.adb" 202 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:202:59] ([#"main.adb" 202 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:202:26] ([#"main.adb" 202 0 0] ()) );
                                   ( [@GP_Sloc:main.adb:202:26] ([#"main.adb" 202 0 0] ( ([#"main.adb" 202 0 0] ( [@comment:               Operations.Push_Operation(OpStack, NUMBER, IsLocked);                          ^ main.adb:202:26:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:202:26] [@vc:annotation] [@GP_Shape:L_1_while__L_6_while__if__call_push_operation] [@GP_Id:37] (Operations__push_operation___axiom.push_operation(Main__opstack.opstack__split_fields) (Main__number.number.int__content) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                   ( [@GP_Sloc:main.adb:203:10] (if (( ([#"main.adb" 203 0 0] [#"main.adb" 203 0 0] (([@branch_id=3178] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 203 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("pop")) and IsLocked = False then                                         ^ main.adb:203:41:VC_PRECONDITION] [@vc:annotation] [@GP_Id:36] [@GP_Sloc:main.adb:203:41] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_513.temp___String_Literal_513(()))) ((1 : int)) ((3 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                   ( [@branch_id=3178] Main.spark__branch ).bool__content )) then (
                                    ( ();
                                    ( [@GP_Sloc:main.adb:204:40] ([#"main.adb" 204 0 0] ()) );
                                    ( [@GP_Sloc:main.adb:204:49] ([#"main.adb" 204 0 0] ()) );
                                    ( [@GP_Sloc:main.adb:204:57] ([#"main.adb" 204 0 0] ()) );
                                    ( [@GP_Sloc:main.adb:204:25] ([#"main.adb" 204 0 0] ()) );
                                    ( [@GP_Sloc:main.adb:204:25] ([#"main.adb" 204 0 0] ( ([#"main.adb" 204 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__call_pop_operation] [@comment:              Operations.Pop_Operation(OpStack, NUMBER, IsLocked); -- although the pop in commandline does not need argument, we store the value into the NUMBER                         ^ main.adb:204:25:VC_PRECONDITION] [@vc:annotation] [@GP_Id:35] [@GP_Sloc:main.adb:204:25] (Operations__pop_operation___axiom.pop_operation(Main__opstack.opstack__split_fields) (Main__number.number) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                    ( [@GP_Sloc:main.adb:205:10] (if (( ([#"main.adb" 205 0 0] [#"main.adb" 205 0 0] (([@branch_id=3200] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 205 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("load")) and IsLocked = False then                                         ^ main.adb:205:41:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@vc:annotation] [@GP_Id:34] [@GP_Sloc:main.adb:205:41] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_512.temp___String_Literal_512(()))) ((1 : int)) ((4 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                    ( [@branch_id=3200] Main.spark__branch ).bool__content )) then (
                                     ( ();
                                     ( [@GP_Sloc:main.adb:206:31] ([#"main.adb" 206 0 0] ()) );
                                     ( [@GP_Sloc:main.adb:206:36] ([#"main.adb" 206 0 0] ()) );
                                     ( [@GP_Sloc:main.adb:206:40] ([#"main.adb" 206 0 0] ()) );
                                     ( [@GP_Sloc:main.adb:206:49] ([#"main.adb" 206 0 0] ()) );
                                     ( [@GP_Sloc:main.adb:206:25] ([#"main.adb" 206 0 0] ()) );
                                     ( [@GP_Sloc:main.adb:206:25] ([#"main.adb" 206 0 0] ( ([#"main.adb" 206 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:33] [@comment:              Operations.Load(VAR, DB, OpStack, IsLocked);                         ^ main.adb:206:25:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__call_load] [@GP_Sloc:main.adb:206:25] (Operations__load___axiom.load({ Variablestore__variable.__split_fields = Main__var.var__split_fields.Variablestore__variable.__split_fields__content }) (Main__db.db.Variablestore__database.database__content) (Main__opstack.opstack__split_fields) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                     ( [@GP_Sloc:main.adb:207:10] (if (( ([#"main.adb" 207 0 0] [#"main.adb" 207 0 0] (([@branch_id=3223] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 207 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("store")) and IsLocked = False then                                         ^ main.adb:207:41:VC_PRECONDITION] [@vc:annotation] [@GP_Id:32] [@GP_Sloc:main.adb:207:41] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_511.temp___String_Literal_511(()))) ((1 : int)) ((5 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                     ( [@branch_id=3223] Main.spark__branch ).bool__content )) then (
                                      ( ();
                                      ( [@GP_Sloc:main.adb:208:32] ([#"main.adb" 208 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:208:37] ([#"main.adb" 208 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:208:41] ([#"main.adb" 208 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:208:50] ([#"main.adb" 208 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:208:25] ([#"main.adb" 208 0 0] ()) );
                                      ( [@GP_Sloc:main.adb:208:25] ([#"main.adb" 208 0 0] ( ([#"main.adb" 208 0 0] ( [@comment:              Operations.Store(VAR, DB, OpStack, IsLocked);                         ^ main.adb:208:25:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__call_store] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:31] [@GP_Sloc:main.adb:208:25] (Operations__store___axiom.store(Main__var.var__split_fields) (Main__db.db) (Main__opstack.opstack__split_fields) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                      ( [@GP_Sloc:main.adb:209:10] (if (( ([#"main.adb" 209 0 0] [#"main.adb" 209 0 0] (([@branch_id=3246] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 209 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("remove")) and IsLocked = False then                                         ^ main.adb:209:41:VC_PRECONDITION] [@GP_Sloc:main.adb:209:41] [@vc:annotation] [@GP_Id:30] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_510.temp___String_Literal_510(()))) ((1 : int)) ((6 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                      ( [@branch_id=3246] Main.spark__branch ).bool__content )) then (
                                       ( ();
                                       ( [@GP_Sloc:main.adb:210:33] ([#"main.adb" 210 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:210:38] ([#"main.adb" 210 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:210:42] ([#"main.adb" 210 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:210:25] ([#"main.adb" 210 0 0] ()) );
                                       ( [@GP_Sloc:main.adb:210:25] ([#"main.adb" 210 0 0] ( ([#"main.adb" 210 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:              Operations.Remove(VAR, DB, IsLocked);                         ^ main.adb:210:25:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_while__L_6_while__if__call_remove] [@GP_Sloc:main.adb:210:25] [@GP_Id:29] (Operations__remove___axiom.remove(Main__var.var__split_fields) (Main__db.db) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                       ( [@GP_Sloc:main.adb:211:10] (if (( ([#"main.adb" 211 0 0] [#"main.adb" 211 0 0] (([@branch_id=3268] Main.spark__branch).bool__content <- ( (Boolean.andb((Main__lines__equal___axiom.equal({ Main__lines__mystring.__split_fields = Main__command.command__split_fields.Main__lines__mystring.__split_fields__content }) (([#"main.adb" 211 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__and__call_equal__call_from_string] [@GP_Sloc:main.adb:211:41] [@vc:annotation] [@GP_Id:28] [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("list")) and IsLocked = False then                                         ^ main.adb:211:41:VC_PRECONDITION] (Main__lines__from_string___axiom.from_string((Standard__string.of_array((Temp___String_Literal_509.temp___String_Literal_509(()))) ((1 : int)) ((4 : int))))) ))))) (((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))))) )));
                                       ( [@branch_id=3268] Main.spark__branch ).bool__content )) then (
                                        ( ();
                                        ( [@GP_Sloc:main.adb:212:31] ([#"main.adb" 212 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:212:35] ([#"main.adb" 212 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:212:25] ([#"main.adb" 212 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:212:25] ([#"main.adb" 212 0 0] ( ([#"main.adb" 212 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__L_6_while__if__call_list] [@GP_Sloc:main.adb:212:25] [@comment:              Operations.List(DB, IsLocked);                         ^ main.adb:212:25:VC_PRECONDITION] [@vc:annotation] [@GP_Id:27] (Operations__list___axiom.list(Main__db.db.Variablestore__database.database__content) (Main__islocked.islocked.bool__content)) )) )) ) )) else (
                                        ( ();
                                        ( [@GP_Sloc:main.adb:214:13] ([#"main.adb" 214 0 0] ()) );
                                        ( [@GP_Sloc:main.adb:214:13] ([#"main.adb" 214 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_508.temp___String_Literal_508(()))) ((1 : int)) ((60 : int))))) )) ) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) )))) );
                             () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:118 *)
                             ;
                             (if (not ( ((Boolean.to_int(Main__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))) )) then (
                               raise Main__L_6.L_6)) )
                            done )))
                            )))
                           )))
                          )))
                         )))
                        )))
                       )))
                      )))
                     )))
                    )
                  with
                   Temp___exception_491 -> ( ();
                   ( [@GP_Sloc:main.adb:132:16] ([#"main.adb" 132 0 0] ()) );
                   ( [@GP_Sloc:main.adb:132:16] ([#"main.adb" 132 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_490.temp___String_Literal_490(()))) ((1 : int)) ((48 : int))))) )) );
                   ( [@GP_Sloc:main.adb:133:16] ([#"main.adb" 133 0 0] [#"main.adb" 133 0 0] raise Return__exc) ) )
                  end
                 with
                  Main__L_6.L_6 -> ()
                 end)) )) );
                () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:61 *)
                ;
                (if (not ( (Boolean.of_int((1 : int))) )) then (
                  raise Main__L_1.L_1)) )
               done )))
               )))
              )))
             )))
            )))
           )))
          )))
         )))
        )))
       )))
      )
    with
     Main__L_1.L_1 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "lines" defined at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Main__lines__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length___axiom as Main__lines__max_mystring_length___axiom

 let def [#"main.adb" 27 0 0][@GP_Subp:main.adb:27] 
   (__void_param : unit)
  requires { [#"main.adb" 27 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 5 0 0] ());
  ([#"main.adb" 27 0 0] ( [#"main.adb" 27 0 0] begin ensures {true} let _ = (let _ = (2048 : int) in (
   ()))
   in () end ;
  [#"main.adb" 27 0 0] assume { [#"main.adb" 27 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"main.adb" 27 0 0] ());
  ([#"mystring.ads" 1 0 0] ());
  ([#"mystring.ads" 6 0 0] ());
  ([#"mystring.ads" 8 0 0] ());
  ([#"mystring.ads" 9 0 0] ());
  ([#"mystring.ads" 12 0 0] ());
  ([#"mystring.ads" 14 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 16 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 19 0 0] ());
  ([#"mystring.ads" 23 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 27 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ();
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 37 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.adb" 5 0 0] ());
  ([#"mystring.adb" 12 0 0] ());
  ([#"mystring.adb" 28 0 0] ());
  ([#"mystring.adb" 52 0 0] ());
  ([#"mystring.adb" 71 0 0] ());
  ([#"mystring.adb" 83 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:89:1:instantiated:main.adb:27:4] ([#"mystring.adb" 89 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:6 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Main__lines__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom

 let def [@GP_Subp:mystring.ads:6] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___543 [@mlw:proxy_symbol] [@introduced] =  (val _f : Main__lines__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length__m as Main__lines__length__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length__m___axiom as Main__lines__length__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom

 val main__lines__length__result [@model_projected] [@name:Length] [@model_trace:102753@result]  : int__ref 
 
 let def [#"mystring.ads" 23 0 0][@GP_Subp:mystring.ads:23] 
   (__void_param : unit)
  requires { [#"mystring.ads" 23 0 0] true }
  ensures { [#"mystring.ads" 23 0 0] ([#"mystring.ads" 24 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:main.adb:27:4:VC_POSTCONDITION] [@GP_Id:48] [@model_vc_post] [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:27:4] ( [@GP_Pretty_Ada:103149] [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:27:4] (main__lines__length__result.int__content <= (2048 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at main.adb:27 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:23 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at main.adb:27 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:23 instantiated at main.adb:27 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:43:8:instantiated:main.adb:27:4] ([#"mystring.ads" 43 0 0] ( [#"mystring.ads" 43 0 0] (main__lines__length__result.int__content <- ( (Main__lines__mystring__T16b__rep.to_rep(Main__lines__length__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ));
   [#"mystring.ads" 43 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (main__lines__length__result.int__content <= (2048 : int)) in (
   ()))
   in () end ;
  main__lines__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:8 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__to_string__result as Main__lines__to_string__result
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS
 use        Main__lines__to_string__T69b as Main__lines__to_string__T69b
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__to_string__m___axiom as Main__lines__to_string__m___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom
 use        Main__lines__to_string__result___axiom as Main__lines__to_string__result___axiom
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Main__lines__to_string__T69b___axiom as Main__lines__to_string__T69b___axiom

 val main__lines__to_string__result [@name:To_String] [@model_projected] [@model_trace:102602@result]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 8 0 0][@GP_Subp:mystring.ads:8] 
   (__void_param : unit)
  requires { [#"mystring.ads" 8 0 0] true }
  ensures { [#"mystring.ads" 8 0 0] ([#"mystring.ads" 9 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:main.adb:27:4:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:27:4] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:55] ( ( ( [@GP_Pretty_Ada:102582] [@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:27:4] ((Standard__string.length main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_552 : int.
   ( (temp___result_552 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_552 Main__lines__to_string__m.m) ))) ) /\ ( [@GP_Pretty_Ada:102589] [@GP_Sloc:mystring.ads:10:14:instantiated:main.adb:27:4] ((Standard__string.first main__lines__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:102594] [@GP_Sloc:mystring.ads:10:45:instantiated:main.adb:27:4] ((Standard__string.last main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_553 : int.
   ( (temp___result_553 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_553 Main__lines__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at main.adb:27 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:8 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at main.adb:27 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:8 instantiated at main.adb:27 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] begin ensures {true} let _ = (let _ = (Main__lines__mystring__T16b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 6 0 0] [#"mystring.adb" 6 0 0] (val _f : unit
   requires {( [@GP_Sloc:mystring.adb:6:7:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Id:49] [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [#"mystring.adb" 6 0 0] ( ((1 : int) <= (Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 6 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (Main__lines__to_string__TresultS___axiom.default_initial_assumption (Main__lines__to_string__TresultS.of_array Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) False) };
   [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (if (False) then (
    true) else (
    ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) = (Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:8:7:instantiated:main.adb:27:4] ([#"mystring.adb" 8 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:27:4] ([#"mystring.adb" 8 0 0] [#"mystring.adb" 8 0 0] (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Main__lines__to_string__TresultS.to_array (let temp___551 [@mlw:proxy_symbol] [@introduced] = (let temp___550 [@mlw:proxy_symbol] [@introduced] = (let temp___549 [@mlw:proxy_symbol] [@introduced] = (let temp___547 [@mlw:proxy_symbol] [@introduced] = (Main__lines__mystring__T16b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
   (let temp___546 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___548 [@mlw:proxy_symbol] [@introduced] = Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Main__lines__to_string__T69b.of_array(( [#"mystring.adb" 8 0 0] assert { [#"mystring.adb" 8 0 0] ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:27:4] [@GP_Id:50] ( (temp___546 <= temp___547) -> ( ( (Main__lines__TmystringstrD1.first <= temp___546) /\ (temp___546 <= Main__lines__TmystringstrD1.last) ) /\ ( (Main__lines__TmystringstrD1.first <= temp___547) /\ (temp___547 <= Main__lines__TmystringstrD1.last) ) ) ) )) };
    temp___548 )) (temp___546) (temp___547))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:27:4] [@GP_Id:51] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Main__lines__to_string__T69b.first(temp___549))) ((Main__lines__to_string__T69b.last(temp___549)))) )) };
    (Standard__string.of_array((Main__lines__to_string__T69b.to_array(temp___549))) ((Main__lines__to_string__T69b.first(temp___549))) ((Main__lines__to_string__T69b.last(temp___549)))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:main.adb:27:4:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Shape:result_assign__typeconv] [@GP_Id:52] [@GP_Reason:VC_LENGTH_CHECK] [@GP_Sloc:mystring.adb:8:17:instantiated:main.adb:27:4] ( true /\ (if (((Standard__string.first temp___550) <= (Standard__string.last temp___550))) then (
     ( ((1 : int) <= (Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ (((Standard__string.last temp___550) - (Standard__string.first temp___550)) = ((Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) - (1 : int))) )) else (
     ((Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) < (1 : int)))) ) )) };
    (Main__lines__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___550))) ((Standard__string.first(temp___550))) ((1 : int)))) ((1 : int)) ((Main__lines__mystring__T16b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Shape:result_assign] [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:27:4] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:main.adb:27:4:VC_LENGTH_CHECK] [@GP_Id:53] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Main__lines__to_string__TresultS.first temp___551) <= (Main__lines__to_string__TresultS.last temp___551))) then (
     ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) <= (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ (((Main__lines__to_string__TresultS.last temp___551) - (Main__lines__to_string__TresultS.first temp___551)) = ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) - (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) < (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first)))) ) )) };
    temp___551 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:9:14:instantiated:main.adb:27:4] ([#"mystring.adb" 9 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:9:7:instantiated:main.adb:27:4] ([#"mystring.adb" 9 0 0] ( [#"mystring.adb" 9 0 0] (main__lines__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____last)))) ));
   [#"mystring.adb" 9 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 9 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:9:30:instantiated:main.adb:27:4] [@GP_Id:54] (Standard__integer.range_check_(( [#"mystring.ads" 9 0 0] begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(main__lines__to_string__result.Standard__string.string__content)) ))) )) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(main__lines__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(main__lines__to_string__result.Standard__string.string__content)) ) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m))))) in (
   ()))
   in () end ;
  main__lines__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at main.adb:27, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_554___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_554 as Temp_____aggregate_def_554
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___556   : int.
   (let temp___555 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_554.temp_____aggregate_def_554 temp___556) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___556 True True True True)) then (
     (forall temp___557   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___555 temp___557)) = temp___556))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:12 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__from_string__m as Main__lines__from_string__m
 use        Main__lines__from_string__j as Main__lines__from_string__j
 use        Main__lines__from_string__L_1__i as Main__lines__from_string__L_1__i
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__from_string__L_1 as Main__lines__from_string__L_1
 use        Main__lines__from_string__L_1__T74b as Main__lines__from_string__L_1__T74b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_554 as Temp_____aggregate_def_554
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__from_string__s___axiom as Main__lines__from_string__s___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom
 use        Main__lines__from_string__m___axiom as Main__lines__from_string__m___axiom
 use        Main__lines__from_string__j___axiom as Main__lines__from_string__j___axiom
 use        Main__lines__from_string__L_1___axiom as Main__lines__from_string__L_1___axiom
 use        Main__lines__from_string__L_1__i___axiom as Main__lines__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_554___axiom as Temp_____aggregate_def_554___axiom
 use        Main__lines__from_string__L_1__T74b___axiom as Main__lines__from_string__L_1__T74b___axiom

 val main__lines__from_string__result [@name:From_String] [@model_projected] [@model_trace:102636@result]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 12 0 0][@GP_Subp:mystring.ads:12] 
   (__void_param : unit)
  requires { [#"mystring.ads" 12 0 0] true }
  ensures { [#"mystring.ads" 12 0 0] ([#"mystring.ads" 14 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:mystring.ads:14:15:instantiated:main.adb:27:4] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:14:15:instantiated:main.adb:27:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:66] ( [@GP_Pretty_Ada:103081] [@GP_Sloc:mystring.ads:14:15:instantiated:main.adb:27:4] ((epsilon temp___result_570 : int.
   ( (temp___result_570 = (Main__lines__length.length main__lines__from_string__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_570 main__lines__from_string__result.Main__lines__mystring.mystring__content) )) = (Standard__string.length Main__lines__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at main.adb:27 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Main__lines__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:12 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at main.adb:27 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 13 0 0] ( [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:13:15:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:13:15:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:65] (Standard__integer.range_check_(( [#"mystring.ads" 13 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) )) <= (2048 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:12 instantiated at main.adb:27 *)
  ;
   assume {  ( [@GP_Pretty_Ada:103067] ((Standard__string.length Main__lines__from_string__s.s) <= (2048 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 12 0 0] ());
   ([#"mystring.adb" 13 0 0] ( (let main__lines__from_string__m__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = ( 0 : Main__lines__mystring__T16b.t16b ); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_554.temp_____aggregate_def_554((32 : int))) } } in (
    [#"mystring.adb" 13 0 0] (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__from_string__m__assume.Main__lines__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 13 0 0] assume { [#"mystring.adb" 13 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 14 0 0] ());
   ([#"mystring.adb" 14 0 0] ( [#"mystring.adb" 14 0 0] (Main__lines__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 14 0 0] assume { [#"mystring.adb" 14 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:16:7:instantiated:main.adb:27:4] ([#"mystring.adb" 16 0 0] (if (( ([#"mystring.adb" 16 0 0] [#"mystring.adb" 16 0 0] (([@branch_id=130921] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 16 0 0] ( [@GP_Id:57] [@GP_Sloc:mystring.adb:16:11:instantiated:main.adb:27:4] [@vc:annotation] [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] (Standard__integer.range_check_(( [#"mystring.adb" 16 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Main__lines__from_string__s.s)) ))) )) > (2048 : int)) )));
   ( [@branch_id=130921] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:27:4] ([#"mystring.adb" 17 0 0] ([#"mystring.adb" 17 0 0] ( [@GP_Id:56] [@GP_Reason:VC_RAISE] [@vc:annotation] [@comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:main.adb:27:4:VC_RAISE] [@GP_Shape:if__raise_constraint_error] [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:27:4] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:19:7:instantiated:main.adb:27:4] ([#"mystring.adb" 19 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:19:16:instantiated:main.adb:27:4] ([#"mystring.adb" 19 0 0] (let temp___559 [@mlw:proxy_symbol] [@introduced] = (let temp___558 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = temp___558.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
     ()))
     in () end ;
    { ( temp___558 ) with Main__lines__mystring.__split_fields = { ( temp___558.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T16b__rep.of_rep(([#"mystring.adb" 19 0 0] ( [@GP_Id:58] [@GP_Sloc:mystring.adb:19:20:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] [@comment:      M.Length := S'Length;                    ^ mystring.adb:19:20:instantiated:main.adb:27:4:VC_RANGE_CHECK] (Main__lines__mystring__T16b.range_check_(( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Main__lines__from_string__s.s)) ))) )))) } } )))
    in (
     (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___559.Main__lines__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:20:24:instantiated:main.adb:27:4] ([#"mystring.adb" 20 0 0] (let temp___560 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Main__lines__from_string__s.s)) ) in (
   (let temp___561 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Main__lines__from_string__s.s)) ) in (
    ( [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( temp___560 ));
    () (* Translation of an Ada loop from mystring.adb:20 instantiated at main.adb:27 *)
    ;
    (if ((Boolean.andb((temp___560 <= Main__lines__from_string__L_1__i.i.int__content)) ((Main__lines__from_string__L_1__i.i.int__content <= temp___561)))) then (
     [#"mystring.adb" 20 0 0] try
      ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___567 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : Main__lines__mystring.mystring
      ensures {[#"mystring.adb" 20 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__L_1__i.i.int__content in (
        ()))
        in () end ;
       (let temp___566 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
       ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__L_1__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__j.j.int__content in (
         ()))
         in () end ;
        (let temp___565 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
        ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:27 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:20 instantiated at main.adb:27 *)
         ;
         (let temp___inv_569 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Id:62] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:27:4] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:61] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:27:4] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 21 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:27:4] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:main.adb:27:4:VC_LOOP_INVARIANT] [@GP_Shape:L_1_while__pragargs__cmp] [@GP_Id:63] ( [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:27:4] [@GP_Pretty_Ada:130949] (Main__lines__from_string__j.j.int__content = ((Main__lines__from_string__L_1__i.i.int__content - (Standard__string.first Main__lines__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:20 instantiated at main.adb:27 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ ((Standard__string.first Main__lines__from_string__s.s) <= (Standard__string.last Main__lines__from_string__s.s)) )) then (
           (Main__lines__from_string__L_1__T74b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) Main__lines__from_string__L_1__i.i.int__content)) else true) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___567.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) )) (( ((Standard__string.first Main__lines__from_string__s.s) <= Main__lines__from_string__L_1__i.i.int__content) /\ (Main__lines__from_string__L_1__i.i.int__content <= (Standard__string.last Main__lines__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:20 instantiated at main.adb:27 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:20 instantiated at main.adb:27 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:22:10:instantiated:main.adb:27:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:27:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:19:instantiated:main.adb:27:4] ([#"mystring.adb" 22 0 0] (let temp___564 [@mlw:proxy_symbol] [@introduced] = (let temp___563 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___563.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___563 ) with Main__lines__mystring.__split_fields = { ( temp___563.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___562 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 22 0 0] assert { [#"mystring.adb" 22 0 0] ([#"mystring.adb" 22 0 0] ( [@comment:         M.Str(J) := S(I);                ^ mystring.adb:22:16:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Id:59] [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:27:4] ( (Main__lines__TmystringstrD1.first <= Main__lines__from_string__j.j.int__content) /\ (Main__lines__from_string__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__lines__from_string__s.s))) (Main__lines__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___564.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:23:10:instantiated:main.adb:27:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:15:instantiated:main.adb:27:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:12:instantiated:main.adb:27:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Main__lines__from_string__j.j.int__content <- ( ([#"mystring.adb" 23 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:23:17:instantiated:main.adb:27:4] [@GP_Id:60] [@comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:27 *)
          ;
          (if ((Main__lines__from_string__L_1__i.i.int__content = temp___561)) then (
            raise Main__lines__from_string__L_1.L_1));
          ([#"mystring.adb" 20 0 0] [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( (Main__lines__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_569 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Id:62] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:27:4] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:61] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:27:4] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:25:14:instantiated:main.adb:27:4] ([#"mystring.adb" 25 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:25:7:instantiated:main.adb:27:4] ([#"mystring.adb" 25 0 0] ( [#"mystring.adb" 25 0 0] (main__lines__from_string__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__from_string__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 14 0 0] ( [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:14:45:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.ads:14:45:instantiated:main.adb:27:4] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:64] (Standard__integer.range_check_(( [#"mystring.ads" 14 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  main__lines__from_string__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:16 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less__m1 as Main__lines__less__m1
 use        Main__lines__less__m2 as Main__lines__less__m2
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__less__i as Main__lines__less__i
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__less__L_2 as Main__lines__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__less__m1___axiom as Main__lines__less__m1___axiom
 use        Main__lines__less__m2___axiom as Main__lines__less__m2___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom
 use        Main__lines__less__i___axiom as Main__lines__less__i___axiom
 use        Main__lines__less__L_2___axiom as Main__lines__less__L_2___axiom

 val main__lines__less__result [@model_projected] [@name:Less] [@model_trace:102655@result]  : bool__ref 
 
 let def [#"mystring.ads" 16 0 0][@GP_Subp:mystring.ads:16] 
   (__void_param : unit)
  requires { [#"mystring.ads" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m1.m1 True False True True) };
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:16 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:16 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 16 0 0] try
   ( ();
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Main__lines__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 36 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:main.adb:27:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=131078] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T16b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) < (Main__lines__mystring__T16b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=131078] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:main.adb:27:4] ([#"mystring.adb" 32 0 0] ( [#"mystring.adb" 32 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:33:7:instantiated:main.adb:27:4] (if (( ([#"mystring.adb" 33 0 0] [#"mystring.adb" 33 0 0] (([@branch_id=131088] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T16b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) > (Main__lines__mystring__T16b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
    ( [@branch_id=131088] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:34:10:instantiated:main.adb:27:4] ([#"mystring.adb" 34 0 0] ( [#"mystring.adb" 34 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 34 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:36:35:instantiated:main.adb:27:4] ([#"mystring.adb" 36 0 0] ( () (* Translation of an Ada loop from mystring.adb:36 instantiated at main.adb:27 *)
     ;
     (if ((Main__lines__less__i.i.int__content <= (2048 : int))) then (
      [#"mystring.adb" 36 0 0] try
       ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Main__lines__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___575 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 36 0 0] (val _f : int
       ensures {[#"mystring.adb" 36 0 0] (result = Main__lines__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:27 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:36 instantiated at main.adb:27 *)
        ;
        (let temp___inv_576 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 36 0 0] while True do
         invariant { 
          ([#"mystring.adb" 37 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Id:72] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:main.adb:27:4:VC_LOOP_INVARIANT] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:27:4] [@GP_Pretty_Ada:131109] (Main__lines__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:36 instantiated at main.adb:27 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True True True True) )/\true )) ((Main__lines__less__i.i.int__content <= (2048 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:36 instantiated at main.adb:27 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:36 instantiated at main.adb:27 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:27:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:27:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:13:instantiated:main.adb:27:4] ([#"mystring.adb" 38 0 0] (if (( ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (([@branch_id=131116] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___573 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___573) (( [#"mystring.adb" 38 0 0] assert { [#"mystring.adb" 38 0 0] ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:27:4] [@GP_Id:70] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___574 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___574) ((  assert {  ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Id:71] [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:27:4] [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=131116] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:39:16:instantiated:main.adb:27:4] ([#"mystring.adb" 39 0 0] ( [#"mystring.adb" 39 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 39 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:40:13:instantiated:main.adb:27:4] (if (( ([#"mystring.adb" 40 0 0] [#"mystring.adb" 40 0 0] (([@branch_id=131130] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___571 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___571) (( [#"mystring.adb" 40 0 0] assert { [#"mystring.adb" 40 0 0] ([#"mystring.adb" 40 0 0] ( [@GP_Sloc:mystring.adb:40:26:instantiated:main.adb:27:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:68] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___572 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___572) ((  assert {  ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:40:38:instantiated:main.adb:27:4] [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:69] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=131130] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:41:16:instantiated:main.adb:27:4] ([#"mystring.adb" 41 0 0] ( [#"mystring.adb" 41 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 41 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:43:16:instantiated:main.adb:27:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:21:instantiated:main.adb:27:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:18:instantiated:main.adb:27:4] ([#"mystring.adb" 43 0 0] [#"mystring.adb" 43 0 0] (Main__lines__less__i.i.int__content <- ( ([#"mystring.adb" 43 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] [@GP_Id:67] [@GP_Sloc:mystring.adb:43:23:instantiated:main.adb:27:4] (Standard__integer.range_check_((Main__lines__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:27 *)
         ;
         (if (not ( (Main__lines__less__i.i.int__content <= (2048 : int)) )) then (
           raise Main__lines__less__L_2.L_2));
         (let temp___inv_576 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Main__lines__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:47:10:instantiated:main.adb:27:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 47 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:30 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m as Main__lines__get__m
 use        Main__lines__get__index as Main__lines__get__index
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m___axiom as Main__lines__get__m___axiom
 use        Main__lines__get__index___axiom as Main__lines__get__index___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom

 val main__lines__get__result [@model_trace:102839@result] [@model_projected] [@name:Get]  : int__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__get__m.m True False True True) };
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Main__lines__get__index.index <= (Main__lines__length___axiom.length(Main__lines__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] ( [@GP_Pretty_Ada:103217] (Main__lines__get__index.index <= (epsilon temp___result_578 : int.
   ( (temp___result_578 = (Main__lines__length.length Main__lines__get__m.m)) /\ (Main__lines__length.length__function_guard temp___result_578 Main__lines__get__m.m) ))) ) };
  [#"mystring.ads" 30 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:46:8:instantiated:main.adb:27:4] ([#"mystring.ads" 46 0 0] ( [#"mystring.ads" 46 0 0] (main__lines__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___577 [@mlw:proxy_symbol] [@introduced] = Main__lines__get__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get(temp___577) (( [#"mystring.ads" 46 0 0] assert { [#"mystring.ads" 46 0 0] ([#"mystring.ads" 46 0 0] ( [@GP_Shape:return__ixdcomp] [@vc:annotation] [@GP_Id:73] [@GP_Sloc:mystring.ads:46:13:instantiated:main.adb:27:4] [@comment:     (M.Str(Index));             ^ mystring.ads:46:13:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__get__index.index) /\ (Main__lines__get__index.index <= Main__lines__TmystringstrD1.last) ) )) };
    Main__lines__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:18 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__equal__m1 as Main__lines__equal__m1
 use        Main__lines__equal__m2 as Main__lines__equal__m2
 use        Main__lines__get as Main__lines__get
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__equal__i as Main__lines__equal__i
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__equal__L_3 as Main__lines__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__equal__m1___axiom as Main__lines__equal__m1___axiom
 use        Main__lines__equal__m2___axiom as Main__lines__equal__m2___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom
 use        Main__lines__equal__i___axiom as Main__lines__equal__i___axiom
 use        Main__lines__equal__L_3___axiom as Main__lines__equal__L_3___axiom

 val main__lines__equal__result [@model_trace:102719@result] [@name:Equal] [@model_projected]  : bool__ref 
 
 let def [#"mystring.ads" 18 0 0][@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires { [#"mystring.ads" 18 0 0] true }
  ensures { [#"mystring.ads" 18 0 0] ([#"mystring.ads" 19 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:83] [@GP_Sloc:mystring.ads:19:15:instantiated:main.adb:27:4] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:19:15:instantiated:main.adb:27:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__if] (if ((main__lines__equal__result.bool__content = True)) then (
   ( ( [@GP_Pretty_Ada:102688] [@GP_Sloc:mystring.ads:20:11:instantiated:main.adb:27:4] ((epsilon temp___result_592 : int.
    ( (temp___result_592 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_592 Main__lines__equal__m1.m1) )) = (epsilon temp___result_593 : int.
    ( (temp___result_593 = (Main__lines__length.length Main__lines__equal__m2.m2)) /\ (Main__lines__length.length__function_guard temp___result_593 Main__lines__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 19 0 0]  [@model_trace:102706] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_594 : int.
     ( (temp___result_594 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_594 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Sloc:mystring.ads:21:40:instantiated:main.adb:27:4] [@GP_Pretty_Ada:102696] ((epsilon temp___result_595 : int.
     ( (temp___result_595 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_595 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_596 : int.
     ( (temp___result_596 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_596 Main__lines__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:103295] [@GP_Sloc:mystring.ads:19:15:instantiated:main.adb:27:4] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:18 instantiated at main.adb:27 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m1.m1 True False True True) };
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:18 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:18 instantiated at main.adb:27 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:18 instantiated at main.adb:27 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 53 0 0] ( [#"mystring.adb" 53 0 0] (Main__lines__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 53 0 0] assume { [#"mystring.adb" 53 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 58 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:55:7:instantiated:main.adb:27:4] ([#"mystring.adb" 55 0 0] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=131267] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T16b__rep.to_rep(Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) <> (Main__lines__mystring__T16b__rep.to_rep(Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=131267] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:56:10:instantiated:main.adb:27:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:58:35:instantiated:main.adb:27:4] ([#"mystring.adb" 58 0 0] ( () (* Translation of an Ada loop from mystring.adb:58 instantiated at main.adb:27 *)
    ;
    (if ((Main__lines__equal__i.i.int__content <= (2048 : int))) then (
     [#"mystring.adb" 58 0 0] try
      ( [#"mystring.adb" 58 0 0] begin ensures {true} let _ = (let _ = Main__lines__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___581 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 58 0 0] (val _f : int
      ensures {[#"mystring.adb" 58 0 0] (result = Main__lines__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:27 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:58 instantiated at main.adb:27 *)
       ;
       (let temp___inv_582 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 58 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:77] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:27:4] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___583 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___583) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Id:78] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___584 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___584) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:79] [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:27:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@model_trace:131308] [@name:J]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___585 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___585 j)))
        ) = (Standard__character__rep.to_rep (let temp___586 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___586 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 59 0 0] ( [@GP_Id:80] [@GP_Reason:VC_LOOP_INVARIANT] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:59:36:instantiated:main.adb:27:4:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:if__L_3_while__pragargs__and] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:27:4] ( ( [@GP_Pretty_Ada:131289] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:27:4] (Main__lines__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 59 0 0]  [@model_trace:131308] [@name:J]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Pretty_Ada:131296] [@GP_Sloc:mystring.adb:60:60:instantiated:main.adb:27:4] ((Standard__character__rep.to_rep (let temp___587 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___587 j)))
          ) = (Standard__character__rep.to_rep (let temp___588 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___588 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:58 instantiated at main.adb:27 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True True True True) )/\true )) ((Main__lines__equal__i.i.int__content <= (2048 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:58 instantiated at main.adb:27 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:58 instantiated at main.adb:27 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:27:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:27:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:13:instantiated:main.adb:27:4] ([#"mystring.adb" 61 0 0] (if (( ([#"mystring.adb" 61 0 0] [#"mystring.adb" 61 0 0] (([@branch_id=131321] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___579 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___579) (( [#"mystring.adb" 61 0 0] assert { [#"mystring.adb" 61 0 0] ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:27:4] [@vc:annotation] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:61:23:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Id:75] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___580 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___580) ((  assert {  ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Id:76] [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:27:4] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:61:36:instantiated:main.adb:27:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=131321] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:62:16:instantiated:main.adb:27:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 62 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:64:16:instantiated:main.adb:27:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:21:instantiated:main.adb:27:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:18:instantiated:main.adb:27:4] ([#"mystring.adb" 64 0 0] [#"mystring.adb" 64 0 0] (Main__lines__equal__i.i.int__content <- ( ([#"mystring.adb" 64 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:64:23:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:64:23:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__if__i_assign__add] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:27 *)
        ;
        (if (not ( (Main__lines__equal__i.i.int__content <= (2048 : int)) )) then (
          raise Main__lines__equal__L_3.L_3));
        (let temp___inv_582 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:77] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:27:4] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___583 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___583) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Id:78] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___584 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___584) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:79] [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:27:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@model_trace:131308] [@name:J]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___585 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___585 j)))
         ) = (Standard__character__rep.to_rep (let temp___586 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___586 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Main__lines__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:67:10:instantiated:main.adb:27:4] ([#"mystring.adb" 67 0 0] ( [#"mystring.adb" 67 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 67 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (main__lines__equal__result.bool__content) then (
   (Boolean.andb(((Main__lines__length___axiom.length(Main__lines__equal__m1.m1)) = (Main__lines__length___axiom.length(Main__lines__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Main__lines__length___axiom.length(Main__lines__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 21 0 0] ( [@GP_Id:81] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:mystring.ads:21:40:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:21:40:instantiated:main.adb:27:4:VC_PRECONDITION] (Main__lines__get___axiom.get(Main__lines__equal__m1.m1) (i)) )) = ([#"mystring.ads" 21 0 0] ( [@GP_Id:82] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Sloc:mystring.ads:21:52:instantiated:main.adb:27:4] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:21:52:instantiated:main.adb:27:4:VC_PRECONDITION] (Main__lines__get___axiom.get(Main__lines__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:102706] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_589 : int.
     ( (temp___result_589 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_589 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:102696] ((epsilon temp___result_590 : int.
     ( (temp___result_590 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_590 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_591 : int.
     ( (temp___result_591 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_591 Main__lines__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  main__lines__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at main.adb:27, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_597___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_597 as Temp_____aggregate_def_597
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___599   : int.
   (let temp___598 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_597.temp_____aggregate_def_597 temp___599) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___599 True True True True)) then (
     (forall temp___600   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___598 temp___600)) = temp___599))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:26 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m as Main__lines__substring__m
 use        Main__lines__substring__from as Main__lines__substring__from
 use        Main__lines__substring__to as Main__lines__substring__to
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__substring__r as Main__lines__substring__r
 use        Main__lines__substring__j as Main__lines__substring__j
 use        Main__lines__substring__L_4__i as Main__lines__substring__L_4__i
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__substring__L_4 as Main__lines__substring__L_4
 use        Main__lines__substring__L_4__T90b as Main__lines__substring__L_4__T90b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_597 as Temp_____aggregate_def_597
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m___axiom as Main__lines__substring__m___axiom
 use        Main__lines__substring__from___axiom as Main__lines__substring__from___axiom
 use        Main__lines__substring__to___axiom as Main__lines__substring__to___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom
 use        Main__lines__substring__r___axiom as Main__lines__substring__r___axiom
 use        Main__lines__substring__j___axiom as Main__lines__substring__j___axiom
 use        Main__lines__substring__L_4___axiom as Main__lines__substring__L_4___axiom
 use        Main__lines__substring__L_4__i___axiom as Main__lines__substring__L_4__i___axiom
 use        Temp_____aggregate_def_597___axiom as Temp_____aggregate_def_597___axiom
 use        Main__lines__substring__L_4__T90b___axiom as Main__lines__substring__L_4__T90b___axiom

 val main__lines__substring__result [@model_projected] [@name:Substring] [@model_trace:102795@result]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 26 0 0][@GP_Subp:mystring.ads:26] 
   (__void_param : unit)
  requires { [#"mystring.ads" 26 0 0] true }
  ensures { [#"mystring.ads" 26 0 0] ([#"mystring.ads" 28 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:28:14:instantiated:main.adb:27:4] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:28:14:instantiated:main.adb:27:4:VC_POSTCONDITION] [@GP_Id:93] ( [@GP_Sloc:mystring.ads:28:14:instantiated:main.adb:27:4] [@GP_Pretty_Ada:103190] ((epsilon temp___result_613 : int.
   ( (temp___result_613 = (Main__lines__length.length main__lines__substring__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_613 main__lines__substring__result.Main__lines__mystring.mystring__content) )) = ((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:26 instantiated at main.adb:27 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:26 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:26 instantiated at main.adb:27 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Main__lines__substring__from.from <= Main__lines__substring__to.to__)) ((Main__lines__substring__to.to__ <= (Main__lines__length___axiom.length(Main__lines__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:26 instantiated at main.adb:27 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:102774] (Main__lines__substring__from.from <= Main__lines__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:102777] (Main__lines__substring__to.to__ <= (epsilon temp___result_612 : int.
   ( (temp___result_612 = (Main__lines__length.length Main__lines__substring__m.m)) /\ (Main__lines__length.length__function_guard temp___result_612 Main__lines__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 72 0 0] ( (let main__lines__substring__r__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T16b__rep.of_rep(([#"mystring.adb" 72 0 0] ( [@GP_Id:85] [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:27:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:27:4:VC_RANGE_CHECK] (Main__lines__mystring__T16b.range_check_(([#"mystring.adb" 72 0 0] ( [@GP_Id:84] [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:27:4] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) )))) )))); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_597.temp_____aggregate_def_597((32 : int))) } } in (
     (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__substring__r__assume.Main__lines__mystring.__split_fields ))))
   ;
    assume {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ([#"mystring.adb" 73 0 0] ( [#"mystring.adb" 73 0 0] (Main__lines__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 73 0 0] assume { [#"mystring.adb" 73 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 75 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:75:25:instantiated:main.adb:27:4] ([#"mystring.adb" 75 0 0] (let temp___601 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__from.from in (
   (let temp___602 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__to.to__ in (
    ( [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( temp___601 ));
    () (* Translation of an Ada loop from mystring.adb:75 instantiated at main.adb:27 *)
    ;
    (if ((Boolean.andb((temp___601 <= Main__lines__substring__L_4__i.i.int__content)) ((Main__lines__substring__L_4__i.i.int__content <= temp___602)))) then (
     [#"mystring.adb" 75 0 0] try
      ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___609 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : Main__lines__mystring.mystring
      ensures {[#"mystring.adb" 75 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__L_4__i.i.int__content in (
        ()))
        in () end ;
       (let temp___608 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
       ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__L_4__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__j.j.int__content in (
         ()))
         in () end ;
        (let temp___607 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
        ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:27 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:75 instantiated at main.adb:27 *)
         ;
         (let temp___inv_611 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:90] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:27:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Id:89] [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:27:4] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 76 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:main.adb:27:4:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:27:4] [@GP_Id:91] ( [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:27:4] [@GP_Pretty_Ada:131483] (Main__lines__substring__j.j.int__content = ((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:75 instantiated at main.adb:27 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Main__lines__substring__from.from <= Main__lines__substring__to.to__) )) then (
           (Main__lines__substring__L_4__T90b.dynamic_property Main__lines__substring__from.from Main__lines__substring__to.to__ Main__lines__substring__L_4__i.i.int__content)) else true) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___609.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) )) (( (Main__lines__substring__from.from <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:75 instantiated at main.adb:27 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:75 instantiated at main.adb:27 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:77:10:instantiated:main.adb:27:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:27:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:19:instantiated:main.adb:27:4] ([#"mystring.adb" 77 0 0] (let temp___606 [@mlw:proxy_symbol] [@introduced] = (let temp___605 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 77 0 0] begin ensures {true} let _ = (let _ = temp___605.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___605 ) with Main__lines__mystring.__split_fields = { ( temp___605.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___604 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 77 0 0] assert { [#"mystring.adb" 77 0 0] ([#"mystring.adb" 77 0 0] ( [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:27:4] [@GP_Id:87] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:77:16:instantiated:main.adb:27:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__j.j.int__content) /\ (Main__lines__substring__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___603 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
             (Array__Int__Standard__character.get(temp___603) ((  assert {  ([#"mystring.adb" 77 0 0] ( [@GP_Id:86] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:77:28:instantiated:main.adb:27:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:77:28:instantiated:main.adb:27:4] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
             Main__lines__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___606.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:78:10:instantiated:main.adb:27:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:15:instantiated:main.adb:27:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:12:instantiated:main.adb:27:4] ([#"mystring.adb" 78 0 0] [#"mystring.adb" 78 0 0] (Main__lines__substring__j.j.int__content <- ( ([#"mystring.adb" 78 0 0] ( [@comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Id:88] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:78:17:instantiated:main.adb:27:4] [@GP_Shape:L_4_while__j_assign__add] (Standard__integer.range_check_((Main__lines__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:27 *)
          ;
          (if ((Main__lines__substring__L_4__i.i.int__content = temp___602)) then (
            raise Main__lines__substring__L_4.L_4));
          ([#"mystring.adb" 75 0 0] [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( (Main__lines__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_611 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:90] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:27:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@GP_Id:89] [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:27:4] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:80:14:instantiated:main.adb:27:4] ([#"mystring.adb" 80 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:80:7:instantiated:main.adb:27:4] ([#"mystring.adb" 80 0 0] ( [#"mystring.adb" 80 0 0] (main__lines__substring__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 80 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__substring__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 28 0 0] ( [@GP_Sloc:mystring.ads:28:51:instantiated:main.adb:27:4] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:28:51:instantiated:main.adb:27:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__cmp__add] [@GP_Id:92] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  main__lines__substring__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:33 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__get_line__m as Main__lines__get_line__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__mystring__T16b as Main__lines__mystring__T16b
 use        Main__lines__mystring__T16b__rep as Main__lines__mystring__T16b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__get_line__m___axiom as Main__lines__get_line__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T16b___axiom as Main__lines__mystring__T16b___axiom

 let def [#"mystring.ads" 33 0 0][@GP_Subp:mystring.ads:33] 
   (__void_param : unit)
  requires { [#"mystring.ads" 33 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:33 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 33 0 0] assume { [#"mystring.ads" 33 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:33 instantiated at main.adb:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:33 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 33 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:33 instantiated at main.adb:27 *)
  ;
  [#"mystring.ads" 33 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:27:4] ([#"mystring.adb" 85 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:27:4] ([#"mystring.adb" 85 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 85 0 0] assert { [#"mystring.adb" 85 0 0] ([#"mystring.adb" 85 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] [@GP_Id:94] [@GP_Sloc:mystring.adb:85:44:instantiated:main.adb:27:4] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:85:44:instantiated:main.adb:27:4:VC_RANGE_CHECK] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Main__lines__mystring__T16b__rep.to_rep({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___616 [@mlw:proxy_symbol] [@introduced] = (let temp___615 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___615.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
       ()))
       in () end ;
      { ( temp___615 ) with Main__lines__mystring.__split_fields = { ( temp___615.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___614 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___614))) ((Standard__string.first(temp___614))) (Main__lines__TmystringstrD1.first))))
       } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___616.Main__lines__mystring.__split_fields ))))
     ;
     (let temp___618 [@mlw:proxy_symbol] [@introduced] = (let temp___617 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___617.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
       ()))
       in () end ;
      { ( temp___617 ) with Main__lines__mystring.__split_fields = { ( temp___617.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T16b__rep.of_rep(([#"mystring.adb" 85 0 0] ( [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:85:60:instantiated:main.adb:27:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:85:60:instantiated:main.adb:27:4] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:95] (Main__lines__mystring__T16b.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___618.Main__lines__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
