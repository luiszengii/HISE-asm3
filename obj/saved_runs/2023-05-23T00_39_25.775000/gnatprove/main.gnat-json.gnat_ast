(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
  
  use        Standard__natural
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__natural.natural) requires { True }
    ensures  { True } returns int = (Standard__natural.natural'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__natural.natural,
    predicate in_range = Standard__natural.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
  
  use        Standard__positive
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__positive.positive) requires { True }
    ensures  { True } returns int = (Standard__positive.positive'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__positive.positive,
    predicate in_range = Standard__positive.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module for axiomatizing the record theory associated to type "database" defined at variablestore.ads:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__database__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  type __rep  
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns bool

end

(* Module for axiomatizing type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__database
  
  use export Variablestore__database__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type database  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   user_eq (a : database b : database) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns database
  
  type database__ref  = { mutable database__content : database }
  
  function   database__ref_database__content__projection (a : database__ref)
    requires {  } ensures  {  } returns database = a.database__content
  
  meta model_projection function database__ref_database__content__projection
  
  meta inline:no function database__ref_database__content__projection
  
  function   database__havoc (x : database__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining a ref holding the value of variable "db" defined at main.adb:18, created in Gnat2Why.Decls.Translate_Variable *)
module Main__db
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__database
  
  val db  [sloc:main.adb:18]: Variablestore__database.database

end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t13s  = <range 0 1024>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1024
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t13s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t13s__ref  = { mutable t13s__content : t13s }
  
  function   t13s__ref_t13s__content__projection (a : t13s__ref) requires
    {  } ensures  {  } returns t13s = a.t13s__content
  
  meta model_projection function t13s__ref_t13s__content__projection
  
  meta inline:no function t13s__ref_t13s__content__projection
  
  function   t13s__havoc (x : t13s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s__rep
  
  use        Variablestore__variables__mystring__T13s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Variablestore__variables__mystring__T13s.t13s)
    requires { True } ensures  { True } returns
    int = (Variablestore__variables__mystring__T13s.t13s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Variablestore__variables__mystring__T13s.t13s,
    predicate in_range = Variablestore__variables__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 1024
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__variables__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  use        Variablestore__variables__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [model_trace:.44565]
                           [name:Length]rec__variablestore__variables__mystring__length : Variablestore__variables__mystring__T13s.t13s;
                           [name:Str]
                           [model_trace:.44569]rec__variablestore__variables__mystring__str : Array__Int__Standard__character.map }
  
  function [model_trace:.44565] [name:Length] 
    __split_fields_rec__variablestore__variables__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Variablestore__variables__mystring__T13s.t13s = a.rec__variablestore__variables__mystring__length
  
  meta model_projection function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  meta inline:no function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  function [name:Str] [model_trace:.44569] 
    __split_fields_rec__variablestore__variables__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__variablestore__variables__mystring__str
  
  meta model_projection function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  meta inline:no function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   variablestore__variables__mystring__length__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__variablestore__variables__mystring__length_ (a : __rep)
    requires { (variablestore__variables__mystring__length__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__variablestore__variables__mystring__length) }
    returns Variablestore__variables__mystring__T13s.t13s
  
  function   variablestore__variables__mystring__str__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__variablestore__variables__mystring__str_ (a : __rep)
    requires { (variablestore__variables__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__variablestore__variables__mystring__str) }
    returns Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Variablestore__variables__mystring__T13s__rep.to_rep
                a.__split_fields.rec__variablestore__variables__mystring__length)
               = (Variablestore__variables__mystring__T13s__rep.to_rep
                    b.__split_fields.rec__variablestore__variables__mystring__length))
              /\
              (Variablestore__variables__mystringstr.bool_eq
                 a.__split_fields.rec__variablestore__variables__mystring__str
                 b.__split_fields.rec__variablestore__variables__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variable
  
  use export Variablestore__variables__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type variable  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   variablestore__variables__mystring__length__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__length__last__bit ()
    requires {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__length__position () requires
    {  } ensures  {  } returns int
  
  axiom variablestore__variables__mystring__length__first__bit_axiom : 
  ((variablestore__variables__mystring__length__first__bit ) >= 0)
  
  axiom variablestore__variables__mystring__length__last__bit_axiom : 
  ((variablestore__variables__mystring__length__last__bit )
     > (variablestore__variables__mystring__length__first__bit ))
  
  axiom variablestore__variables__mystring__length__position_axiom : 
  ((variablestore__variables__mystring__length__position ) >= 0)
  
  function   variablestore__variables__mystring__str__first__bit () requires
    {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__str__last__bit () requires
    {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__str__position () requires
    {  } ensures  {  } returns int
  
  axiom variablestore__variables__mystring__str__first__bit_axiom : ((variablestore__variables__mystring__str__first__bit
                                                                    ) >= 0)
  
  axiom variablestore__variables__mystring__str__last__bit_axiom : ((variablestore__variables__mystring__str__last__bit
                                                                    )
                                                                    > (
                                                                    variablestore__variables__mystring__str__first__bit
                                                                    ))
  
  axiom variablestore__variables__mystring__str__position_axiom : ((variablestore__variables__mystring__str__position
                                                                    ) >= 0)
  
  function   user_eq (a : variable b : variable) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns variable
  
  type variable__ref  = { mutable variable__content : variable }
  
  function   variable__ref_variable__content__projection (a : variable__ref)
    requires {  } ensures  {  } returns variable = a.variable__content
  
  meta model_projection function variable__ref_variable__content__projection
  
  meta inline:no function variable__ref_variable__content__projection
  
  function   variable__havoc (x : variable__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for possibly declaring a logic function for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__from_string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Variablestore__variable
  
  function   from_string (s : Standard__string.string__) requires { True }
    ensures  { True } returns Variablestore__variable.variable
  
  function   from_string__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_163) : Variablestore__variable.variable
    s : Standard__string.string__) requires { True } ensures  { True }
    returns bool

end

(* Module giving axioms for type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variable___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variable
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_237) : Variablestore__variable.variable
    ([mlw:proxy_symbol] [introduced] temp___is_init_233) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_234) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_235) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_236) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_239) : Variablestore__variable.variable
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_240) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__from_string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__string
  use        Variablestore__variable
  use        Variablestore__from_string
  use        Variablestore__variable___axiom
  
  function   from_string (s : Standard__string.string__) requires
    { ([GP_Pretty_Ada:45144] ((Standard__string.length s) <= 1024)) }
    ensures 
    { ((result = (Variablestore__from_string.from_string s)) /\
         (Variablestore__from_string.from_string__function_guard result s) /\
         (Variablestore__variable___axiom.dynamic_invariant result True False
            True True)) } returns Variablestore__variable.variable

end

(* Module for defining a ref holding the value of variable "var" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Main__var
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variable
  
  val var__split_fields [model_trace:869] [model_projected]
  [name:VAR] [sloc:main.adb:19]: Variablestore__variable.__split_fields

end

(* Module for defining a ref holding the value of variable "master_pin" defined at main.adb:21, created in Gnat2Why.Decls.Translate_Variable *)
module Main__master_pin
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val master_pin [model_projected] [name:MASTER_PIN]
  [model_trace:879] [sloc:main.adb:21]: int

end

(* Module for defining a ref holding the value of variable "enter_pin" defined at main.adb:23, created in Gnat2Why.Decls.Translate_Variable *)
module Main__enter_pin
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val enter_pin [model_projected] [model_trace:884]
  [name:ENTER_PIN] [sloc:main.adb:23]: int

end

(* Module for axiomatizing type "T14b" defined at mystring.ads:38 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T14b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t14b  = <range 0 2048>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2048
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t14b,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t14b__ref  = { mutable t14b__content : t14b }
  
  function   t14b__ref_t14b__content__projection (a : t14b__ref) requires
    {  } ensures  {  } returns t14b = a.t14b__content
  
  meta model_projection function t14b__ref_t14b__content__projection
  
  meta inline:no function t14b__ref_t14b__content__projection
  
  function   t14b__havoc (x : t14b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T14b" defined at mystring.ads:38 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T14b__rep
  
  use        Main__lines__mystring__T14b
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Main__lines__mystring__T14b.t14b) requires { True }
    ensures  { True } returns int = (Main__lines__mystring__T14b.t14b'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Main__lines__mystring__T14b.t14b,
    predicate in_range = Main__lines__mystring__T14b.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 2048
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at main.adb:24, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring__T14b
  use        Main__lines__mystring__T14b__rep
  use        Main__lines__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [model_trace:.69175]
                           [name:Length]rec__main__lines__mystring__length : Main__lines__mystring__T14b.t14b;
                           [model_trace:.69179]
                           [name:Str]rec__main__lines__mystring__str : Array__Int__Standard__character.map }
  
  function [model_trace:.69175] [name:Length] 
    __split_fields_rec__main__lines__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Main__lines__mystring__T14b.t14b = a.rec__main__lines__mystring__length
  
  meta model_projection function __split_fields_rec__main__lines__mystring__length__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__length__projection
  
  function [model_trace:.69179] [name:Str] 
    __split_fields_rec__main__lines__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__main__lines__mystring__str
  
  meta model_projection function __split_fields_rec__main__lines__mystring__str__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   main__lines__mystring__length__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__length_ (a : __rep) requires
    { (main__lines__mystring__length__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__length) }
    returns Main__lines__mystring__T14b.t14b
  
  function   main__lines__mystring__str__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__str_ (a : __rep) requires
    { (main__lines__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__str) } returns
    Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Main__lines__mystring__T14b__rep.to_rep
                a.__split_fields.rec__main__lines__mystring__length)
               = (Main__lines__mystring__T14b__rep.to_rep
                    b.__split_fields.rec__main__lines__mystring__length)) /\
              (Main__lines__mystringstr.bool_eq
                 a.__split_fields.rec__main__lines__mystring__str
                 b.__split_fields.rec__main__lines__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
  
  use export Main__lines__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type mystring  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   main__lines__mystring__length__first__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__last__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__position () requires {  }
    ensures  {  } returns int
  
  axiom main__lines__mystring__length__first__bit_axiom : ((main__lines__mystring__length__first__bit
                                                              ) >= 0)
  
  axiom main__lines__mystring__length__last__bit_axiom : ((main__lines__mystring__length__last__bit
                                                             )
                                                            > (main__lines__mystring__length__first__bit
                                                                 ))
  
  axiom main__lines__mystring__length__position_axiom : ((main__lines__mystring__length__position
                                                            ) >= 0)
  
  function   main__lines__mystring__str__first__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__last__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__position () requires {  } ensures 
    {  } returns int
  
  axiom main__lines__mystring__str__first__bit_axiom : ((main__lines__mystring__str__first__bit
                                                           ) >= 0)
  
  axiom main__lines__mystring__str__last__bit_axiom : ((main__lines__mystring__str__last__bit
                                                          )
                                                         > (main__lines__mystring__str__first__bit
                                                              ))
  
  axiom main__lines__mystring__str__position_axiom : ((main__lines__mystring__str__position
                                                         ) >= 0)
  
  function   user_eq (a : mystring b : mystring) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns mystring
  
  type mystring__ref  = { mutable mystring__content : mystring }
  
  function   mystring__ref_mystring__content__2__projection
    (a : mystring__ref) requires {  } ensures  {  } returns
    mystring = a.mystring__content
  
  meta model_projection function mystring__ref_mystring__content__2__projection
  
  meta inline:no function mystring__ref_mystring__content__2__projection
  
  function   mystring__havoc (x : mystring__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:8 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__to_string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Main__lines__mystring
  
  function   to_string (m : Main__lines__mystring.mystring) requires { True }
    ensures  { True } returns Standard__string.string__
  
  function   to_string__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_165) : Standard__string.string__
    m : Main__lines__mystring.mystring) requires { True } ensures  { True }
    returns bool

end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__length
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   length (m : Main__lines__mystring.mystring) requires { True }
    ensures  { True } returns int
  
  function   length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_164) : int
    m : Main__lines__mystring.mystring) requires { True } ensures  { True }
    returns bool

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_268) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___is_init_264) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_265) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_266) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_267) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_270) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_271) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:8 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__to_string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__string
  use        Standard__string___axiom
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__to_string
  use        Main__lines__mystring___axiom
  
  function   to_string (m : Main__lines__mystring.mystring) requires { True }
    ensures 
    { ((result = (Main__lines__to_string.to_string m)) /\
         (Main__lines__to_string.to_string__function_guard result m) /\
         ((Standard__string___axiom.dynamic_invariant result True False True
             True) /\
            ((([GP_Pretty_Ada:69215] ((Standard__string.length result)
                                        = (epsilon ([mlw:proxy_symbol]
                                          [introduced] temp___result_276) : int {
                                          ((([mlw:proxy_symbol]
                                              [introduced] temp___result_276)
                                              = (Main__lines__length.length
                                                   ( m))) /\
                                             (Main__lines__length.length__function_guard
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___result_276)
                                                ( m)))}))) /\
                ([GP_Pretty_Ada:69222] ((Standard__string.first result) = 1)))
               /\
               ([GP_Pretty_Ada:69227] ((Standard__string.last result)
                                         = (epsilon ([mlw:proxy_symbol]
                                           [introduced] temp___result_277) : int {
                                           ((([mlw:proxy_symbol]
                                               [introduced] temp___result_277)
                                               = (Main__lines__length.length
                                                    ( m))) /\
                                              (Main__lines__length.length__function_guard
                                                 ([mlw:proxy_symbol]
                                                 [introduced] temp___result_277)
                                                 ( m)))})))))) } returns
    Standard__string.string__
  
  axiom to_string__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:12 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__from_string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  use        Main__lines__mystring
  
  function   from_string (s : Standard__string.string__) requires { True }
    ensures  { True } returns Main__lines__mystring.mystring
  
  function   from_string__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_166) : Main__lines__mystring.mystring
    s : Standard__string.string__) requires { True } ensures  { True }
    returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:12 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__from_string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__string
  use        Standard__string___axiom
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__from_string
  use        Main__lines__mystring___axiom
  
  function   from_string (s : Standard__string.string__) requires
    { ([GP_Pretty_Ada:69433] ((Standard__string.length s) <= 2048)) }
    ensures 
    { ((result = (Main__lines__from_string.from_string s)) /\
         (Main__lines__from_string.from_string__function_guard result s) /\
         ((Main__lines__mystring___axiom.dynamic_invariant result True False
             True True) /\
            ([GP_Pretty_Ada:69447] ((epsilon ([mlw:proxy_symbol]
                                    [introduced] temp___result_280) : int {
                                    ((([mlw:proxy_symbol]
                                        [introduced] temp___result_280)
                                        = (Main__lines__length.length
                                             ( result))) /\
                                       (Main__lines__length.length__function_guard
                                          ([mlw:proxy_symbol]
                                          [introduced] temp___result_280)
                                          ( result)))})
                                      = (Standard__string.length s))))) }
    returns Main__lines__mystring.mystring
  
  axiom from_string__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:30 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   get (m : Main__lines__mystring.mystring index : int) requires
    { True } ensures  { True } returns int
  
  function   get__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_168) : int
    m : Main__lines__mystring.mystring index : int) requires { True }
    ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:18 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__equal
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   equal
    (m1 : Main__lines__mystring.mystring m2 : Main__lines__mystring.mystring)
    requires { True } ensures  { True } returns bool
  
  function   equal__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_169) : bool
    m1 : Main__lines__mystring.mystring m2 : Main__lines__mystring.mystring)
    requires { True } ensures  { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:18 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__equal___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__get
  use        Main__lines__equal
  
  function   equal
    (m1 : Main__lines__mystring.mystring m2 : Main__lines__mystring.mystring)
    requires { True } ensures 
    { ((result = (Main__lines__equal.equal m1 m2)) /\
         (Main__lines__equal.equal__function_guard result m1 m2) /\
         (if (result = True) then
         (([GP_Pretty_Ada:69279] ((epsilon ([mlw:proxy_symbol]
                                  [introduced] temp___result_286) : int {
                                  ((([mlw:proxy_symbol]
                                      [introduced] temp___result_286)
                                      = (Main__lines__length.length ( m1)))
                                     /\
                                     (Main__lines__length.length__function_guard
                                        ([mlw:proxy_symbol]
                                        [introduced] temp___result_286) 
                                        ( m1)))})
                                    = (epsilon ([mlw:proxy_symbol]
                                      [introduced] temp___result_287) : int {
                                      ((([mlw:proxy_symbol]
                                          [introduced] temp___result_287)
                                          = (Main__lines__length.length ( m2)))
                                         /\
                                         (Main__lines__length.length__function_guard
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___result_287)
                                            ( m2)))}))) /\
            --pp_universal_quantif NOT IMPLEMENTED)
          else ([GP_Pretty_Ada:69607] True))) } returns bool

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:26 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__substring
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   substring
    (m : Main__lines__mystring.mystring from : int to__ : int) requires
    { True } ensures  { True } returns Main__lines__mystring.mystring
  
  function   substring__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_170) : Main__lines__mystring.mystring
    m : Main__lines__mystring.mystring from : int to__ : int) requires
    { True } ensures  { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:26 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__substring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive___axiom
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__substring
  use        Main__lines__mystring___axiom
  
  function   substring
    (m : Main__lines__mystring.mystring from : int to__ : int) requires
    { (([GP_Pretty_Ada:69329] (from <= to__)) /\
         ([GP_Pretty_Ada:69332] (to__
                                   <= (epsilon ([mlw:proxy_symbol]
                                      [introduced] temp___result_291) : int {
                                      ((([mlw:proxy_symbol]
                                          [introduced] temp___result_291)
                                          = (Main__lines__length.length ( m)))
                                         /\
                                         (Main__lines__length.length__function_guard
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___result_291)
                                            ( m)))})))) } ensures 
    { ((result = (Main__lines__substring.substring m from to__)) /\
         (Main__lines__substring.substring__function_guard result m from to__)
         /\
         ((Main__lines__mystring___axiom.dynamic_invariant result True False
             True True) /\
            ([GP_Pretty_Ada:69532] ((epsilon ([mlw:proxy_symbol]
                                    [introduced] temp___result_292) : int {
                                    ((([mlw:proxy_symbol]
                                        [introduced] temp___result_292)
                                        = (Main__lines__length.length
                                             ( result))) /\
                                       (Main__lines__length.length__function_guard
                                          ([mlw:proxy_symbol]
                                          [introduced] temp___result_292)
                                          ( result)))}) = ((to__ - from) + 1))))) }
    returns Main__lines__mystring.mystring
  
  axiom substring__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val file_system  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_err  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:33 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__get_line___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  use        Main__lines__mystring___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   get_line
    (m__split_fields : Main__lines__mystring.__split_fields__ref) requires
    { True } ensures 
    { (Main__lines__mystring___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for defining a ref holding the value of variable "p" defined at main.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module Main__p
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  val p__split_fields [model_trace:896] [model_projected]
  [name:P] [sloc:main.adb:26]: Main__lines__mystring.__split_fields

end

(* Module for defining a ref holding the value of variable "current_state" defined at main.adb:30, created in Gnat2Why.Decls.Translate_Variable *)
module Main__current_state
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_state [model_trace:907] [model_projected]
  [name:Current_State] [sloc:main.adb:30]: int

end

(* Module for defining a ref holding the value of variable "command" defined at main.adb:32, created in Gnat2Why.Decls.Translate_Variable *)
module Main__command
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  val command__split_fields [name:COMMAND] [model_projected]
  [model_trace:911] [sloc:main.adb:32]: Main__lines__mystring.__split_fields

end

(* Module for defining a ref holding the value of variable "number" defined at main.adb:34, created in Gnat2Why.Decls.Translate_Variable *)
module Main__number
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val number [model_projected] [model_trace:921]
  [name:NUMBER] [sloc:main.adb:34]: int

end

(* Module for axiomatizing type "T13s" defined at stack.ads:35 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__stack__T13s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t13s  = <range 0 512>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 512
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t13s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t13s__ref  = { mutable t13s__content : t13s }
  
  function   t13s__ref_t13s__content__2__projection (a : t13s__ref) requires
    {  } ensures  {  } returns t13s = a.t13s__content
  
  meta model_projection function t13s__ref_t13s__content__2__projection
  
  meta inline:no function t13s__ref_t13s__content__2__projection
  
  function   t13s__havoc (x : t13s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T13s" defined at stack.ads:35 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__stack__T13s__rep
  
  use        Operations__operandstack__stack__T13s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Operations__operandstack__stack__T13s.t13s) requires
    { True } ensures  { True } returns
    int = (Operations__operandstack__stack__T13s.t13s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Operations__operandstack__stack__T13s.t13s,
    predicate in_range = Operations__operandstack__stack__T13s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "TstoragearrayB" defined at stack.ads:32 instantiated at operations.ads:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "storagearray" defined at stack.ads:32 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__storagearray
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Array__Int__Standard__integer
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 512
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__integer.map,
    function array_bool_eq = Array__Int__Standard__integer.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack" defined at stack.ads:34 instantiated at operations.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Operations__operandstack__stack__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack__T13s
  use        Operations__operandstack__stack__T13s__rep
  use        Operations__operandstack__storagearray
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  
  type __split_fields  = { [name:size]
                           [model_trace:.68718]rec__operations__operandstack__stack__size : Operations__operandstack__stack__T13s.t13s;
                           [model_trace:.68722]
                           [name:storage]rec__operations__operandstack__stack__storage : Array__Int__Standard__integer.map }
  
  function [name:size] [model_trace:.68718] 
    __split_fields_rec__operations__operandstack__stack__size__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Operations__operandstack__stack__T13s.t13s = a.rec__operations__operandstack__stack__size
  
  meta model_projection function __split_fields_rec__operations__operandstack__stack__size__projection
  
  meta inline:no function __split_fields_rec__operations__operandstack__stack__size__projection
  
  function [model_trace:.68722] [name:storage] 
    __split_fields_rec__operations__operandstack__stack__storage__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__integer.map = a.rec__operations__operandstack__stack__storage
  
  meta model_projection function __split_fields_rec__operations__operandstack__stack__storage__projection
  
  meta inline:no function __split_fields_rec__operations__operandstack__stack__storage__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__3__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__3__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__3__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__3__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__3__projection
  
  meta inline:no function __rep___split_fields__3__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   operations__operandstack__stack__size__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__operations__operandstack__stack__size_ (a : __rep) requires
    { (operations__operandstack__stack__size__pred a) } ensures 
    { (result = a.__split_fields.rec__operations__operandstack__stack__size) }
    returns Operations__operandstack__stack__T13s.t13s
  
  function   operations__operandstack__stack__storage__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__operations__operandstack__stack__storage_ (a : __rep)
    requires { (operations__operandstack__stack__storage__pred a) } ensures 
    { (result
         = a.__split_fields.rec__operations__operandstack__stack__storage) }
    returns Array__Int__Standard__integer.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Operations__operandstack__stack__T13s__rep.to_rep
                a.__split_fields.rec__operations__operandstack__stack__size)
               = (Operations__operandstack__stack__T13s__rep.to_rep
                    b.__split_fields.rec__operations__operandstack__stack__size))
              /\
              (Operations__operandstack__storagearray.bool_eq
                 a.__split_fields.rec__operations__operandstack__stack__storage
                 b.__split_fields.rec__operations__operandstack__stack__storage))
           then True  else False)

end

(* Module for axiomatizing type "stack" defined at stack.ads:34 instantiated at operations.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Operations__operandstack__stack
  
  use export Operations__operandstack__stack__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type stack  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   operations__operandstack__stack__size__first__bit () requires
    {  } ensures  {  } returns int
  
  function   operations__operandstack__stack__size__last__bit () requires
    {  } ensures  {  } returns int
  
  function   operations__operandstack__stack__size__position () requires {  }
    ensures  {  } returns int
  
  axiom operations__operandstack__stack__size__first__bit_axiom : ((operations__operandstack__stack__size__first__bit
                                                                    ) >= 0)
  
  axiom operations__operandstack__stack__size__last__bit_axiom : ((operations__operandstack__stack__size__last__bit
                                                                    )
                                                                    > (
                                                                    operations__operandstack__stack__size__first__bit
                                                                    ))
  
  axiom operations__operandstack__stack__size__position_axiom : ((operations__operandstack__stack__size__position
                                                                    ) >= 0)
  
  function   operations__operandstack__stack__storage__first__bit () requires
    {  } ensures  {  } returns int
  
  function   operations__operandstack__stack__storage__last__bit () requires
    {  } ensures  {  } returns int
  
  function   operations__operandstack__stack__storage__position () requires
    {  } ensures  {  } returns int
  
  axiom operations__operandstack__stack__storage__first__bit_axiom : 
  ((operations__operandstack__stack__storage__first__bit ) >= 0)
  
  axiom operations__operandstack__stack__storage__last__bit_axiom : ((operations__operandstack__stack__storage__last__bit
                                                                    )
                                                                    > (operations__operandstack__stack__storage__first__bit
                                                                    ))
  
  axiom operations__operandstack__stack__storage__position_axiom : ((operations__operandstack__stack__storage__position
                                                                    ) >= 0)
  
  function   user_eq (a : stack b : stack) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns stack
  
  type stack__ref  = { mutable stack__content : stack }
  
  function   stack__ref_stack__content__projection (a : stack__ref) requires
    {  } ensures  {  } returns stack = a.stack__content
  
  meta model_projection function stack__ref_stack__content__projection
  
  meta inline:no function stack__ref_stack__content__projection
  
  function   stack__havoc (x : stack__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining a ref holding the value of variable "opstack" defined at main.adb:37, created in Gnat2Why.Decls.Translate_Variable *)
module Main__opstack
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  
  val opstack__split_fields [name:OpStack] [model_projected]
  [model_trace:925] [sloc:main.adb:37]: Operations__operandstack__stack.__split_fields

end

(* Module giving axioms for type "stack" defined at stack.ads:34 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__stack___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_337) : Operations__operandstack__stack.stack
    ([mlw:proxy_symbol] [introduced] temp___is_init_333) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_334) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_335) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_336) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_339) : Operations__operandstack__stack.stack
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_340) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for possibly declaring a logic function for "size" defined at stack.ads:13 instantiated at operations.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Operations__operandstack__size
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  
  function   size (s : Operations__operandstack__stack.stack) requires
    { True } ensures  { True } returns int
  
  function   size__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_172) : int
    s : Operations__operandstack__stack.stack) requires { True } ensures 
    { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at stack.ads:10 instantiated at operations.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__operandstack__init___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  use        Operations__operandstack__size
  
  function   init
    (s__split_fields : Operations__operandstack__stack.__split_fields__ref)
    requires { True } ensures 
    { (([GP_Pretty_Ada:68932] ((epsilon ([mlw:proxy_symbol]
                               [introduced] temp___result_347) : int {
                               ((([mlw:proxy_symbol]
                                   [introduced] temp___result_347)
                                   = (Operations__operandstack__size.size
                                        ( --pp_record_aggregate NOT IMPLEMENTED)))
                                  /\
                                  (Operations__operandstack__size.size__function_guard
                                     ([mlw:proxy_symbol]
                                     [introduced] temp___result_347)
                                     ( --pp_record_aggregate NOT IMPLEMENTED)))})
                                 = 0)) /\
         (Operations__operandstack__stack___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module giving axioms for type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__database___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__database
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_208) : Variablestore__database.database
    ([mlw:proxy_symbol] [introduced] temp___is_init_204) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_206) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_207) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_209) : Variablestore__database.database
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_210) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at variablestore.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__init___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__database
  use        Variablestore__database___axiom
  
  function   init (d : Variablestore__database.database__ref) requires
    { True } ensures 
    { (Variablestore__database___axiom.dynamic_invariant !d True True True
         True) } returns unit

end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   line_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   line_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   page_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   page_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_162) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-textio.ads:463, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put__4___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:14390] (--pp_tagged NOT IMPLEMENTED
                                 = (Ada___ada__text_io__line_length__2.line_length
                                      !Ada___ada__text_io__file_system.file_system
                                      !Ada___ada__text_io__standard_in.standard_in
                                      !Ada___ada__text_io__standard_out.standard_out
                                      !Ada___ada__text_io__standard_err.standard_err
                                      !Ada___ada__text_io__current_in.current_in
                                      !Ada___ada__text_io__current_out.current_out
                                      !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:14396] (--pp_tagged NOT IMPLEMENTED
                                   = (Ada___ada__text_io__page_length__2.page_length
                                        !Ada___ada__text_io__file_system.file_system
                                        !Ada___ada__text_io__standard_in.standard_in
                                        !Ada___ada__text_io__standard_out.standard_out
                                        !Ada___ada__text_io__standard_err.standard_err
                                        !Ada___ada__text_io__current_in.current_in
                                        !Ada___ada__text_io__current_out.current_out
                                        !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function   from_string (s : Standard__string.string__) requires { True }
    ensures  { True } returns int
  
  function   from_string__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_173) : int
    s : Standard__string.string__) requires { True } ensures  { True }
    returns bool

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type pin  = <range 0 9999>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 9999
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = pin,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type pin__ref  = { mutable pin__content : pin }
  
  function   pin__ref_pin__content__projection (a : pin__ref) requires {  }
    ensures  {  } returns pin = a.pin__content
  
  meta model_projection function pin__ref_pin__content__projection
  
  meta inline:no function pin__ref_pin__content__projection
  
  function   pin__havoc (x : pin__ref) requires {  } ensures  {  } returns
    unit

end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pin__pin
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_251) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_247) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_248) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_249) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_250) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_247) = True) \/
          (Pin__pin.first <= Pin__pin.last))
       then
       (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last
          ([mlw:proxy_symbol] [introduced] temp___expr_251))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_252) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_253) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__string___axiom
  use        Pin__from_string
  use        Pin__pin___axiom
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   from_string (s : Standard__string.string__) requires
    { (([GP_Pretty_Ada:12299] ((Standard__string.length s) = 4)) /\
         --pp_universal_quantif NOT IMPLEMENTED) } ensures 
    { ((result = (Pin__from_string.from_string s)) /\
         (Pin__from_string.from_string__function_guard result s) /\
         (Pin__pin___axiom.dynamic_invariant result True False True True)) }
    returns int
  
  axiom from_string__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Standard__positive
  use        Standard__positive__rep
  
  type __split_fields  = { [model_trace:.10694]
                           [name:Start]rec__mystringtokeniser__tokenextent__start : Standard__positive.positive;
                           [model_trace:.10699]
                           [name:Length]rec__mystringtokeniser__tokenextent__length : Standard__natural.natural }
  
  function [model_trace:.10694] [name:Start] 
    __split_fields_rec__mystringtokeniser__tokenextent__start__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Standard__positive.positive = a.rec__mystringtokeniser__tokenextent__start
  
  meta model_projection function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
  
  meta inline:no function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
  
  function [model_trace:.10699] [name:Length] 
    __split_fields_rec__mystringtokeniser__tokenextent__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Standard__natural.natural = a.rec__mystringtokeniser__tokenextent__length
  
  meta model_projection function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
  
  meta inline:no function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__4__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__4__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__4__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__4__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__4__projection
  
  meta inline:no function __rep___split_fields__4__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   mystringtokeniser__tokenextent__start__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__mystringtokeniser__tokenextent__start_ (a : __rep) requires
    { (mystringtokeniser__tokenextent__start__pred a) } ensures 
    { (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
    returns Standard__positive.positive
  
  function   mystringtokeniser__tokenextent__length__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__mystringtokeniser__tokenextent__length_ (a : __rep)
    requires { (mystringtokeniser__tokenextent__length__pred a) } ensures 
    { (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
    returns Standard__natural.natural
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Standard__positive__rep.to_rep
                a.__split_fields.rec__mystringtokeniser__tokenextent__start)
               = (Standard__positive__rep.to_rep
                    b.__split_fields.rec__mystringtokeniser__tokenextent__start))
              /\
              ((Standard__natural__rep.to_rep
                  a.__split_fields.rec__mystringtokeniser__tokenextent__length)
                 = (Standard__natural__rep.to_rep
                      b.__split_fields.rec__mystringtokeniser__tokenextent__length)))
           then True  else False)

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
  
  use export Mystringtokeniser__tokenextent__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tokenextent  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   mystringtokeniser__tokenextent__start__first__bit () requires
    {  } ensures  {  } returns int
  
  function   mystringtokeniser__tokenextent__start__last__bit () requires
    {  } ensures  {  } returns int
  
  function   mystringtokeniser__tokenextent__start__position () requires {  }
    ensures  {  } returns int
  
  axiom mystringtokeniser__tokenextent__start__first__bit_axiom : ((mystringtokeniser__tokenextent__start__first__bit
                                                                    ) >= 0)
  
  axiom mystringtokeniser__tokenextent__start__last__bit_axiom : ((mystringtokeniser__tokenextent__start__last__bit
                                                                    )
                                                                    > (
                                                                    mystringtokeniser__tokenextent__start__first__bit
                                                                    ))
  
  axiom mystringtokeniser__tokenextent__start__position_axiom : ((mystringtokeniser__tokenextent__start__position
                                                                    ) >= 0)
  
  function   mystringtokeniser__tokenextent__length__first__bit () requires
    {  } ensures  {  } returns int
  
  function   mystringtokeniser__tokenextent__length__last__bit () requires
    {  } ensures  {  } returns int
  
  function   mystringtokeniser__tokenextent__length__position () requires
    {  } ensures  {  } returns int
  
  axiom mystringtokeniser__tokenextent__length__first__bit_axiom : ((mystringtokeniser__tokenextent__length__first__bit
                                                                    ) >= 0)
  
  axiom mystringtokeniser__tokenextent__length__last__bit_axiom : ((mystringtokeniser__tokenextent__length__last__bit
                                                                    )
                                                                    > (
                                                                    mystringtokeniser__tokenextent__length__first__bit
                                                                    ))
  
  axiom mystringtokeniser__tokenextent__length__position_axiom : ((mystringtokeniser__tokenextent__length__position
                                                                    ) >= 0)
  
  function   user_eq (a : tokenextent b : tokenextent) requires { True }
    ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns tokenextent
  
  type tokenextent__ref  = { mutable tokenextent__content : tokenextent }
  
  function   tokenextent__ref_tokenextent__content__projection
    (a : tokenextent__ref) requires {  } ensures  {  } returns
    tokenextent = a.tokenextent__content
  
  meta model_projection function tokenextent__ref_tokenextent__content__projection
  
  meta inline:no function tokenextent__ref_tokenextent__content__projection
  
  function   tokenextent__havoc (x : tokenextent__ref) requires {  } ensures 
    {  } returns unit

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Mystringtokeniser__tokenextent
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:63, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_2__t
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Mystringtokeniser__tokenextent
  
  val t [model_projected] [model_trace:1012]
  [name:T] [sloc:main.adb:63]: Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:64, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_2__numtokens
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val numtokens [model_trace:1033] [model_projected]
  [name:NumTokens] [sloc:main.adb:64]: int

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__integer__rep
  use        Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Mystringtokeniser__tokenextent.map,
    function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type tokenarray  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type tokenarray__ref  = { mutable tokenarray__content : tokenarray }
  
  function   tokenarray__ref_tokenarray__content__projection
    (a : tokenarray__ref) requires {  } ensures  {  } returns
    tokenarray = a.tokenarray__content
  
  meta model_projection function tokenarray__ref_tokenarray__content__projection
  
  meta inline:no function tokenarray__ref_tokenarray__content__projection
  
  function   tokenarray__havoc (x : tokenarray__ref) requires {  } ensures 
    {  } returns unit

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Mystringtokeniser__tokenarray
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_365) : Mystringtokeniser__tokenarray.tokenarray
    ([mlw:proxy_symbol] [introduced] temp___is_init_361) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_362) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_363) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_364) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_362) then
       True  else
       (Mystringtokeniser__tokenarray.dynamic_property
          Standard__positive.first Standard__positive.last
          (Mystringtokeniser__tokenarray.first ([mlw:proxy_symbol]
             [introduced] temp___expr_365))
          (Mystringtokeniser__tokenarray.last ([mlw:proxy_symbol]
             [introduced] temp___expr_365))))

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Integer
  use        Standard__integer
  use        Standard__natural
  use        Standard__natural___axiom
  use        Standard__natural__rep
  use        Standard__positive
  use        Standard__positive__rep
  use        Standard__string
  use        Standard__integer__rep
  use        Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Mystringtokeniser__tokenarray
  use        Mystringtokeniser__tokenarray___axiom
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  
  function   tokenise
    (s : Standard__string.string__
    tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref
    tokens__first : Standard__integer.integer
    tokens__last : Standard__integer.integer count : int__ref) requires
    { ((if ((Standard__string.length s) > 0) then
       ([GP_Pretty_Ada:10766] ((Standard__string.first s)
                                 <= (Standard__string.last s)))
        else ([GP_Pretty_Ada:63639] True)) /\
         ([GP_Pretty_Ada:10775] ((Standard__integer__rep.to_rep tokens__first)
                                   <= (Standard__integer__rep.to_rep
                                         tokens__last)))) } ensures 
    { ((([GP_Pretty_Ada:10783] (!count
                                  <= (_gnatprove_standard.Integer.length
                                        (Standard__integer__rep.to_rep
                                           tokens__first)
                                        (Standard__integer__rep.to_rep
                                           tokens__last)))) /\
          --pp_universal_quantif NOT IMPLEMENTED) /\
         ((Mystringtokeniser__tokenarray___axiom.dynamic_invariant
             (Mystringtokeniser__tokenarray.of_array !tokens
                (Standard__integer__rep.to_rep tokens__first)
                (Standard__integer__rep.to_rep tokens__last)) True True True
             True) /\
            (Standard__natural___axiom.dynamic_invariant !count True True
               True True))) } returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:506, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put_line (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:14612] (--pp_tagged NOT IMPLEMENTED
                                 = (Ada___ada__text_io__line_length__2.line_length
                                      !Ada___ada__text_io__file_system.file_system
                                      !Ada___ada__text_io__standard_in.standard_in
                                      !Ada___ada__text_io__standard_out.standard_out
                                      !Ada___ada__text_io__standard_err.standard_err
                                      !Ada___ada__text_io__current_in.current_in
                                      !Ada___ada__text_io__current_out.current_out
                                      !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:14618] (--pp_tagged NOT IMPLEMENTED
                                   = (Ada___ada__text_io__page_length__2.page_length
                                        !Ada___ada__text_io__file_system.file_system
                                        !Ada___ada__text_io__standard_in.standard_in
                                        !Ada___ada__text_io__standard_out.standard_out
                                        !Ada___ada__text_io__standard_err.standard_err
                                        !Ada___ada__text_io__current_in.current_in
                                        !Ada___ada__text_io__current_out.current_out
                                        !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module for defining the constant "R28b" defined at main.adb:73, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_2__L_3__R28b
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function  [sloc:main.adb:73] r28b () requires {  } ensures  {  } returns
    int

end

(* Module for defining a ref holding the value of variable "i" defined at main.adb:73, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_2__L_3__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [model_projected] [name:I] [model_trace:1056] [sloc:main.adb:73]: int

end

(* Module for defining a ref holding the value of variable "tokstr" defined at main.adb:75, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_2__B_4__tokstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  use        Array__Int__Standard__character
  
  val tokstr [name:TokStr] [model_trace:1065]
  [model_projected] [sloc:main.adb:75]: Array__Int__Standard__character.map
  
  function [name:TokStr] [model_projected] [model_trace:1065'First]
    [sloc:main.adb:75] tokstr__first () requires {  } ensures  {  } returns
    Standard__integer.integer
  
  function [name:TokStr] [model_trace:1065'Last] [model_projected]
    [sloc:main.adb:75] tokstr__last () requires {  } ensures  {  } returns
    Standard__integer.integer

end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:117, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_6__t
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Mystringtokeniser__tokenextent
  
  val t [model_projected] [name:T]
  [model_trace:1193] [sloc:main.adb:117]: Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:118, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_6__numtokens
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val numtokens [model_projected] [name:NumTokens]
  [model_trace:1214] [sloc:main.adb:118]: int

end

(* Module for defining the constant "R43b" defined at main.adb:130, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_6__L_7__R43b
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function  [sloc:main.adb:130] r43b () requires {  } ensures  {  } returns
    int

end

(* Module for defining a ref holding the value of variable "i" defined at main.adb:130, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_6__L_7__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [model_trace:1237] [model_projected]
  [name:I] [sloc:main.adb:130]: int

end

(* Module for defining a ref holding the value of variable "tokstr" defined at main.adb:132, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_6__B_8__tokstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  use        Array__Int__Standard__character
  
  val tokstr [name:TokStr] [model_projected]
  [model_trace:1246] [sloc:main.adb:132]: Array__Int__Standard__character.map
  
  function [name:TokStr] [model_projected] [model_trace:1246'First]
    [sloc:main.adb:132] tokstr__first () requires {  } ensures  {  } returns
    Standard__integer.integer
  
  function [model_trace:1246'Last] [name:TokStr] [model_projected]
    [sloc:main.adb:132] tokstr__last () requires {  } ensures  {  } returns
    Standard__integer.integer

end

(* Module for possibly declaring a logic function for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringtointeger__from_string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function   from_string (s : Standard__string.string__) requires { True }
    ensures  { True } returns int
  
  function   from_string__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_175) : int
    s : Standard__string.string__) requires { True } ensures  { True }
    returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringtointeger__from_string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__string
  use        Stringtointeger__from_string
  
  function   from_string (s : Standard__string.string__) requires { True }
    ensures 
    { ((result = (Stringtointeger__from_string.from_string s)) /\
         (Stringtointeger__from_string.from_string__function_guard result s)
         /\
         (Standard__integer___axiom.dynamic_invariant result True False True
            True)) } returns int
  
  axiom from_string__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "plus" defined at operations.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__plus___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  
  function   plus
    (s__split_fields : Operations__operandstack__stack.__split_fields__ref)
    requires { True } ensures 
    { (Operations__operandstack__stack___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "minus" defined at operations.ads:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__minus___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  
  function   minus
    (s__split_fields : Operations__operandstack__stack.__split_fields__ref)
    requires { True } ensures 
    { (Operations__operandstack__stack___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "multiply" defined at operations.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__multiply___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  
  function   multiply
    (s__split_fields : Operations__operandstack__stack.__split_fields__ref)
    requires { True } ensures 
    { (Operations__operandstack__stack___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "divide" defined at operations.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__divide___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  
  function   divide
    (s__split_fields : Operations__operandstack__stack.__split_fields__ref)
    requires { True } ensures 
    { (Operations__operandstack__stack___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "push_operation" defined at operations.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__push_operation___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  
  function   push_operation
    (s__split_fields : Operations__operandstack__stack.__split_fields__ref
    i : int) requires { True } ensures 
    { (Operations__operandstack__stack___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "pop_operation" defined at operations.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__pop_operation___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer___axiom
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  
  function   pop_operation
    (s__split_fields : Operations__operandstack__stack.__split_fields__ref
    i : int__ref) requires { True } ensures 
    { ((Operations__operandstack__stack___axiom.dynamic_invariant
          --pp_record_aggregate NOT IMPLEMENTED True True True True) /\
         (Standard__integer___axiom.dynamic_invariant !i True True True True)) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "load" defined at operations.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__load___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__database
  use        Variablestore__variable
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  
  function   load
    (v : Variablestore__variable.variable
    db : Variablestore__database.database
    s__split_fields : Operations__operandstack__stack.__split_fields__ref)
    requires { True } ensures 
    { (Operations__operandstack__stack___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "store" defined at operations.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__store___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__database
  use        Variablestore__variable
  use        Variablestore__variable___axiom
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  use        Variablestore__database___axiom
  
  function   store
    (v__split_fields : Variablestore__variable.__split_fields__ref
    db : Variablestore__database.database__ref
    s__split_fields : Operations__operandstack__stack.__split_fields__ref)
    requires { True } ensures 
    { (((Variablestore__variable___axiom.dynamic_invariant
           --pp_record_aggregate NOT IMPLEMENTED True True True True) /\
          (Variablestore__database___axiom.dynamic_invariant !db True True
             True True)) /\
         (Operations__operandstack__stack___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at operations.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__remove___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__database
  use        Variablestore__variable
  use        Variablestore__variable___axiom
  use        Variablestore__database___axiom
  
  function   remove
    (v__split_fields : Variablestore__variable.__split_fields__ref
    db : Variablestore__database.database__ref) requires { True } ensures 
    { ((Variablestore__variable___axiom.dynamic_invariant
          --pp_record_aggregate NOT IMPLEMENTED True True True True) /\
         (Variablestore__database___axiom.dynamic_invariant !db True True
            True True)) } returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "list" defined at operations.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Operations__list___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__database
  
  function   list (db : Variablestore__database.database) requires { True }
    ensures  { True } returns unit

end

(* Module for axiomatizing type "state" defined at main.adb:28, created in Gnat2Why.Types.Translate_Type *)
module Main__state
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type state  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = state,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type state__ref  = { mutable state__content : state }
  
  function   state__ref_state__content__projection (a : state__ref) requires
    {  } ensures  {  } returns state = a.state__content
  
  meta model_projection function state__ref_state__content__projection
  
  meta inline:no function state__ref_state__content__projection
  
  function   state__havoc (x : state__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "state" defined at main.adb:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__state___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Main__state
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_320) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_316) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_317) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_318) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_319) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_316) = True) \/
          (Main__state.first <= Main__state.last))
       then
       (Main__state.dynamic_property Main__state.first Main__state.last
          ([mlw:proxy_symbol] [introduced] temp___expr_320))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_321) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_322) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:56, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Main__B_2__TTtSP1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tTtSP1  = <range 1 3>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 3
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = tTtSP1,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tTtSP1__ref  = { mutable tTtSP1__content : tTtSP1 }
  
  function   tTtSP1__ref_tTtSP1__content__projection (a : tTtSP1__ref)
    requires {  } ensures  {  } returns tTtSP1 = a.tTtSP1__content
  
  meta model_projection function tTtSP1__ref_tTtSP1__content__projection
  
  meta inline:no function tTtSP1__ref_tTtSP1__content__projection
  
  function   tTtSP1__havoc (x : tTtSP1__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "TtS" defined at main.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_2__TtS___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_371) : Array__Int__Mystringtokeniser__tokenextent.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_367) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_368) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_369) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_370) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_373) : Array__Int__Mystringtokeniser__tokenextent.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_374) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the loop exit exception for the loop "L_3" defined at main.adb:73, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B_2__L_3
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for defining the loop exit exception for the loop "L_5" defined at main.adb:113, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_5
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:117, created in Gnat2Why.Types.Translate_Type *)
module Main__B_6__TTtSP1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tTtSP1  = <range 1 3>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 3
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = tTtSP1,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tTtSP1__ref  = { mutable tTtSP1__content : tTtSP1 }
  
  function   tTtSP1__ref_tTtSP1__content__2__projection (a : tTtSP1__ref)
    requires {  } ensures  {  } returns tTtSP1 = a.tTtSP1__content
  
  meta model_projection function tTtSP1__ref_tTtSP1__content__2__projection
  
  meta inline:no function tTtSP1__ref_tTtSP1__content__2__projection
  
  function   tTtSP1__havoc (x : tTtSP1__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "TtS" defined at main.adb:117, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_6__TtS___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_391) : Array__Int__Mystringtokeniser__tokenextent.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_387) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_388) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_389) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_390) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_393) : Array__Int__Mystringtokeniser__tokenextent.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_394) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the loop exit exception for the loop "L_7" defined at main.adb:130, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B_6__L_7
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:19, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_422
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_422 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_422__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:32, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_426
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_426 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_426__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:44, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_432
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_432 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_432__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:52, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_436
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_436 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_436__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:57, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_444
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_444 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_444__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:60, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_446
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_446 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_446__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring an abstract function for the aggregate at main.adb:63, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_2__t__aggregate_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  
  function   main__B_2__t__aggregate_def
    (([mlw:proxy_symbol]
    [introduced] temp___450) : Mystringtokeniser__tokenextent.tokenextent)
    requires { True } ensures  { True } returns
    Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:69, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_458
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_458 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_458__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:88, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_466
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_466 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_466__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:102, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_475
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_475 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_475__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:106, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_478
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_478 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_478__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:97, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_481
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_481 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_481__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:114, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_483
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_483 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_483__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring an abstract function for the aggregate at main.adb:117, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_6__t__aggregate_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  
  function   main__B_6__t__aggregate_def
    (([mlw:proxy_symbol]
    [introduced] temp___487) : Mystringtokeniser__tokenextent.tokenextent)
    requires { True } ensures  { True } returns
    Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:125, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_495
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_495 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_495__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:146, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_505
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_505 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_505__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:156, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_509
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_509 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_509__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:193, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_520
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_520 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_520__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:190, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_523
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_523 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_523__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:188, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_527
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_527 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_527__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:186, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_532
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_532 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_532__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:184, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_535
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_535 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_535__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:182, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_539
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_539 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_539__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:180, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_542
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_542 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_542__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:178, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_545
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_545 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_545__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:176, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_548
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_548 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_548__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:174, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_551
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_551 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_551__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:172, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_554
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_554 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_554__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:167, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_556
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_556 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_556__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "db" defined at main.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__db___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "var" defined at main.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__var___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "master_pin" defined at main.adb:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__master_pin___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "enter_pin" defined at main.adb:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__enter_pin___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "p" defined at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__p___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "current_state" defined at main.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__current_state___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "command" defined at main.adb:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__command___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "number" defined at main.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__number___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "opstack" defined at main.adb:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__opstack___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "t" defined at main.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_2__t___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystringtokeniser__tokenextent
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_356) : Mystringtokeniser__tokenextent.tokenextent
    ([mlw:proxy_symbol] [introduced] temp___is_init_352) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_353) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_354) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_355) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_357) : Mystringtokeniser__tokenextent.tokenextent
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_358) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the value of the aggregate at main.adb:63, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_2__t__aggregate_def___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystringtokeniser__tokenextent
  use        Mystringtokeniser__tokenextent___axiom
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Main__B_2__t__aggregate_def
  use        Array__Int__Mystringtokeniser__tokenextent
  
  axiom def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_2__numtokens___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at main.adb:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_2__L_3__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "tokstr" defined at main.adb:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_2__B_4__tokstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "t" defined at main.adb:117, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_6__t___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for defining the value of the aggregate at main.adb:117, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_6__t__aggregate_def___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystringtokeniser__tokenextent
  use        Mystringtokeniser__tokenextent___axiom
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Main__B_6__t__aggregate_def
  use        Array__Int__Mystringtokeniser__tokenextent
  
  axiom def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_6__numtokens___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at main.adb:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_6__L_7__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "tokstr" defined at main.adb:132, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_6__B_8__tokstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_3" defined at main.adb:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_2__L_3___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_7" defined at main.adb:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_6__L_7___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_5" defined at main.adb:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_5___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for axiomatizing type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type count  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = count,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type count__ref  = { mutable count__content : count }
  
  function   count__ref_count__content__projection (a : count__ref) requires
    {  } ensures  {  } returns count = a.count__content
  
  meta model_projection function count__ref_count__content__projection
  
  meta inline:no function count__ref_count__content__projection
  
  function   count__havoc (x : count__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ada___ada__text_io__count
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_180) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_179) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_176) = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last))
       then
       (Ada___ada__text_io__count.dynamic_property
          Ada___ada__text_io__count.first Ada___ada__text_io__count.last
          ([mlw:proxy_symbol] [introduced] temp___expr_180))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_181) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_182) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   line_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__line_length__2.line_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom line_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   page_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__page_length__2.page_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom page_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "storagearray" defined at stack.ads:32 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__storagearray___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__integer
  use        Array__Int__Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_327) : Array__Int__Standard__integer.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_323) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_324) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_325) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_326) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_329) : Array__Int__Standard__integer.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_330) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving a program function and a defining axiom for the expression function "size" defined at stack.ads:13 instantiated at operations.ads:5, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Operations__operandstack__size___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer___axiom
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  use        Operations__operandstack__size
  use        Operations__operandstack__stack__T13s
  use        Operations__operandstack__stack__T13s__rep
  
  function   size (s : Operations__operandstack__stack.stack) requires
    { True } ensures 
    { ((result = (Operations__operandstack__size.size s)) /\
         (Operations__operandstack__size.size__function_guard result s) /\
         ((Standard__integer___axiom.dynamic_invariant result True False True
             True) /\
            (result
               = ( (Operations__operandstack__stack__T13s__rep.to_rep
                      ( s).Operations__operandstack__stack.__split_fields.Operations__operandstack__stack.rec__operations__operandstack__stack__size))))) }
    returns int
  
  axiom size__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom size__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "T13s" defined at stack.ads:35 instantiated at operations.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Operations__operandstack__stack__T13s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_258) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_254) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_255) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_256) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_257) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_260) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_261) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__length___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural___axiom
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__mystring___axiom
  use        Main__lines__mystring__T14b
  use        Main__lines__mystring__T14b__rep
  
  function   length (m : Main__lines__mystring.mystring) requires { True }
    ensures 
    { ((result = (Main__lines__length.length m)) /\
         (Main__lines__length.length__function_guard result m) /\
         ((Standard__natural___axiom.dynamic_invariant result True False True
             True) /\
            ((result
                = ( (Main__lines__mystring__T14b__rep.to_rep
                       ( m).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)))
               /\ ([GP_Pretty_Ada:69497] (result <= 2048))))) } returns int
  
  axiom length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom length__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:30 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__get___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive___axiom
  use        Standard__character
  use        Standard__character___axiom
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__get
  use        Main__lines__mystring___axiom
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   get (m : Main__lines__mystring.mystring index : int) requires
    { ([GP_Pretty_Ada:69547] (index
                                <= (epsilon ([mlw:proxy_symbol]
                                   [introduced] temp___result_282) : int {
                                   ((([mlw:proxy_symbol]
                                       [introduced] temp___result_282)
                                       = (Main__lines__length.length ( m)))
                                      /\
                                      (Main__lines__length.length__function_guard
                                         ([mlw:proxy_symbol]
                                         [introduced] temp___result_282) 
                                         ( m)))}))) } ensures 
    { ((result = (Main__lines__get.get m index)) /\
         (Main__lines__get.get__function_guard result m index) /\
         ((Standard__character___axiom.dynamic_invariant result True False
             True True) /\
            (result
               = ( (Standard__character__rep.to_rep (let ([mlw:proxy_symbol]
                      [introduced] temp___283) =
                      ( m).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str
                      in
                      (Array__Int__Standard__character.get
                         ([mlw:proxy_symbol] [introduced] temp___283) index))))))) }
    returns int
  
  axiom get__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom get__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "T14b" defined at mystring.ads:38 instantiated at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T14b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "TTtSP1" defined at main.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_2__TTtSP1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for defining the value of constant "R28b" defined at main.adb:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_2__L_3__R28b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "TTtSP1" defined at main.adb:117, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_6__TTtSP1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for defining the value of constant "R43b" defined at main.adb:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_6__L_7__R43b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:16, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Integer
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__natural
  use        Standard__natural___axiom
  use        Standard__natural__rep
  use        Standard__positive
  use        Standard__positive__rep
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__integer__rep
  use        Standard__string___axiom
  use        Variablestore__database
  use        Main__db
  use        Variablestore__variable
  use        Variablestore__from_string___axiom
  use        Main__var
  use        Variablestore__variable___axiom
  use        Main__master_pin
  use        Main__enter_pin
  use        Main__lines__mystring
  use        Main__lines__to_string
  use        Main__lines__to_string___axiom
  use        Main__lines__from_string___axiom
  use        Main__lines__equal___axiom
  use        Main__lines__substring___axiom
  use        Main__lines__mystring___axiom
  use        Main__lines__get_line___axiom
  use        Main__p
  use        Main__current_state
  use        Main__command
  use        Main__number
  use        Main__opstack
  use        Operations__operandstack__stack
  use        Operations__operandstack__stack___axiom
  use        Operations__operandstack__init___axiom
  use        Variablestore__init___axiom
  use        Ada___ada__text_io__put__4___axiom
  use        Pin__from_string___axiom
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Main__B_2__t
  use        Main__B_2__numtokens
  use        Mystringtokeniser__tokenise___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        Main__B_2__L_3__R28b
  use        Main__B_2__L_3__i
  use        Array__Int__Standard__character
  use        Main__B_2__B_4__tokstr
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Main__B_6__t
  use        Main__B_6__numtokens
  use        Main__B_6__L_7__R43b
  use        Main__B_6__L_7__i
  use        Array__Int__Standard__character
  use        Main__B_6__B_8__tokstr
  use        Stringtointeger__from_string___axiom
  use        Operations__plus___axiom
  use        Operations__minus___axiom
  use        Operations__multiply___axiom
  use        Operations__divide___axiom
  use        Operations__push_operation___axiom
  use        Operations__pop_operation___axiom
  use        Operations__load___axiom
  use        Operations__store___axiom
  use        Operations__remove___axiom
  use        Operations__list___axiom
  use        Variablestore__database___axiom
  use        Pin__pin___axiom
  use        Main__state___axiom
  use        Main__L_1
  use        Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Mystringtokeniser__tokenarray
  use        Main__B_2__TTtSP1
  use        Main__B_2__TtS___axiom
  use        Main__B_2__L_3
  use        Main__L_5
  use        Main__B_6__TTtSP1
  use        Main__B_6__TtS___axiom
  use        Main__B_6__L_7
  use        Temp___String_Literal_422
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_426
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_432
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_436
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_444
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_446
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Main__B_2__t__aggregate_def
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Temp___String_Literal_458
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_466
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_475
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_478
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_481
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_483
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Main__B_6__t__aggregate_def
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Array__Int__Mystringtokeniser__tokenextent
  use        Temp___String_Literal_495
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_505
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_509
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_520
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_523
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_527
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_532
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_535
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_539
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_542
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_545
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_548
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_551
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_554
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_556
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Main__db___axiom
  use        Main__var___axiom
  use        Main__master_pin___axiom
  use        Main__enter_pin___axiom
  use        Main__p___axiom
  use        Main__state___axiom
  use        Main__current_state___axiom
  use        Main__command___axiom
  use        Main__number___axiom
  use        Main__opstack___axiom
  use        Main__B_2__t___axiom
  use        Main__B_2__t__aggregate_def___axiom
  use        Main__B_2__numtokens___axiom
  use        Main__B_2__L_3__i___axiom
  use        Main__B_2__B_4__tokstr___axiom
  use        Main__B_6__t___axiom
  use        Main__B_6__t__aggregate_def___axiom
  use        Main__B_6__numtokens___axiom
  use        Main__B_6__L_7__i___axiom
  use        Main__B_6__B_8__tokstr___axiom
  use        Main__B_2__L_3___axiom
  use        Main__B_6__L_7___axiom
  use        Main__L_5___axiom
  use        Main__L_1___axiom
  use        Stringtointeger__from_string___axiom
  use        Variablestore__database___axiom
  use        Variablestore__init___axiom
  use        Variablestore__from_string___axiom
  use        Mystringtokeniser__tokenextent___axiom
  use        Mystringtokeniser__tokenarray___axiom
  use        Mystringtokeniser__tokenise___axiom
  use        Pin__from_string___axiom
  use        Pin__pin___axiom
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__line_length__2___axiom
  use        Ada___ada__text_io__page_length__2___axiom
  use        Ada___ada__text_io__put__4___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        Operations__plus___axiom
  use        Operations__minus___axiom
  use        Operations__multiply___axiom
  use        Operations__divide___axiom
  use        Operations__push_operation___axiom
  use        Operations__pop_operation___axiom
  use        Operations__load___axiom
  use        Operations__store___axiom
  use        Operations__remove___axiom
  use        Operations__list___axiom
  use        Variablestore__variable___axiom
  use        Operations__operandstack__storagearray___axiom
  use        Operations__operandstack__stack___axiom
  use        Operations__operandstack__init___axiom
  use        Operations__operandstack__size___axiom
  use        Operations__operandstack__stack__T13s___axiom
  use        Main__lines__mystringstr___axiom
  use        Main__lines__mystring___axiom
  use        Main__lines__to_string___axiom
  use        Main__lines__from_string___axiom
  use        Main__lines__equal___axiom
  use        Main__lines__length___axiom
  use        Main__lines__substring___axiom
  use        Main__lines__get___axiom
  use        Main__lines__get_line___axiom
  use        Main__lines__mystring__T14b___axiom
  use        Main__B_2__TtS___axiom
  use        Main__B_2__TTtSP1___axiom
  use        Main__B_2__L_3__R28b___axiom
  use        Main__B_6__TtS___axiom
  use        Main__B_6__TTtSP1___axiom
  use        Main__B_6__L_7__R43b___axiom
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  function [GP_Subp:main.adb:16] [sloc:main.adb:16] def (__void_param : unit)
    requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram main.adb:16 *);
        (* Assume moved pointers in outputs of the subprogram main.adb:16 *);
        (* Check for RTE in the Pre of the subprogram main.adb:16 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram main.adb:16 *);
        (try
        ();
          ([sloc:main.adb:17] ());
          ([sloc:main.adb:18] assume
          { (Variablestore__database___axiom.default_initial_assumption
               !Main__db.db False) };
          assume
          { (Variablestore__database___axiom.dynamic_invariant !Main__db.db
               False False True True) });
          ([sloc:main.adb:19] ());
          ([sloc:main.adb:19] (let main__var__assume =
          ( ([sloc:main.adb:19] ([GP_Reason:VC_PRECONDITION]
                                [comment:   VAR : VariableStore.Variable := VariableStore.From_String("");                                                 ^ main.adb:19:49:VC_PRECONDITION]
                                [vc:annotation]
                                [GP_Shape:var_decl__call_from_string]
                                [GP_Sloc:main.adb:19:49]
                                [GP_Id:0] (Variablestore__from_string___axiom.from_string
                                             (let ([mlw:proxy_symbol]
                                             [introduced] temp___423) =
                                             ( (Temp___String_Literal_422.temp___String_Literal_422
                                                  ())) in
                                             (Standard__string.of_array
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___423) 1 0))))))
          in ( Main__var.var__split_fields :=
          main__var__assume.Variablestore__variable.__split_fields));
          assume
          { (Variablestore__variable___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:main.adb:21] assume
          { (Pin__pin___axiom.default_initial_assumption
               !Main__master_pin.master_pin False) };
          assume
          { (Pin__pin___axiom.dynamic_invariant !Main__master_pin.master_pin
               False False True True) });
          ([sloc:main.adb:23] assume
          { (Pin__pin___axiom.default_initial_assumption
               !Main__enter_pin.enter_pin False) };
          assume
          { (Pin__pin___axiom.dynamic_invariant !Main__enter_pin.enter_pin
               False False True True) });
          ([sloc:main.adb:24] ());
          ([sloc:mystring.adb:3] ());
          ([sloc:main.adb:24] ());
          ([sloc:main.adb:26] assume
          { (Main__lines__mystring___axiom.default_initial_assumption
               --pp_record_aggregate NOT IMPLEMENTED False) };
          assume
          { (Main__lines__mystring___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED False False True True) });
          ([sloc:main.adb:28] ());
          ([sloc:main.adb:30] ());
          ([sloc:main.adb:30] ( Main__current_state.current_state :=
          ( 0));
          assume
          { (Main__state___axiom.dynamic_invariant
               !Main__current_state.current_state True False True True) });
          ([sloc:main.adb:32] ());
          ([sloc:main.adb:32] (let main__command__assume =
          ( ([sloc:main.adb:32] ([GP_Reason:VC_PRECONDITION] [vc:annotation]
                                [GP_Shape:command_decl__call_from_string]
                                [GP_Sloc:main.adb:32:37]
                                [comment:   COMMAND : Lines.MyString := Lines.From_String("");                                     ^ main.adb:32:37:VC_PRECONDITION]
                                [GP_Id:1] (Main__lines__from_string___axiom.from_string
                                             (let ([mlw:proxy_symbol]
                                             [introduced] temp___427) =
                                             ( (Temp___String_Literal_426.temp___String_Literal_426
                                                  ())) in
                                             (Standard__string.of_array
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___427) 1 0))))))
          in ( Main__command.command__split_fields :=
          main__command__assume.Main__lines__mystring.__split_fields));
          assume
          { (Main__lines__mystring___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:main.adb:34] ( Main__number.number := ( 0));
          assume
          { (Standard__integer___axiom.dynamic_invariant !Main__number.number
               True False True True) });
          ([sloc:main.adb:37] assume
          { (Operations__operandstack__stack___axiom.default_initial_assumption
               --pp_record_aggregate NOT IMPLEMENTED False) };
          assume
          { (Operations__operandstack__stack___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED False False True True) });
          ([sloc:main.adb:62] ());
          ([sloc:main.adb:116] ());
          ([sloc:main.adb:113] ());
          ([sloc:main.adb:56] ());
          ();
          ([GP_Sloc:main.adb:41:33] ([sloc:main.adb:41] ()));
          ([GP_Sloc:main.adb:41:27] ([sloc:main.adb:41] ()));
          ([GP_Sloc:main.adb:41:27] ([sloc:main.adb:41] (let ([mlw:proxy_symbol]
                                    [introduced] temp___compl_430) =
                                    ( ( --pp_record_aggregate NOT IMPLEMENTED))
                                    in
                                    ( any --pp_effects NOT IMPLEMENTED pre {}
                                    post {} return unit);
          (Operations__operandstack__init___axiom.init
             Main__opstack.opstack__split_fields);
          ())));
        ([GP_Sloc:main.adb:42:23] ([sloc:main.adb:42] ()));
        ([GP_Sloc:main.adb:42:17] ([sloc:main.adb:42] ()));
        ([GP_Sloc:main.adb:42:17] ([sloc:main.adb:42] (let ([mlw:proxy_symbol]
                                  [introduced] temp___compl_431) =
                                  ( ( !Main__db.db)) in
                                  ( any --pp_effects NOT IMPLEMENTED pre {}
                                  post {} return unit);
        (Variablestore__init___axiom.init Main__db.db);
        ())));
    ([GP_Sloc:main.adb:44:4] ([sloc:main.adb:44] ()));
    ([GP_Sloc:main.adb:44:4] ([sloc:main.adb:44] ( any
                                                    --pp_effects NOT IMPLEMENTED
                                                    pre {}
                             post {} return unit);
    (Ada___ada__text_io__put__4___axiom.put (let ([mlw:proxy_symbol]
       [introduced] temp___433) =
       ( (Temp___String_Literal_432.temp___String_Literal_432 ())) in
       (Standard__string.of_array ([mlw:proxy_symbol]
          [introduced] temp___433) 1 9)));
    ()));
  ([GP_Sloc:main.adb:45:19] ([sloc:main.adb:45] ()));
  ([GP_Sloc:main.adb:45:9] ([sloc:main.adb:45] ()));
  ([GP_Sloc:main.adb:45:9] ([sloc:main.adb:45] (let ([mlw:proxy_symbol]
                           [introduced] temp___compl_434) =
                           ( ( --pp_record_aggregate NOT IMPLEMENTED)) in
                           ( any --pp_effects NOT IMPLEMENTED pre {} post {
                           } return unit);
  (Main__lines__get_line___axiom.get_line Main__p.p__split_fields);
  ())));
([GP_Sloc:main.adb:48:23] ([sloc:main.adb:48] ()));
([GP_Sloc:main.adb:48:12] ([sloc:main.adb:48] ()));
([GP_Sloc:main.adb:48:4] ([sloc:main.adb:48] (if
                                             ([sloc:main.adb:48] ([branch_id=951]
                                             _gnatprove_standard.Main.spark__branch
                                             :=
                                             (_gnatprove_standard.Boolean.andb
                                                (abstract ensures
                                                   { True } begin  (let _ =
                                                                  (Main__lines__to_string___axiom.to_string
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED))
                                                                  in ())  end;
                                                   (Standard__string.length
                                                      (Main__lines__to_string___axiom.to_string
                                                         ( --pp_record_aggregate NOT IMPLEMENTED)))
                                                   = 4)
                                                (let ([mlw:proxy_symbol]
                                                [introduced] temp___439) =
                                                (Main__lines__to_string___axiom.to_string
                                                   ( --pp_record_aggregate NOT IMPLEMENTED))
                                                in (let ([mlw:proxy_symbol]
                                                [introduced] temp___438) =
                                                ( any  pre {} post {} return
                                                  int) in
                                               (if
                                               (_gnatprove_standard.Boolean.andb
                                                  ((Standard__string.first
                                                      ([mlw:proxy_symbol]
                                                      [introduced] temp___439))
                                                     <= ([mlw:proxy_symbol]
                                                     [introduced] temp___438))
                                                  (([mlw:proxy_symbol]
                                                     [introduced] temp___438)
                                                     <= (Standard__string.last
                                                           ([mlw:proxy_symbol]
                                                           [introduced] temp___439))))
                                               then
                                               abstract ensures
                                               { True } begin  (let _ =
                                                              (let i =
                                                                ( (Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (Standard__string.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___439))
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___438))))
                                                                in
                                                                (_gnatprove_standard.Boolean.andb
                                                                   (i >= 48)
                                                                   (i <= 57)))
                                                              in ())  end
                                               ));
                                               ( any  pre {} post
                                               {((result = True) <->
                                                   (let ([mlw:proxy_symbol]
                                                   [introduced] temp___442) =
                                                   (epsilon ([mlw:proxy_symbol]
                                                   [introduced] temp___result_440) : Standard__string.string__ {
                                                   ((([mlw:proxy_symbol]
                                                       [introduced] temp___result_440)
                                                       = (Main__lines__to_string.to_string
                                                            ( --pp_record_aggregate NOT IMPLEMENTED)))
                                                      /\
                                                      (Main__lines__to_string.to_string__function_guard
                                                         ([mlw:proxy_symbol]
                                                         [introduced] temp___result_440)
                                                         ( --pp_record_aggregate NOT IMPLEMENTED)))})
                                                   in
                                                   --pp_universal_quantif NOT IMPLEMENTED))}
                                               return bool)))));
([branch_id=951] _gnatprove_standard.Main.spark__branch).bool__content then
();
([GP_Sloc:main.adb:50:7] ([sloc:main.adb:50] ()));
([GP_Sloc:main.adb:50:53] ([sloc:main.adb:50] ()));
([GP_Sloc:main.adb:50:42] ([sloc:main.adb:50] ()));
([GP_Sloc:main.adb:50:24] ([sloc:main.adb:50] ()));
([GP_Sloc:main.adb:50:18] ([sloc:main.adb:50] ( Main__master_pin.master_pin
                          :=
                          ([sloc:main.adb:50] ([GP_Reason:VC_PRECONDITION]
                                              [comment:      MASTER_PIN := PIN.From_String(Lines.To_String(P));                        ^ main.adb:50:24:VC_PRECONDITION]
                                              [vc:annotation]
                                              [GP_Shape:if__master_pin_assign__call_from_string]
                                              [GP_Id:2]
                                              [GP_Sloc:main.adb:50:24] (
                                              Pin__from_string___axiom.from_string
                                                (Main__lines__to_string___axiom.to_string
                                                   ( --pp_record_aggregate NOT IMPLEMENTED))))))))
 else
();
([GP_Sloc:main.adb:52:7] ([sloc:main.adb:52] ()));
([GP_Sloc:main.adb:52:7] ([sloc:main.adb:52] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put__4___axiom.put (let ([mlw:proxy_symbol]
   [introduced] temp___437) =
   ( (Temp___String_Literal_436.temp___String_Literal_436 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___437) 1
      18)));
()));
([GP_Sloc:main.adb:53:7] ([sloc:main.adb:53] raise Return__exc)))));
([GP_Sloc:main.adb:56:15] ([sloc:main.adb:56] (* Translation of an Ada loop from main.adb:56 *);
                          (if (_gnatprove_standard.Boolean.of_int 1) then
                          (try
                          (try
                            (let temp___loop_entry_567 =
                              --pp_record_aggregate NOT IMPLEMENTED in
                              (let temp___loop_entry_566 =
                              --pp_record_aggregate NOT IMPLEMENTED in
                              (let temp___loop_entry_565 =
                              --pp_record_aggregate NOT IMPLEMENTED in
                              (let temp___loop_entry_564 = !Main__db.db in
                              (let temp___loop_entry_563 =
                              --pp_record_aggregate NOT IMPLEMENTED in
                              (* While loop translating the Ada loop from main.adb:56 *);
                              ([sloc:main.adb:56] loop
                                                    (* Check for absence of RTE in the loop invariant and variant *)
                                                    
                                                    
                                                    (* Assume implicit invariants from the loop main.adb:56 *);
                                                    assume
                                                    { (((((((((True /\
                                                                 (Main__state___axiom.dynamic_invariant
                                                                    !Main__current_state.current_state
                                                                    True True
                                                                    True True)
                                                                 /\ True /\
                                                                 True) /\
                                                                (Main__lines__mystring___axiom.dynamic_invariant
                                                                   --pp_record_aggregate NOT IMPLEMENTED
                                                                   True True
                                                                   True True)
                                                                /\ True /\
                                                                True) /\
                                                               (Variablestore__database___axiom.dynamic_invariant
                                                                  !Main__db.db
                                                                  False True
                                                                  True True)
                                                               /\ True /\
                                                               True) /\
                                                              (Standard__integer___axiom.dynamic_invariant
                                                                 !Main__number.number
                                                                 True True
                                                                 True True)
                                                              /\ True /\ True)
                                                             /\
                                                             (Variablestore__variable___axiom.dynamic_invariant
                                                                --pp_record_aggregate NOT IMPLEMENTED
                                                                True True
                                                                True True) /\
                                                             True /\ True) /\
                                                            (Operations__operandstack__stack___axiom.dynamic_invariant
                                                               --pp_record_aggregate NOT IMPLEMENTED
                                                               False True
                                                               True True) /\
                                                            True /\ True) /\
                                                           (Pin__pin___axiom.dynamic_invariant
                                                              !Main__master_pin.master_pin
                                                              False True True
                                                              True) /\ True
                                                           /\ True) /\
                                                          (Pin__pin___axiom.dynamic_invariant
                                                             !Main__enter_pin.enter_pin
                                                             False True True
                                                             True) /\ True /\
                                                          True) /\
                                                         (Main__lines__mystring___axiom.dynamic_invariant
                                                            --pp_record_aggregate NOT IMPLEMENTED
                                                            False True True
                                                            True) /\ True /\
                                                         True) };
                                                    (* Continuation of loop after loop invariant and variant *);
                                                    ();
                                                    ([GP_Sloc:main.adb:57:7] 
                                                    ([sloc:main.adb:57] ()));
                                                    ([GP_Sloc:main.adb:57:23] 
                                                    ([sloc:main.adb:57] ()));
                                                    ([GP_Sloc:main.adb:57:17] 
                                                    ([sloc:main.adb:57] (
                                                    Main__enter_pin.enter_pin
                                                    :=
                                                    ([sloc:main.adb:57] 
                                                    ([GP_Reason:VC_PRECONDITION]
                                                    [GP_Shape:L_1_while__enter_pin_assign__call_from_string]
                                                    [vc:annotation]
                                                    [GP_Sloc:main.adb:57:23]
                                                    [comment:      ENTER_PIN := PIN.From_String(""); -- Initialize ENTER_PIN                       ^ main.adb:57:23:VC_PRECONDITION]
                                                    [GP_Id:3] (Pin__from_string___axiom.from_string
                                                                 (let ([mlw:proxy_symbol]
                                                                 [introduced] temp___445)
                                                                 =
                                                                 ( (Temp___String_Literal_444.temp___String_Literal_444
                                                                    ())) in
                                                                 (Standard__string.of_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___445)
                                                                    1 0))))))));
                                                    ([GP_Sloc:main.adb:60:7] 
                                                    ([sloc:main.adb:60] ()));
                                                    ([GP_Sloc:main.adb:60:7] 
                                                    ([sloc:main.adb:60] (
                                                     any
                                                      --pp_effects NOT IMPLEMENTED
                                                      pre {}
                                                    post {} return unit);
                                                    (Ada___ada__text_io__put__4___axiom.put
                                                       (let ([mlw:proxy_symbol]
                                                       [introduced] temp___447)
                                                       =
                                                       ( (Temp___String_Literal_446.temp___String_Literal_446
                                                            ())) in
                                                       (Standard__string.of_array
                                                          ([mlw:proxy_symbol]
                                                          [introduced] temp___447)
                                                          1 10)));
                                                    ()));
                              ([GP_Sloc:main.adb:61:22] ([sloc:main.adb:61] ()));
                              ([GP_Sloc:main.adb:61:12] ([sloc:main.adb:61] ()));
                              ([GP_Sloc:main.adb:61:12] ([sloc:main.adb:61] (let ([mlw:proxy_symbol]
                                                        [introduced] temp___compl_448)
                                                        =
                                                        ( ( --pp_record_aggregate NOT IMPLEMENTED))
                                                        in
                                                        ( any
                                                           --pp_effects NOT IMPLEMENTED
                                                           pre {}
                                                        post {} return unit);
                              (Main__lines__get_line___axiom.get_line
                                 Main__p.p__split_fields);
                              ())));
                              ([GP_Sloc:main.adb:63:10] ([sloc:main.adb:63] 
                                                        ([sloc:main.adb:63] ())));
                              ([GP_Sloc:main.adb:63:10] ([sloc:main.adb:63] 
                                                        ([sloc:main.adb:63] (
                                                        Main__B_2__t.t :=
                                                        (let ([mlw:proxy_symbol]
                                                          [introduced] temp___452)
                                                          =
                                                          ( (Main__B_2__t__aggregate_def.main__B_2__t__aggregate_def
                                                               ( --pp_record_aggregate NOT IMPLEMENTED)))
                                                          in
                                                          ([mlw:proxy_symbol]
                                                          [introduced] temp___452)));
                                                        assume
                                                        { (Main__B_2__TtS___axiom.dynamic_invariant
                                                             !Main__B_2__t.t
                                                             True False True
                                                             True) })));
                              ([GP_Sloc:main.adb:64:10] ([sloc:main.adb:64] 
                                                        ([sloc:main.adb:64] assume
                                                        { (Standard__natural___axiom.default_initial_assumption
                                                             !Main__B_2__numtokens.numtokens
                                                             False) };
                                                        assume
                                                        { (Standard__natural___axiom.dynamic_invariant
                                                             !Main__B_2__numtokens.numtokens
                                                             False False True
                                                             True) })));
                              ([GP_Sloc:main.adb:74:13] ([sloc:main.adb:74] ()));
                              ([GP_Sloc:main.adb:73:32] ([sloc:main.adb:73] ()));
                              ([GP_Sloc:main.adb:66:53] ([sloc:main.adb:66] ()));
                              ([GP_Sloc:main.adb:66:42] ([sloc:main.adb:66] ()));
                              ([GP_Sloc:main.adb:66:56] ([sloc:main.adb:66] ()));
                              ([GP_Sloc:main.adb:66:58] ([sloc:main.adb:66] ()));
                              ([GP_Sloc:main.adb:66:27] ([sloc:main.adb:66] ()));
                              ([GP_Sloc:main.adb:66:27] ([sloc:main.adb:66] (let ([mlw:proxy_symbol]
                                                        [introduced] temp___compl_454)
                                                        =
                                                        (let ([mlw:proxy_symbol]
                                                          [introduced] temp___453)
                                                          =
                                                          ( !Main__B_2__t.t)
                                                          in
                                                          (Mystringtokeniser__tokenarray.of_array
                                                             ([mlw:proxy_symbol]
                                                             [introduced] temp___453)
                                                             Main__B_2__TTtSP1.first
                                                             Main__B_2__TTtSP1.last))
                                                        in
                                                        --pp_binding_ref NOT IMPLEMENTED)));
                              ([GP_Sloc:main.adb:68:13] ([sloc:main.adb:68] ()));
                              ([GP_Sloc:main.adb:68:10] ([sloc:main.adb:68] 
                                                        (if
                                                        ([sloc:main.adb:68] ([branch_id=1048]
                                                        _gnatprove_standard.Main.spark__branch
                                                        :=
                                                        (!Main__B_2__numtokens.numtokens
                                                           > 2)));
                                                        ([branch_id=1048] _gnatprove_standard.Main.spark__branch).bool__content
                                                        then
                                                        raise Temp___exception_460
                                                         else ())));
                              ([GP_Sloc:main.adb:73:22] ([sloc:main.adb:73] ()));
                              ([GP_Sloc:main.adb:73:22] ([sloc:main.adb:73] 
                                                        ([sloc:main.adb:73] (let main__B_2__L_3__R28b__assume
                                                        =
                                                        !Main__B_2__numtokens.numtokens
                                                        in assume
                                                        { (main__B_2__L_3__R28b__assume
                                                             = Main__B_2__L_3__R28b.r28b) });
                                                        assume
                                                        { (Standard__natural___axiom.dynamic_invariant
                                                             Main__B_2__L_3__R28b.r28b
                                                             True False True
                                                             True) })));
                              ([GP_Sloc:main.adb:73:32] ([sloc:main.adb:73] (let ([mlw:proxy_symbol]
                                                        [introduced] temp___461)
                                                        = 1 in
                                                        (let ([mlw:proxy_symbol]
                                                        [introduced] temp___462)
                                                        =
                                                        Main__B_2__L_3__R28b.r28b
                                                        in (
                                                        Main__B_2__L_3__i.i
                                                        :=
                                                        ([mlw:proxy_symbol]
                                                          [introduced] temp___461));
                                                        (* Translation of an Ada loop from main.adb:73 *);
                                                        (if
                                                        (_gnatprove_standard.Boolean.andb
                                                           (([mlw:proxy_symbol]
                                                              [introduced] temp___461)
                                                              <= !Main__B_2__L_3__i.i)
                                                           (!Main__B_2__L_3__i.i
                                                              <= ([mlw:proxy_symbol]
                                                              [introduced] temp___462)))
                                                        then
                                                        (try
                                                        (try
                                                          (let temp___loop_entry_473
                                                            =
                                                            --pp_record_aggregate NOT IMPLEMENTED
                                                            in
                                                            (* While loop translating the Ada loop from main.adb:73 *);
                                                            ([sloc:main.adb:73] 
                                                            loop
                                                              (* Check for absence of RTE in the loop invariant and variant *)
                                                              
                                                              
                                                              (* Assume implicit invariants from the loop main.adb:73 *);
                                                              assume
                                                              { (_gnatprove_standard.Boolean.andb
                                                                   ((True /\
                                                                    (Main__lines__mystring___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Pin__pin___axiom.dynamic_invariant
                                                                    !Main__enter_pin.enter_pin
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True)
                                                                   ((1
                                                                    <= !Main__B_2__L_3__i.i)
                                                                    /\
                                                                    (!Main__B_2__L_3__i.i
                                                                    <= Main__B_2__L_3__R28b.r28b))) };
                                                              (* Continuation of loop after loop invariant and variant *);
                                                              ();
                                                              ([GP_Sloc:main.adb:75:67] 
                                                              ([sloc:main.adb:75] ()));
                                                              ([GP_Sloc:main.adb:75:56] 
                                                              ([sloc:main.adb:75] ()));
                                                              ([GP_Sloc:main.adb:75:40] 
                                                              ([sloc:main.adb:75] ()));
                                                              ([GP_Sloc:main.adb:75:16] 
                                                              ([sloc:main.adb:75] 
                                                              ([sloc:main.adb:75] (let main__B_2__B_4__tokstr__assume
                                                              =
                                                              (Main__lines__to_string___axiom.to_string
                                                                 ( ([sloc:main.adb:75] 
                                                                   ([GP_Id:10]
                                                                   [GP_Reason:VC_PRECONDITION]
                                                                   [GP_Sloc:main.adb:75:56]
                                                                   [vc:annotation]
                                                                   [GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring]
                                                                   [comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                        ^ main.adb:75:56:VC_PRECONDITION] (
                                                                   Main__lines__substring___axiom.substring
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED)
                                                                    ( (
                                                                    Standard__positive__rep.to_rep
                                                                    ( (
                                                                    Array__Int__Mystringtokeniser__tokenextent.get
                                                                    !Main__B_2__t.t
                                                                    assert
                                                                    { ([sloc:main.adb:75] 
                                                                    ([GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__selectcomp__ixdcomp]
                                                                    [vc:annotation]
                                                                    [GP_Sloc:main.adb:75:71]
                                                                    [comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                       ^ main.adb:75:71:VC_INDEX_CHECK]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Id:5] (
                                                                    (Main__B_2__TTtSP1.first
                                                                    <= !Main__B_2__L_3__i.i)
                                                                    /\
                                                                    (!Main__B_2__L_3__i.i
                                                                    <= Main__B_2__TTtSP1.last)))) };
                                                                    !Main__B_2__L_3__i.i)).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))
                                                                    ( 
                                                                    ([sloc:main.adb:75] 
                                                                    ([comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                      ^ main.adb:75:102:VC_RANGE_CHECK]
                                                                    [GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_RANGE_CHECK]
                                                                    [GP_Sloc:main.adb:75:102]
                                                                    [GP_Id:9] (
                                                                    Standard__positive.range_check_
                                                                    (([sloc:main.adb:75] 
                                                                    ([vc:annotation]
                                                                    [GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub__add]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                          ^ main.adb:75:90:VC_OVERFLOW_CHECK]
                                                                    [GP_Sloc:main.adb:75:90]
                                                                    [GP_Id:8] (
                                                                    Standard__integer.range_check_
                                                                    ((Standard__positive__rep.to_rep
                                                                    ( (
                                                                    Array__Int__Mystringtokeniser__tokenextent.get
                                                                    !Main__B_2__t.t
                                                                    assert
                                                                    { ([sloc:main.adb:75] 
                                                                    ([GP_Sloc:main.adb:75:82]
                                                                    [vc:annotation]
                                                                    [GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                  ^ main.adb:75:82:VC_INDEX_CHECK]
                                                                    [GP_Id:6] (
                                                                    (Main__B_2__TTtSP1.first
                                                                    <= !Main__B_2__L_3__i.i)
                                                                    /\
                                                                    (!Main__B_2__L_3__i.i
                                                                    <= Main__B_2__TTtSP1.last)))) };
                                                                    !Main__B_2__L_3__i.i)).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)
                                                                    + (Standard__natural__rep.to_rep
                                                                    ( (
                                                                    Array__Int__Mystringtokeniser__tokenextent.get
                                                                    !Main__B_2__t.t
                                                                    assert
                                                                    { ([sloc:main.adb:75] 
                                                                    ([vc:annotation]
                                                                    [comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                             ^ main.adb:75:93:VC_INDEX_CHECK]
                                                                    [GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Id:7]
                                                                    [GP_Sloc:main.adb:75:93] (
                                                                    (Main__B_2__TTtSP1.first
                                                                    <= !Main__B_2__L_3__i.i)
                                                                    /\
                                                                    (!Main__B_2__L_3__i.i
                                                                    <= Main__B_2__TTtSP1.last)))) };
                                                                    !Main__B_2__L_3__i.i)).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)))))
                                                                    - 1))))))))))
                                                              in (
                                                              Main__B_2__B_4__tokstr.tokstr
                                                              :=
                                                              (Standard__string.to_array
                                                                 main__B_2__B_4__tokstr__assume));
                                                              assume
                                                              { ((Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                   = (
                                                                   Standard__string.first
                                                                    main__B_2__B_4__tokstr__assume)) };
                                                              assume
                                                              { ((Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last)
                                                                   = (
                                                                   Standard__string.last
                                                                    main__B_2__B_4__tokstr__assume)) });
                                                              assume
                                                              { (Standard__string___axiom.dynamic_invariant
                                                                   (Standard__string.of_array
                                                                    !Main__B_2__B_4__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last))
                                                                   True False
                                                                   True True) })));
                                                              ([GP_Sloc:main.adb:77:16] 
                                                              ([sloc:main.adb:77] 
                                                              (if
                                                              ([sloc:main.adb:77] ([branch_id=1097]
                                                              _gnatprove_standard.Main.spark__branch
                                                              :=
                                                              (!Main__B_2__L_3__i.i
                                                                 = 1)));
                                                              ([branch_id=1097] _gnatprove_standard.Main.spark__branch).bool__content
                                                              then
                                                              ();
                                                              ([GP_Sloc:main.adb:79:19] 
                                                              ([sloc:main.adb:79] ()));
                                                              ([GP_Sloc:main.adb:79:48] 
                                                              ([sloc:main.adb:79] ()));
                                                              ([GP_Sloc:main.adb:79:35] 
                                                              ([sloc:main.adb:79] ()));
                                                              ([GP_Sloc:main.adb:79:27] 
                                                              ([sloc:main.adb:79] (let ([mlw:proxy_symbol]
                                                              [introduced] temp___464)
                                                              =
                                                              ( ([sloc:main.adb:79] 
                                                                ([GP_Id:11]
                                                                [GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__if__command_assign__call_from_string]
                                                                [GP_Reason:VC_PRECONDITION]
                                                                [comment:                  COMMAND := Lines.From_String(TokStr);                                   ^ main.adb:79:35:VC_PRECONDITION]
                                                                [vc:annotation]
                                                                [GP_Sloc:main.adb:79:35] (
                                                                Main__lines__from_string___axiom.from_string
                                                                  (Standard__string.of_array
                                                                    !Main__B_2__B_4__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last))))))
                                                              in (
                                                              Main__command.command__split_fields
                                                              :=
                                                              ([mlw:proxy_symbol]
                                                                [introduced] temp___464).Main__lines__mystring.__split_fields))))
                                                               else ())));
                                                              ([GP_Sloc:main.adb:81:16] 
                                                              ([sloc:main.adb:81] 
                                                              (if
                                                              ([sloc:main.adb:81] ([branch_id=1108]
                                                              _gnatprove_standard.Main.spark__branch
                                                              :=
                                                              (!Main__B_2__L_3__i.i
                                                                 = 2)));
                                                              ([branch_id=1108] _gnatprove_standard.Main.spark__branch).bool__content
                                                              then
                                                              ();
                                                              ([GP_Sloc:main.adb:83:22] 
                                                              ([sloc:main.adb:83] ()));
                                                              ([GP_Sloc:main.adb:83:19] 
                                                              ([sloc:main.adb:83] 
                                                              (if
                                                              ([sloc:main.adb:83] ([branch_id=1112]
                                                              _gnatprove_standard.Main.spark__branch
                                                              :=
                                                              (_gnatprove_standard.Boolean.andb
                                                                 (abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    (Standard__string.of_array
                                                                    !Main__B_2__B_4__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last))
                                                                    in ())  end;
                                                                    (
                                                                    _gnatprove_standard.Integer.length
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last))
                                                                    = 4)
                                                                 (let ([mlw:proxy_symbol]
                                                                 [introduced] temp___470)
                                                                 =
                                                                 (Standard__string.of_array
                                                                    !Main__B_2__B_4__tokstr.tokstr
                                                                    (
                                                                    Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                    (
                                                                    Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last))
                                                                 in
                                                                 (let ([mlw:proxy_symbol]
                                                                 [introduced] temp___469)
                                                                 =
                                                                 ( any  pre {}
                                                                   post {
                                                                   } return
                                                                   int) in
                                                                (if
                                                                (_gnatprove_standard.Boolean.andb
                                                                   ((Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___470))
                                                                    <= ([mlw:proxy_symbol]
                                                                    [introduced] temp___469))
                                                                   (([mlw:proxy_symbol]
                                                                    [introduced] temp___469)
                                                                    <= (
                                                                    Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___470))))
                                                                then
                                                                abstract
                                                                ensures
                                                                { True } begin 
                                                                 (let _ =
                                                                (let i =
                                                                  ( (
                                                                  Standard__character__rep.to_rep
                                                                    (
                                                                    Array__Int__Standard__character.get
                                                                    (Standard__string.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___470))
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___469))))
                                                                  in
                                                                  (_gnatprove_standard.Boolean.andb
                                                                    (i >= 48)
                                                                    (i <= 57)))
                                                                in ())  end ));
                                                                ( any  pre {}
                                                                post
                                                                {((result
                                                                    = True)
                                                                    <->
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___472)
                                                                    =
                                                                    (Standard__string.of_array
                                                                    !Main__B_2__B_4__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last))
                                                                    in
                                                                    --pp_universal_quantif NOT IMPLEMENTED))}
                                                                return bool)))));
                                                              ([branch_id=1112] _gnatprove_standard.Main.spark__branch).bool__content
                                                              then
                                                              ();
                                                              ([GP_Sloc:main.adb:86:22] 
                                                              ([sloc:main.adb:86] ()));
                                                              ([GP_Sloc:main.adb:86:51] 
                                                              ([sloc:main.adb:86] ()));
                                                              ([GP_Sloc:main.adb:86:38] 
                                                              ([sloc:main.adb:86] ()));
                                                              ([GP_Sloc:main.adb:86:32] 
                                                              ([sloc:main.adb:86] (
                                                              Main__enter_pin.enter_pin
                                                              :=
                                                              ([sloc:main.adb:86] 
                                                              ([GP_Id:12]
                                                              [GP_Reason:VC_PRECONDITION]
                                                              [vc:annotation]
                                                              [GP_Sloc:main.adb:86:38]
                                                              [comment:                     ENTER_PIN := PIN.From_String(TokStr);                                      ^ main.adb:86:38:VC_PRECONDITION]
                                                              [GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__if__if__enter_pin_assign__call_from_string] (
                                                              Pin__from_string___axiom.from_string
                                                                (Standard__string.of_array
                                                                   !Main__B_2__B_4__tokstr.tokstr
                                                                   (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__first)
                                                                   (Standard__integer__rep.to_rep
                                                                    Main__B_2__B_4__tokstr.tokstr__last))))))))
                                                               else
                                                              raise Temp___exception_468)))
                                                               else ())));
                                                            (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:73 *);
                                                            (if
                                                            (!Main__B_2__L_3__i.i
                                                               = ([mlw:proxy_symbol]
                                                               [introduced] temp___462))
                                                            then
                                                            raise Main__B_2__L_3.L_3
                                                            );
                                                            ([sloc:main.adb:73] (
                                                            Main__B_2__L_3__i.i
                                                            :=
                                                            (!Main__B_2__L_3__i.i
                                                               + 1)))
                                                             end loop)) with
                                                        | Temp___exception_468 
                                                        ->
                                                        ();
                                                        ([GP_Sloc:main.adb:88:22] 
                                                        ([sloc:main.adb:88] ()));
                                                        ([GP_Sloc:main.adb:88:22] 
                                                        ([sloc:main.adb:88] (
                                                         any
                                                          --pp_effects NOT IMPLEMENTED
                                                          pre {}
                                                        post {} return unit);
                                                        (Ada___ada__text_io__put__4___axiom.put
                                                           (let ([mlw:proxy_symbol]
                                                           [introduced] temp___467)
                                                           =
                                                           ( (Temp___String_Literal_466.temp___String_Literal_466
                                                                ())) in
                                                           (Standard__string.of_array
                                                              ([mlw:proxy_symbol]
                                                              [introduced] temp___467)
                                                              1 64)));
                                                        ()));
                                                        ([GP_Sloc:main.adb:89:22] 
                                                        ([sloc:main.adb:89] raise Return__exc))) with
                              | Main__B_2__L_3.L_3  -> ()) )))));
                          ([GP_Sloc:main.adb:97:63] ([sloc:main.adb:97] ()));
                          ([GP_Sloc:main.adb:97:22] ([sloc:main.adb:97] ()));
                          ([GP_Sloc:main.adb:97:35] ([sloc:main.adb:97] ()));
                          ([GP_Sloc:main.adb:97:15] ([sloc:main.adb:97] ()));
                          ([GP_Sloc:main.adb:97:7] ([sloc:main.adb:97] 
                                                   (if
                                                   ([sloc:main.adb:97] ([branch_id=1144]
                                                   _gnatprove_standard.Main.spark__branch
                                                   :=
                                                   (_gnatprove_standard.Boolean.andb
                                                      (Main__lines__equal___axiom.equal
                                                         ( --pp_record_aggregate NOT IMPLEMENTED)
                                                         ( ([sloc:main.adb:97] 
                                                           ([GP_Id:13]
                                                           [GP_Reason:VC_PRECONDITION]
                                                           [vc:annotation]
                                                           [comment:      if Lines.Equal(COMMAND,Lines.From_String("unlock")) and Current_State = locked then                                   ^ main.adb:97:35:VC_PRECONDITION]
                                                           [GP_Sloc:main.adb:97:35]
                                                           [GP_Shape:L_1_while__if__and__call_equal__call_from_string] (
                                                           Main__lines__from_string___axiom.from_string
                                                             (let ([mlw:proxy_symbol]
                                                             [introduced] temp___482)
                                                             =
                                                             ( (Temp___String_Literal_481.temp___String_Literal_481
                                                                  ())) in
                                                             (Standard__string.of_array
                                                                ([mlw:proxy_symbol]
                                                                [introduced] temp___482)
                                                                1 6)))))))
                                                      (!Main__current_state.current_state
                                                         = 0))));
                                                   ([branch_id=1144] _gnatprove_standard.Main.spark__branch).bool__content
                                                   then
                                                   ();
                                                   ([GP_Sloc:main.adb:99:10] 
                                                   ([sloc:main.adb:99] 
                                                   (if
                                                   ([sloc:main.adb:99] ([branch_id=1160]
                                                   _gnatprove_standard.Main.spark__branch
                                                   :=
                                                   (!Main__master_pin.master_pin
                                                      = !Main__enter_pin.enter_pin)));
                                                   ([branch_id=1160] _gnatprove_standard.Main.spark__branch).bool__content
                                                   then
                                                   ();
                                                   ([GP_Sloc:main.adb:100:13] 
                                                   ([sloc:main.adb:100] ()));
                                                   ([GP_Sloc:main.adb:100:27] 
                                                   ([sloc:main.adb:100] (
                                                   Main__current_state.current_state
                                                   := ( 1))))  else
                                                   raise Temp___exception_477)))
                                                    else
                                                   raise Temp___exception_480)));
                          ([GP_Sloc:main.adb:113:38] ([sloc:main.adb:113] 
                                                     (* Translation of an Ada loop from main.adb:113 *);
                                                     (if
                                                     (!Main__current_state.current_state
                                                        = 1)
                                                     then
                                                     (try
                                                     (try
                                                       (let temp___loop_entry_562
                                                         =
                                                         --pp_record_aggregate NOT IMPLEMENTED
                                                         in
                                                         (let temp___loop_entry_561
                                                         =
                                                         --pp_record_aggregate NOT IMPLEMENTED
                                                         in
                                                         (let temp___loop_entry_560
                                                         =
                                                         --pp_record_aggregate NOT IMPLEMENTED
                                                         in
                                                         (let temp___loop_entry_559
                                                         = !Main__db.db in
                                                         (let temp___loop_entry_558
                                                         =
                                                         --pp_record_aggregate NOT IMPLEMENTED
                                                         in
                                                         (* While loop translating the Ada loop from main.adb:113 *);
                                                         ([sloc:main.adb:113] 
                                                         loop
                                                           (* Check for absence of RTE in the loop invariant and variant *)
                                                           
                                                           
                                                           (* Assume implicit invariants from the loop main.adb:113 *);
                                                           assume
                                                           { (_gnatprove_standard.Boolean.andb
                                                                (((((((((True
                                                                    /\
                                                                    (Main__state___axiom.dynamic_invariant
                                                                    !Main__current_state.current_state
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Main__lines__mystring___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Variablestore__database___axiom.dynamic_invariant
                                                                    !Main__db.db
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True) /\
                                                                    (Standard__integer___axiom.dynamic_invariant
                                                                    !Main__number.number
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Variablestore__variable___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Operations__operandstack__stack___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True) /\
                                                                    (Pin__pin___axiom.dynamic_invariant
                                                                    !Main__master_pin.master_pin
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True) /\
                                                                    (
                                                                    Pin__pin___axiom.dynamic_invariant
                                                                    !Main__enter_pin.enter_pin
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True) /\
                                                                   (Main__lines__mystring___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                   True /\
                                                                   True)
                                                                (!Main__current_state.current_state
                                                                   = 1)) };
                                                           (* Continuation of loop after loop invariant and variant *);
                                                           ();
                                                           ([GP_Sloc:main.adb:114:10] 
                                                           ([sloc:main.adb:114] ()));
                                                           ([GP_Sloc:main.adb:114:10] 
                                                           ([sloc:main.adb:114] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                                                           (Ada___ada__text_io__put__4___axiom.put
                                                              (let ([mlw:proxy_symbol]
                                                              [introduced] temp___484)
                                                              =
                                                              ( (Temp___String_Literal_483.temp___String_Literal_483
                                                                   ())) in
                                                              (Standard__string.of_array
                                                                 ([mlw:proxy_symbol]
                                                                 [introduced] temp___484)
                                                                 1 10)));
                                                           ()));
                                                         ([GP_Sloc:main.adb:115:25] 
                                                         ([sloc:main.adb:115] ()));
                                                         ([GP_Sloc:main.adb:115:15] 
                                                         ([sloc:main.adb:115] ()));
                                                         ([GP_Sloc:main.adb:115:15] 
                                                         ([sloc:main.adb:115] (let ([mlw:proxy_symbol]
                                                         [introduced] temp___compl_485)
                                                         =
                                                         ( ( --pp_record_aggregate NOT IMPLEMENTED))
                                                         in
                                                         ( any
                                                            --pp_effects NOT IMPLEMENTED
                                                            pre {}
                                                         post {} return unit);
                                                         (Main__lines__get_line___axiom.get_line
                                                            Main__p.p__split_fields);
                                                         ())));
                                                         ([GP_Sloc:main.adb:117:13] 
                                                         ([sloc:main.adb:117] 
                                                         ([sloc:main.adb:117] ())));
                                                         ([GP_Sloc:main.adb:117:13] 
                                                         ([sloc:main.adb:117] 
                                                         ([sloc:main.adb:117] (
                                                         Main__B_6__t.t :=
                                                         (let ([mlw:proxy_symbol]
                                                           [introduced] temp___489)
                                                           =
                                                           ( (Main__B_6__t__aggregate_def.main__B_6__t__aggregate_def
                                                                ( --pp_record_aggregate NOT IMPLEMENTED)))
                                                           in
                                                           ([mlw:proxy_symbol]
                                                           [introduced] temp___489)));
                                                         assume
                                                         { (Main__B_6__TtS___axiom.dynamic_invariant
                                                              !Main__B_6__t.t
                                                              True False True
                                                              True) })));
                                                         ([GP_Sloc:main.adb:118:13] 
                                                         ([sloc:main.adb:118] 
                                                         ([sloc:main.adb:118] assume
                                                         { (Standard__natural___axiom.default_initial_assumption
                                                              !Main__B_6__numtokens.numtokens
                                                              False) };
                                                         assume
                                                         { (Standard__natural___axiom.dynamic_invariant
                                                              !Main__B_6__numtokens.numtokens
                                                              False False
                                                              True True) })));
                                                         ([GP_Sloc:main.adb:131:16] 
                                                         ([sloc:main.adb:131] ()));
                                                         ([GP_Sloc:main.adb:130:35] 
                                                         ([sloc:main.adb:130] ()));
                                                         ([GP_Sloc:main.adb:122:56] 
                                                         ([sloc:main.adb:122] ()));
                                                         ([GP_Sloc:main.adb:122:45] 
                                                         ([sloc:main.adb:122] ()));
                                                         ([GP_Sloc:main.adb:122:59] 
                                                         ([sloc:main.adb:122] ()));
                                                         ([GP_Sloc:main.adb:122:61] 
                                                         ([sloc:main.adb:122] ()));
                                                         ([GP_Sloc:main.adb:122:30] 
                                                         ([sloc:main.adb:122] ()));
                                                         ([GP_Sloc:main.adb:122:30] 
                                                         ([sloc:main.adb:122] (let ([mlw:proxy_symbol]
                                                         [introduced] temp___compl_491)
                                                         =
                                                         (let ([mlw:proxy_symbol]
                                                           [introduced] temp___490)
                                                           =
                                                           ( !Main__B_6__t.t)
                                                           in
                                                           (Mystringtokeniser__tokenarray.of_array
                                                              ([mlw:proxy_symbol]
                                                              [introduced] temp___490)
                                                              Main__B_6__TTtSP1.first
                                                              Main__B_6__TTtSP1.last))
                                                         in
                                                         --pp_binding_ref NOT IMPLEMENTED)));
                                                         ([GP_Sloc:main.adb:124:16] 
                                                         ([sloc:main.adb:124] ()));
                                                         ([GP_Sloc:main.adb:124:13] 
                                                         ([sloc:main.adb:124] 
                                                         (if
                                                         ([sloc:main.adb:124] ([branch_id=1229]
                                                         _gnatprove_standard.Main.spark__branch
                                                         :=
                                                         (!Main__B_6__numtokens.numtokens
                                                            > 2)));
                                                         ([branch_id=1229] _gnatprove_standard.Main.spark__branch).bool__content
                                                         then
                                                         raise Temp___exception_497
                                                          else ())));
                                                         ([GP_Sloc:main.adb:130:25] 
                                                         ([sloc:main.adb:130] ()));
                                                         ([GP_Sloc:main.adb:130:25] 
                                                         ([sloc:main.adb:130] 
                                                         ([sloc:main.adb:130] (let main__B_6__L_7__R43b__assume
                                                         =
                                                         !Main__B_6__numtokens.numtokens
                                                         in assume
                                                         { (main__B_6__L_7__R43b__assume
                                                              = Main__B_6__L_7__R43b.r43b) });
                                                         assume
                                                         { (Standard__natural___axiom.dynamic_invariant
                                                              Main__B_6__L_7__R43b.r43b
                                                              True False True
                                                              True) })));
                                                         ([GP_Sloc:main.adb:130:35] 
                                                         ([sloc:main.adb:130] (let ([mlw:proxy_symbol]
                                                         [introduced] temp___498)
                                                         = 1 in
                                                         (let ([mlw:proxy_symbol]
                                                         [introduced] temp___499)
                                                         =
                                                         Main__B_6__L_7__R43b.r43b
                                                         in (
                                                         Main__B_6__L_7__i.i
                                                         :=
                                                         ([mlw:proxy_symbol]
                                                           [introduced] temp___498));
                                                         (* Translation of an Ada loop from main.adb:130 *);
                                                         (if
                                                         (_gnatprove_standard.Boolean.andb
                                                            (([mlw:proxy_symbol]
                                                               [introduced] temp___498)
                                                               <= !Main__B_6__L_7__i.i)
                                                            (!Main__B_6__L_7__i.i
                                                               <= ([mlw:proxy_symbol]
                                                               [introduced] temp___499)))
                                                         then
                                                         (try
                                                         (try
                                                           (let temp___loop_entry_517
                                                             =
                                                             --pp_record_aggregate NOT IMPLEMENTED
                                                             in
                                                             (let temp___loop_entry_516
                                                             =
                                                             --pp_record_aggregate NOT IMPLEMENTED
                                                             in
                                                             (* While loop translating the Ada loop from main.adb:130 *);
                                                             ([sloc:main.adb:130] 
                                                             loop
                                                               (* Check for absence of RTE in the loop invariant and variant *)
                                                               
                                                               
                                                               (* Assume implicit invariants from the loop main.adb:130 *);
                                                               assume
                                                               { (_gnatprove_standard.Boolean.andb
                                                                    (
                                                                    (((True
                                                                    /\
                                                                    (Main__lines__mystring___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Standard__integer___axiom.dynamic_invariant
                                                                    !Main__number.number
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Variablestore__variable___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Pin__pin___axiom.dynamic_invariant
                                                                    !Main__enter_pin.enter_pin
                                                                    False
                                                                    True True
                                                                    True) /\
                                                                    True /\
                                                                    True)
                                                                    (
                                                                    (1
                                                                    <= !Main__B_6__L_7__i.i)
                                                                    /\
                                                                    (!Main__B_6__L_7__i.i
                                                                    <= Main__B_6__L_7__R43b.r43b))) };
                                                               (* Continuation of loop after loop invariant and variant *);
                                                               ();
                                                               ([GP_Sloc:main.adb:132:70] 
                                                               ([sloc:main.adb:132] ()));
                                                               ([GP_Sloc:main.adb:132:59] 
                                                               ([sloc:main.adb:132] ()));
                                                               ([GP_Sloc:main.adb:132:43] 
                                                               ([sloc:main.adb:132] ()));
                                                               ([GP_Sloc:main.adb:132:19] 
                                                               ([sloc:main.adb:132] 
                                                               ([sloc:main.adb:132] (let main__B_6__B_8__tokstr__assume
                                                               =
                                                               (Main__lines__to_string___axiom.to_string
                                                                  ( ([sloc:main.adb:132] 
                                                                    ([GP_Reason:VC_PRECONDITION]
                                                                    [GP_Sloc:main.adb:132:59]
                                                                    [vc:annotation]
                                                                    [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring]
                                                                    [GP_Id:20]
                                                                    [comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                           ^ main.adb:132:59:VC_PRECONDITION] (
                                                                    Main__lines__substring___axiom.substring
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED)
                                                                    ( (
                                                                    Standard__positive__rep.to_rep
                                                                    ( (
                                                                    Array__Int__Mystringtokeniser__tokenextent.get
                                                                    !Main__B_6__t.t
                                                                    assert
                                                                    { ([sloc:main.adb:132] 
                                                                    ([GP_Id:15]
                                                                    [comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                          ^ main.adb:132:74:VC_INDEX_CHECK]
                                                                    [vc:annotation]
                                                                    [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__selectcomp__ixdcomp]
                                                                    [GP_Sloc:main.adb:132:74]
                                                                    [GP_Reason:VC_INDEX_CHECK] (
                                                                    (Main__B_6__TTtSP1.first
                                                                    <= !Main__B_6__L_7__i.i)
                                                                    /\
                                                                    (!Main__B_6__L_7__i.i
                                                                    <= Main__B_6__TTtSP1.last)))) };
                                                                    !Main__B_6__L_7__i.i)).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))
                                                                    ( 
                                                                    ([sloc:main.adb:132] 
                                                                    ([GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub]
                                                                    [comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                         ^ main.adb:132:105:VC_RANGE_CHECK]
                                                                    [GP_Id:19]
                                                                    [GP_Sloc:main.adb:132:105]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_RANGE_CHECK] (
                                                                    Standard__positive.range_check_
                                                                    (([sloc:main.adb:132] 
                                                                    ([GP_Sloc:main.adb:132:93]
                                                                    [GP_Id:18]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub__add]
                                                                    [comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                             ^ main.adb:132:93:VC_OVERFLOW_CHECK] (
                                                                    Standard__integer.range_check_
                                                                    ((Standard__positive__rep.to_rep
                                                                    ( (
                                                                    Array__Int__Mystringtokeniser__tokenextent.get
                                                                    !Main__B_6__t.t
                                                                    assert
                                                                    { ([sloc:main.adb:132] 
                                                                    ([GP_Id:16]
                                                                    [vc:annotation]
                                                                    [GP_Sloc:main.adb:132:85]
                                                                    [comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                     ^ main.adb:132:85:VC_INDEX_CHECK]
                                                                    [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [GP_Reason:VC_INDEX_CHECK] (
                                                                    (Main__B_6__TTtSP1.first
                                                                    <= !Main__B_6__L_7__i.i)
                                                                    /\
                                                                    (!Main__B_6__L_7__i.i
                                                                    <= Main__B_6__TTtSP1.last)))) };
                                                                    !Main__B_6__L_7__i.i)).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)
                                                                    + (Standard__natural__rep.to_rep
                                                                    ( (
                                                                    Array__Int__Mystringtokeniser__tokenextent.get
                                                                    !Main__B_6__t.t
                                                                    assert
                                                                    { ([sloc:main.adb:132] 
                                                                    ([GP_Sloc:main.adb:132:96]
                                                                    [GP_Id:17]
                                                                    [comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                ^ main.adb:132:96:VC_INDEX_CHECK]
                                                                    [vc:annotation]
                                                                    [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [GP_Reason:VC_INDEX_CHECK] (
                                                                    (Main__B_6__TTtSP1.first
                                                                    <= !Main__B_6__L_7__i.i)
                                                                    /\
                                                                    (!Main__B_6__L_7__i.i
                                                                    <= Main__B_6__TTtSP1.last)))) };
                                                                    !Main__B_6__L_7__i.i)).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)))))
                                                                    - 1))))))))))
                                                               in (
                                                               Main__B_6__B_8__tokstr.tokstr
                                                               :=
                                                               (Standard__string.to_array
                                                                  main__B_6__B_8__tokstr__assume));
                                                               assume
                                                               { ((Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    = (
                                                                    Standard__string.first
                                                                    main__B_6__B_8__tokstr__assume)) };
                                                               assume
                                                               { ((Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last)
                                                                    = (
                                                                    Standard__string.last
                                                                    main__B_6__B_8__tokstr__assume)) });
                                                               assume
                                                               { (Standard__string___axiom.dynamic_invariant
                                                                    (
                                                                    Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))
                                                                    True
                                                                    False
                                                                    True True) })));
                                                               ([GP_Sloc:main.adb:134:19] 
                                                               ([sloc:main.adb:134] 
                                                               (if
                                                               ([sloc:main.adb:134] ([branch_id=1278]
                                                               _gnatprove_standard.Main.spark__branch
                                                               :=
                                                               (!Main__B_6__L_7__i.i
                                                                  = 1)));
                                                               ([branch_id=1278] _gnatprove_standard.Main.spark__branch).bool__content
                                                               then
                                                               ();
                                                               ([GP_Sloc:main.adb:136:22] 
                                                               ([sloc:main.adb:136] ()));
                                                               ([GP_Sloc:main.adb:136:51] 
                                                               ([sloc:main.adb:136] ()));
                                                               ([GP_Sloc:main.adb:136:38] 
                                                               ([sloc:main.adb:136] ()));
                                                               ([GP_Sloc:main.adb:136:30] 
                                                               ([sloc:main.adb:136] (let ([mlw:proxy_symbol]
                                                               [introduced] temp___501)
                                                               =
                                                               ( ([sloc:main.adb:136] 
                                                                 ([GP_Reason:VC_PRECONDITION]
                                                                 [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__if__command_assign__call_from_string]
                                                                 [GP_Sloc:main.adb:136:38]
                                                                 [vc:annotation]
                                                                 [GP_Id:21]
                                                                 [comment:                     COMMAND := Lines.From_String(TokStr);                                      ^ main.adb:136:38:VC_PRECONDITION] (
                                                                 Main__lines__from_string___axiom.from_string
                                                                   (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))))))
                                                               in (
                                                               Main__command.command__split_fields
                                                               :=
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___501).Main__lines__mystring.__split_fields))))
                                                                else 
                                                               ())));
                                                               ([GP_Sloc:main.adb:138:19] 
                                                               ([sloc:main.adb:138] 
                                                               (if
                                                               ([sloc:main.adb:138] ([branch_id=1289]
                                                               _gnatprove_standard.Main.spark__branch
                                                               :=
                                                               (!Main__B_6__L_7__i.i
                                                                  = 2)));
                                                               ([branch_id=1289] _gnatprove_standard.Main.spark__branch).bool__content
                                                               then
                                                               ();
                                                               ([GP_Sloc:main.adb:140:22] 
                                                               ([sloc:main.adb:140] ()));
                                                               ([GP_Sloc:main.adb:140:60] 
                                                               ([sloc:main.adb:140] ()));
                                                               ([GP_Sloc:main.adb:140:47] 
                                                               ([sloc:main.adb:140] ()));
                                                               ([GP_Sloc:main.adb:140:29] 
                                                               ([sloc:main.adb:140] (
                                                               Main__number.number
                                                               :=
                                                               (Stringtointeger__from_string___axiom.from_string
                                                                  (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))))));
                                                               ([GP_Sloc:main.adb:143:25] 
                                                               ([sloc:main.adb:143] ()));
                                                               ([GP_Sloc:main.adb:143:22] 
                                                               ([sloc:main.adb:143] 
                                                               (if
                                                               ([sloc:main.adb:143] ([branch_id=1300]
                                                               _gnatprove_standard.Main.spark__branch
                                                               :=
                                                               (([sloc:main.adb:143] 
                                                                ([GP_Sloc:main.adb:143:31]
                                                                [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__if__if__cmp__typeconv__length_ref]
                                                                [vc:annotation]
                                                                [GP_Reason:VC_RANGE_CHECK]
                                                                [comment:                     if TokStr'Length <= VariableStore.Max_Variable_Length then                               ^ main.adb:143:31:VC_RANGE_CHECK]
                                                                [GP_Id:23] (
                                                                Standard__integer.range_check_
                                                                  abstract
                                                                  ensures
                                                                  { True } begin 
                                                                   (let _ =
                                                                  (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))
                                                                  in ())  end;
                                                                  (_gnatprove_standard.Integer.length
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last)))))
                                                                  <= 1024)));
                                                               ([branch_id=1300] _gnatprove_standard.Main.spark__branch).bool__content
                                                               then
                                                               ();
                                                               ([GP_Sloc:main.adb:144:25] 
                                                               ([sloc:main.adb:144] ()));
                                                               ([GP_Sloc:main.adb:144:58] 
                                                               ([sloc:main.adb:144] ()));
                                                               ([GP_Sloc:main.adb:144:45] 
                                                               ([sloc:main.adb:144] ()));
                                                               ([GP_Sloc:main.adb:144:29] 
                                                               ([sloc:main.adb:144] (let ([mlw:proxy_symbol]
                                                               [introduced] temp___504)
                                                               =
                                                               ( ([sloc:main.adb:144] 
                                                                 ([GP_Reason:VC_PRECONDITION]
                                                                 [GP_Sloc:main.adb:144:45]
                                                                 [vc:annotation]
                                                                 [comment:                        VAR := VariableStore.From_String(TokStr);                                             ^ main.adb:144:45:VC_PRECONDITION]
                                                                 [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__if__if__var_assign__call_from_string]
                                                                 [GP_Id:22] (
                                                                 Variablestore__from_string___axiom.from_string
                                                                   (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))))))
                                                               in (
                                                               Main__var.var__split_fields
                                                               :=
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___504).Variablestore__variable.__split_fields))))
                                                                else
                                                               raise Temp___exception_507)));
                                                               ([GP_Sloc:main.adb:151:25] 
                                                               ([sloc:main.adb:151] ()));
                                                               ([GP_Sloc:main.adb:151:22] 
                                                               ([sloc:main.adb:151] 
                                                               (if
                                                               ([sloc:main.adb:151] ([branch_id=1319]
                                                               _gnatprove_standard.Main.spark__branch
                                                               :=
                                                               (_gnatprove_standard.Boolean.andb
                                                                  (abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))
                                                                    in ())  end;
                                                                    (_gnatprove_standard.Integer.length
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))
                                                                    = 4)
                                                                  (let ([mlw:proxy_symbol]
                                                                  [introduced] temp___513)
                                                                  =
                                                                  (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))
                                                                  in
                                                                  (let ([mlw:proxy_symbol]
                                                                  [introduced] temp___512)
                                                                  =
                                                                  ( any  pre
                                                                    {} post
                                                                    {
                                                                    } return
                                                                    int) in
                                                                 (if
                                                                 (_gnatprove_standard.Boolean.andb
                                                                    (
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___513))
                                                                    <= ([mlw:proxy_symbol]
                                                                    [introduced] temp___512))
                                                                    (
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___512)
                                                                    <= (
                                                                    Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___513))))
                                                                 then
                                                                 abstract
                                                                 ensures
                                                                 { True } begin 
                                                                  (let _ =
                                                                 (let i =
                                                                   ( (
                                                                   Standard__character__rep.to_rep
                                                                    (Array__Int__Standard__character.get
                                                                    (Standard__string.to_array
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___513))
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___512))))
                                                                   in
                                                                   (_gnatprove_standard.Boolean.andb
                                                                    (i >= 48)
                                                                    (i <= 57)))
                                                                 in ())  end ));
                                                                 ( any  pre {}
                                                                 post
                                                                 {((result
                                                                    = True)
                                                                    <->
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___515)
                                                                    =
                                                                    (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))
                                                                    in
                                                                    --pp_universal_quantif NOT IMPLEMENTED))}
                                                                 return bool)))));
                                                               ([branch_id=1319] _gnatprove_standard.Main.spark__branch).bool__content
                                                               then
                                                               ();
                                                               ([GP_Sloc:main.adb:154:25] 
                                                               ([sloc:main.adb:154] ()));
                                                               ([GP_Sloc:main.adb:154:54] 
                                                               ([sloc:main.adb:154] ()));
                                                               ([GP_Sloc:main.adb:154:41] 
                                                               ([sloc:main.adb:154] ()));
                                                               ([GP_Sloc:main.adb:154:35] 
                                                               ([sloc:main.adb:154] (
                                                               Main__enter_pin.enter_pin
                                                               :=
                                                               ([sloc:main.adb:154] 
                                                               ([GP_Reason:VC_PRECONDITION]
                                                               [comment:                        ENTER_PIN := PIN.From_String(TokStr);                                         ^ main.adb:154:41:VC_PRECONDITION]
                                                               [vc:annotation]
                                                               [GP_Sloc:main.adb:154:41]
                                                               [GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__if__if__enter_pin_assign__call_from_string]
                                                               [GP_Id:24] (
                                                               Pin__from_string___axiom.from_string
                                                                 (Standard__string.of_array
                                                                    !Main__B_6__B_8__tokstr.tokstr
                                                                    (
                                                                    Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    (
                                                                    Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))))))))
                                                                else
                                                               raise Temp___exception_511)))
                                                                else 
                                                               ())));
                                                             (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:130 *);
                                                             (if
                                                             (!Main__B_6__L_7__i.i
                                                                = ([mlw:proxy_symbol]
                                                                [introduced] temp___499))
                                                             then
                                                             raise Main__B_6__L_7.L_7
                                                             );
                                                             ([sloc:main.adb:130] (
                                                             Main__B_6__L_7__i.i
                                                             :=
                                                             (!Main__B_6__L_7__i.i
                                                                + 1)))
                                                              end loop))) with
                                                         | Temp___exception_511 
                                                         ->
                                                         ();
                                                         ([GP_Sloc:main.adb:156:25] 
                                                         ([sloc:main.adb:156] ()));
                                                         ([GP_Sloc:main.adb:156:25] 
                                                         ([sloc:main.adb:156] (
                                                          any
                                                           --pp_effects NOT IMPLEMENTED
                                                           pre {}
                                                         post {} return unit);
                                                         (Ada___ada__text_io__put__4___axiom.put
                                                            (let ([mlw:proxy_symbol]
                                                            [introduced] temp___510)
                                                            =
                                                            ( (Temp___String_Literal_509.temp___String_Literal_509
                                                                 ())) in
                                                            (Standard__string.of_array
                                                               ([mlw:proxy_symbol]
                                                               [introduced] temp___510)
                                                               1 64)));
                                                         ()));
                                                         ([GP_Sloc:main.adb:157:25] 
                                                         ([sloc:main.adb:157] raise Return__exc))
                                                         | Temp___exception_507 
                                                         ->
                                                         ();
                                                         ([GP_Sloc:main.adb:146:25] 
                                                         ([sloc:main.adb:146] ()));
                                                         ([GP_Sloc:main.adb:146:25] 
                                                         ([sloc:main.adb:146] (
                                                          any
                                                           --pp_effects NOT IMPLEMENTED
                                                           pre {}
                                                         post {} return unit);
                                                         (Ada___ada__text_io__put__4___axiom.put
                                                            (let ([mlw:proxy_symbol]
                                                            [introduced] temp___506)
                                                            =
                                                            ( (Temp___String_Literal_505.temp___String_Literal_505
                                                                 ())) in
                                                            (Standard__string.of_array
                                                               ([mlw:proxy_symbol]
                                                               [introduced] temp___506)
                                                               1 60)));
                                                         ()));
                                                         ([GP_Sloc:main.adb:147:25] 
                                                         ([sloc:main.adb:147] raise Return__exc))) with
                                                         | Main__B_6__L_7.L_7 
                                                         -> ()) )))));
                                                     ([GP_Sloc:main.adb:167:64] 
                                                     ([sloc:main.adb:167] ()));
                                                     ([GP_Sloc:main.adb:167:25] 
                                                     ([sloc:main.adb:167] ()));
                                                     ([GP_Sloc:main.adb:167:38] 
                                                     ([sloc:main.adb:167] ()));
                                                     ([GP_Sloc:main.adb:167:18] 
                                                     ([sloc:main.adb:167] ()));
                                                     ([GP_Sloc:main.adb:167:10] 
                                                     ([sloc:main.adb:167] 
                                                     (if
                                                     ([sloc:main.adb:167] ([branch_id=1351]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:167] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [GP_Id:35]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [comment:         if Lines.Equal(COMMAND,Lines.From_String("lock")) and Current_State = unlocked then                                      ^ main.adb:167:38:VC_PRECONDITION]
                                                             [GP_Sloc:main.adb:167:38] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___557)
                                                               =
                                                               ( (Temp___String_Literal_556.temp___String_Literal_556
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___557)
                                                                  1 4)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1351] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:168:13] 
                                                     ([sloc:main.adb:168] ()));
                                                     ([GP_Sloc:main.adb:168:27] 
                                                     ([sloc:main.adb:168] ()));
                                                     ([GP_Sloc:main.adb:168:24] 
                                                     ([sloc:main.adb:168] (
                                                     Main__master_pin.master_pin
                                                     :=
                                                     !Main__enter_pin.enter_pin)));
                                                     ([GP_Sloc:main.adb:169:13] 
                                                     ([sloc:main.adb:169] ()));
                                                     ([GP_Sloc:main.adb:169:27] 
                                                     ([sloc:main.adb:169] (
                                                     Main__current_state.current_state
                                                     := ( 0))))  else
                                                     ([GP_Sloc:main.adb:172:10] 
                                                     (if
                                                     ([sloc:main.adb:172] ([branch_id=1373]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:172] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("+")) and Current_State = unlocked then                                         ^ main.adb:172:41:VC_PRECONDITION]
                                                             [GP_Id:34]
                                                             [GP_Sloc:main.adb:172:41]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___555)
                                                               =
                                                               ( (Temp___String_Literal_554.temp___String_Literal_554
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___555)
                                                                  1 1)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1373] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:173:31] 
                                                     ([sloc:main.adb:173] ()));
                                                     ([GP_Sloc:main.adb:173:25] 
                                                     ([sloc:main.adb:173] ()));
                                                     ([GP_Sloc:main.adb:173:25] 
                                                     ([sloc:main.adb:173] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_553)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__plus___axiom.plus
                                                        Main__opstack.opstack__split_fields);
                                                     ())))  else
                                                     ([GP_Sloc:main.adb:174:10] 
                                                     (if
                                                     ([sloc:main.adb:174] ([branch_id=1393]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:174] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [GP_Sloc:main.adb:174:41]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("-")) and Current_State = unlocked then                                         ^ main.adb:174:41:VC_PRECONDITION]
                                                             [GP_Id:33]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___552)
                                                               =
                                                               ( (Temp___String_Literal_551.temp___String_Literal_551
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___552)
                                                                  1 1)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1393] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:175:32] 
                                                     ([sloc:main.adb:175] ()));
                                                     ([GP_Sloc:main.adb:175:25] 
                                                     ([sloc:main.adb:175] ()));
                                                     ([GP_Sloc:main.adb:175:25] 
                                                     ([sloc:main.adb:175] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_550)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__minus___axiom.minus
                                                        Main__opstack.opstack__split_fields);
                                                     ())))  else
                                                     ([GP_Sloc:main.adb:176:10] 
                                                     (if
                                                     ([sloc:main.adb:176] ([branch_id=1413]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:176] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [GP_Sloc:main.adb:176:41]
                                                             [vc:annotation]
                                                             [GP_Id:32]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("*")) and Current_State = unlocked then                                         ^ main.adb:176:41:VC_PRECONDITION] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___549)
                                                               =
                                                               ( (Temp___String_Literal_548.temp___String_Literal_548
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___549)
                                                                  1 1)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1413] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:177:35] 
                                                     ([sloc:main.adb:177] ()));
                                                     ([GP_Sloc:main.adb:177:25] 
                                                     ([sloc:main.adb:177] ()));
                                                     ([GP_Sloc:main.adb:177:25] 
                                                     ([sloc:main.adb:177] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_547)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__multiply___axiom.multiply
                                                        Main__opstack.opstack__split_fields);
                                                     ())))  else
                                                     ([GP_Sloc:main.adb:178:10] 
                                                     (if
                                                     ([sloc:main.adb:178] ([branch_id=1433]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:178] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [GP_Id:31]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("/")) and Current_State = unlocked then                                         ^ main.adb:178:41:VC_PRECONDITION]
                                                             [GP_Sloc:main.adb:178:41] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___546)
                                                               =
                                                               ( (Temp___String_Literal_545.temp___String_Literal_545
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___546)
                                                                  1 1)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1433] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:179:33] 
                                                     ([sloc:main.adb:179] ()));
                                                     ([GP_Sloc:main.adb:179:25] 
                                                     ([sloc:main.adb:179] ()));
                                                     ([GP_Sloc:main.adb:179:25] 
                                                     ([sloc:main.adb:179] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_544)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__divide___axiom.divide
                                                        Main__opstack.opstack__split_fields);
                                                     ())))  else
                                                     ([GP_Sloc:main.adb:180:10] 
                                                     (if
                                                     ([sloc:main.adb:180] ([branch_id=1453]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:180] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [GP_Id:30]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("push")) and Current_State = unlocked then                                         ^ main.adb:180:41:VC_PRECONDITION]
                                                             [GP_Sloc:main.adb:180:41] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___543)
                                                               =
                                                               ( (Temp___String_Literal_542.temp___String_Literal_542
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___543)
                                                                  1 4)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1453] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:181:42] 
                                                     ([sloc:main.adb:181] ()));
                                                     ([GP_Sloc:main.adb:181:51] 
                                                     ([sloc:main.adb:181] ()));
                                                     ([GP_Sloc:main.adb:181:26] 
                                                     ([sloc:main.adb:181] ()));
                                                     ([GP_Sloc:main.adb:181:26] 
                                                     ([sloc:main.adb:181] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_541)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__push_operation___axiom.push_operation
                                                        Main__opstack.opstack__split_fields
                                                        !Main__number.number);
                                                     ())))  else
                                                     ([GP_Sloc:main.adb:182:10] 
                                                     (if
                                                     ([sloc:main.adb:182] ([branch_id=1474]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:182] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("pop")) and Current_State = unlocked then                                         ^ main.adb:182:41:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [GP_Sloc:main.adb:182:41]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [GP_Id:29] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___540)
                                                               =
                                                               ( (Temp___String_Literal_539.temp___String_Literal_539
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___540)
                                                                  1 3)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1474] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:183:40] 
                                                     ([sloc:main.adb:183] ()));
                                                     ([GP_Sloc:main.adb:183:49] 
                                                     ([sloc:main.adb:183] ()));
                                                     ([GP_Sloc:main.adb:183:25] 
                                                     ([sloc:main.adb:183] ()));
                                                     ([GP_Sloc:main.adb:183:25] 
                                                     ([sloc:main.adb:183] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_537)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_538)
                                                     = !Main__number.number
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__pop_operation___axiom.pop_operation
                                                        Main__opstack.opstack__split_fields
                                                        Main__number.number);
                                                     ()))))  else
                                                     ([GP_Sloc:main.adb:184:10] 
                                                     (if
                                                     ([sloc:main.adb:184] ([branch_id=1495]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:184] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [GP_Sloc:main.adb:184:41]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("load")) and Current_State = unlocked then                                         ^ main.adb:184:41:VC_PRECONDITION]
                                                             [GP_Id:28] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___536)
                                                               =
                                                               ( (Temp___String_Literal_535.temp___String_Literal_535
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___536)
                                                                  1 4)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1495] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:185:31] 
                                                     ([sloc:main.adb:185] ()));
                                                     ([GP_Sloc:main.adb:185:36] 
                                                     ([sloc:main.adb:185] ()));
                                                     ([GP_Sloc:main.adb:185:40] 
                                                     ([sloc:main.adb:185] ()));
                                                     ([GP_Sloc:main.adb:185:25] 
                                                     ([sloc:main.adb:185] ()));
                                                     ([GP_Sloc:main.adb:185:25] 
                                                     ([sloc:main.adb:185] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_534)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__load___axiom.load
                                                        ( --pp_record_aggregate NOT IMPLEMENTED)
                                                        ( !Main__db.db)
                                                        Main__opstack.opstack__split_fields);
                                                     ())))  else
                                                     ([GP_Sloc:main.adb:186:10] 
                                                     (if
                                                     ([sloc:main.adb:186] ([branch_id=1517]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:186] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("store")) and Current_State = unlocked then                                         ^ main.adb:186:41:VC_PRECONDITION]
                                                             [GP_Sloc:main.adb:186:41]
                                                             [vc:annotation]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [GP_Id:27] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___533)
                                                               =
                                                               ( (Temp___String_Literal_532.temp___String_Literal_532
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___533)
                                                                  1 5)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1517] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:187:32] 
                                                     ([sloc:main.adb:187] ()));
                                                     ([GP_Sloc:main.adb:187:37] 
                                                     ([sloc:main.adb:187] ()));
                                                     ([GP_Sloc:main.adb:187:41] 
                                                     ([sloc:main.adb:187] ()));
                                                     ([GP_Sloc:main.adb:187:25] 
                                                     ([sloc:main.adb:187] ()));
                                                     ([GP_Sloc:main.adb:187:25] 
                                                     ([sloc:main.adb:187] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_529)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_530)
                                                     = ( !Main__db.db) in
                                                     (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_531)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__store___axiom.store
                                                        Main__var.var__split_fields
                                                        Main__db.db
                                                        Main__opstack.opstack__split_fields);
                                                     ())))))  else
                                                     ([GP_Sloc:main.adb:188:10] 
                                                     (if
                                                     ([sloc:main.adb:188] ([branch_id=1539]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:188] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("remove")) and Current_State = unlocked then                                         ^ main.adb:188:41:VC_PRECONDITION]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [GP_Id:26]
                                                             [GP_Sloc:main.adb:188:41] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___528)
                                                               =
                                                               ( (Temp___String_Literal_527.temp___String_Literal_527
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___528)
                                                                  1 6)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1539] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:189:33] 
                                                     ([sloc:main.adb:189] ()));
                                                     ([GP_Sloc:main.adb:189:38] 
                                                     ([sloc:main.adb:189] ()));
                                                     ([GP_Sloc:main.adb:189:25] 
                                                     ([sloc:main.adb:189] ()));
                                                     ([GP_Sloc:main.adb:189:25] 
                                                     ([sloc:main.adb:189] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_525)
                                                     =
                                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                                     in
                                                     (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_526)
                                                     = ( !Main__db.db) in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                                                     (Operations__remove___axiom.remove
                                                        Main__var.var__split_fields
                                                        Main__db.db);
                                                     ()))))  else
                                                     ([GP_Sloc:main.adb:190:10] 
                                                     (if
                                                     ([sloc:main.adb:190] ([branch_id=1560]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        (Main__lines__equal___axiom.equal
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           ( ([sloc:main.adb:190] 
                                                             ([GP_Reason:VC_PRECONDITION]
                                                             [vc:annotation]
                                                             [comment:         elsif Lines.Equal(COMMAND,Lines.From_String("list")) and Current_State = unlocked then                                         ^ main.adb:190:41:VC_PRECONDITION]
                                                             [GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                             [GP_Id:25]
                                                             [GP_Sloc:main.adb:190:41] (
                                                             Main__lines__from_string___axiom.from_string
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___524)
                                                               =
                                                               ( (Temp___String_Literal_523.temp___String_Literal_523
                                                                    ())) in
                                                               (Standard__string.of_array
                                                                  ([mlw:proxy_symbol]
                                                                  [introduced] temp___524)
                                                                  1 4)))))))
                                                        (!Main__current_state.current_state
                                                           = 1))));
                                                     ([branch_id=1560] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:main.adb:191:31] 
                                                     ([sloc:main.adb:191] ()));
                                                     ([GP_Sloc:main.adb:191:25] 
                                                     ([sloc:main.adb:191] ()));
                                                     ([GP_Sloc:main.adb:191:25] 
                                                     ([sloc:main.adb:191] (
                                                      any
                                                       --pp_effects NOT IMPLEMENTED
                                                       pre {}
                                                     post {} return unit);
                                                     (Operations__list___axiom.list
                                                        ( !Main__db.db));
                                                     ()))  else
                                                     raise Temp___exception_522)))))))))))))))))))))));
(* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:113 *);
(if --pp_not NOT IMPLEMENTED then raise Main__L_5.L_5 )
 end loop)))))) with
| Temp___exception_522  ->
();
([GP_Sloc:main.adb:193:13] ([sloc:main.adb:193] ()));
([GP_Sloc:main.adb:193:13] ([sloc:main.adb:193] ( any
                                                   --pp_effects NOT IMPLEMENTED
                                                   pre {}
                           post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___521) =
   ( (Temp___String_Literal_520.temp___String_Literal_520 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___521) 1
      60)));
()));
([GP_Sloc:main.adb:194:13] ([sloc:main.adb:194] raise Return__exc))
| Temp___exception_497  ->
();
([GP_Sloc:main.adb:125:16] ([sloc:main.adb:125] ()));
([GP_Sloc:main.adb:125:16] ([sloc:main.adb:125] ( any
                                                   --pp_effects NOT IMPLEMENTED
                                                   pre {}
                           post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___496) =
   ( (Temp___String_Literal_495.temp___String_Literal_495 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___496) 1
      48)));
()));
([GP_Sloc:main.adb:126:16] ([sloc:main.adb:126] raise Return__exc))) with
| Main__L_5.L_5  -> ())
)));
(* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:56 *);
(if --pp_not NOT IMPLEMENTED then raise Main__L_1.L_1 )
 end loop)))))) with
| Temp___exception_480  ->
();
([GP_Sloc:main.adb:106:10] ([sloc:main.adb:106] ()));
([GP_Sloc:main.adb:106:10] ([sloc:main.adb:106] ( any
                                                   --pp_effects NOT IMPLEMENTED
                                                   pre {}
                           post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___479) =
   ( (Temp___String_Literal_478.temp___String_Literal_478 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___479) 1
      58)));
()));
([GP_Sloc:main.adb:107:10] ([sloc:main.adb:107] raise Return__exc))
| Temp___exception_460  ->
();
([GP_Sloc:main.adb:69:13] ([sloc:main.adb:69] ()));
([GP_Sloc:main.adb:69:13] ([sloc:main.adb:69] ( any
                                                 --pp_effects NOT IMPLEMENTED
                                                 pre {}
                          post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___459) =
   ( (Temp___String_Literal_458.temp___String_Literal_458 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___459) 1
      36)));
()));
([GP_Sloc:main.adb:70:13] ([sloc:main.adb:70] raise Return__exc))
| Temp___exception_477  ->
();
([GP_Sloc:main.adb:102:13] ([sloc:main.adb:102] ()));
([GP_Sloc:main.adb:102:13] ([sloc:main.adb:102] ( any
                                                   --pp_effects NOT IMPLEMENTED
                                                   pre {}
                           post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___476) =
   ( (Temp___String_Literal_475.temp___String_Literal_475 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___476) 1
      23)));
()));
([GP_Sloc:main.adb:103:13] ([sloc:main.adb:103] raise Return__exc))) with
| Main__L_1.L_1  -> ()) )));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = True in ())  end

end
