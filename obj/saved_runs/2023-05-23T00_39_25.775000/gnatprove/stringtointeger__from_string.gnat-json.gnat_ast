(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module for defining the constant "s" defined at stringtointeger.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Stringtointeger__from_string__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function [model_trace:1030] [model_projected] [name:S]
    [sloc:stringtointeger.ads:6] s () requires {  } ensures  {  } returns
    Standard__string.string__

end

(* Module for defining a ref holding the value of variable "result" defined at stringtointeger.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Stringtointeger__from_string__result
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val result__ [model_trace:827] [model_projected]
  [name:Result] [sloc:stringtointeger.adb:4]: int

end

(* Module for defining a ref holding the value of variable "c" defined at stringtointeger.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Stringtointeger__from_string__c
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val c [model_projected] [name:C]
  [model_trace:832] [sloc:stringtointeger.adb:5]: int

end

(* Module for defining a ref holding the value of variable "negate" defined at stringtointeger.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Stringtointeger__from_string__negate
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val negate [model_projected] [model_trace:835]
  [name:Negate] [sloc:stringtointeger.adb:6]: bool

end

(* Module for defining a ref holding the value of variable "pos" defined at stringtointeger.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Stringtointeger__from_string__pos
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val pos [model_projected] [name:Pos]
  [model_trace:839] [sloc:stringtointeger.adb:7]: int

end

(* Module for defining the loop exit exception for the loop "L_1" defined at stringtointeger.adb:22, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Stringtointeger__from_string__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "result" defined at stringtointeger.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "c" defined at stringtointeger.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__c___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "negate" defined at stringtointeger.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__negate___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "pos" defined at stringtointeger.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__pos___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at stringtointeger.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "s" defined at stringtointeger.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringtointeger__from_string__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__string___axiom
  use        Stringtointeger__from_string__s
  use        Stringtointeger__from_string__result
  use        Stringtointeger__from_string__c
  use        Stringtointeger__from_string__negate
  use        Stringtointeger__from_string__pos
  use        Stringtointeger__from_string__L_1
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Stringtointeger__from_string__result___axiom
  use        Stringtointeger__from_string__c___axiom
  use        Stringtointeger__from_string__negate___axiom
  use        Stringtointeger__from_string__pos___axiom
  use        Stringtointeger__from_string__L_1___axiom
  use        Stringtointeger__from_string__s___axiom
  
  val stringtointeger__from_string__result [model_trace:1029@result]
  [name:From_String]
  [model_projected] : int
  
  --pp_exception_declaration NOT IMPLEMENTED
  
  function [GP_Subp:stringtointeger.ads:6] [sloc:stringtointeger.ads:6] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram stringtointeger.ads:6 *);
        assume
        { (Standard__string___axiom.dynamic_invariant
             Stringtointeger__from_string__s.s True False True True) };
        (* Assume moved pointers in outputs of the subprogram stringtointeger.ads:6 *);
        (* Check for RTE in the Pre of the subprogram stringtointeger.ads:6 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram stringtointeger.ads:6 *);
        (try
        ();
          ([sloc:stringtointeger.adb:3] ());
          ([sloc:stringtointeger.adb:4] (
          Stringtointeger__from_string__result.result__ := ( 0));
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Stringtointeger__from_string__result.result__ True False True
               True) });
          ([sloc:stringtointeger.adb:5] assume
          { (Standard__integer___axiom.default_initial_assumption
               !Stringtointeger__from_string__c.c False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Stringtointeger__from_string__c.c False False True True) });
          ([sloc:stringtointeger.adb:6] (
          Stringtointeger__from_string__negate.negate :=
          (_gnatprove_standard.Boolean.of_int 0)));
          ([sloc:stringtointeger.adb:7] assume
          { (Standard__integer___axiom.default_initial_assumption
               !Stringtointeger__from_string__pos.pos False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Stringtointeger__from_string__pos.pos False False True True) });
          ([sloc:stringtointeger.adb:22] ());
          ();
          ([GP_Sloc:stringtointeger.adb:9:7] ([sloc:stringtointeger.adb:9] 
                                             (if
                                             ([sloc:stringtointeger.adb:9] ([branch_id=843]
                                             _gnatprove_standard.Main.spark__branch
                                             :=
                                             (abstract ensures
                                                { True } begin  (let _ =
                                                               Stringtointeger__from_string__s.s
                                                               in ())  end;
                                                (Standard__string.length
                                                   Stringtointeger__from_string__s.s)
                                                <= 0)));
                                             ([branch_id=843] _gnatprove_standard.Main.spark__branch).bool__content
                                             then
                                             ();
                                             ([GP_Sloc:stringtointeger.adb:10:10] 
                                             ([sloc:stringtointeger.adb:10] (
                                             stringtointeger__from_string__result
                                             := ( 0));
                                             raise Return__exc))  else 
                                             ())));
          ([GP_Sloc:stringtointeger.adb:12:7] ([sloc:stringtointeger.adb:12] ()));
          ([GP_Sloc:stringtointeger.adb:12:11] ([sloc:stringtointeger.adb:12] (
                                               Stringtointeger__from_string__pos.pos
                                               :=
                                               ( abstract ensures
                                               { True } begin  (let _ =
                                                              Stringtointeger__from_string__s.s
                                                              in ())  end;
                                               (Standard__string.first
                                                  Stringtointeger__from_string__s.s)))));
          ([GP_Sloc:stringtointeger.adb:13:12] ([sloc:stringtointeger.adb:13] ()));
          ([GP_Sloc:stringtointeger.adb:13:7] ([sloc:stringtointeger.adb:13] 
                                              (if
                                              ([sloc:stringtointeger.adb:13] ([branch_id=856]
                                              _gnatprove_standard.Main.spark__branch
                                              :=
                                              ((Standard__character__rep.to_rep
                                                  (Array__Int__Standard__character.get
                                                     (Standard__string.to_array
                                                        Stringtointeger__from_string__s.s)
                                                     assert
                                                     { ([sloc:stringtointeger.adb:13] 
                                                       ([GP_Sloc:stringtointeger.adb:13:12]
                                                       [vc:annotation]
                                                       [GP_Shape:if__cmp__ixdcomp]
                                                       [GP_Reason:VC_INDEX_CHECK]
                                                       [GP_Id:1]
                                                       [comment:      if S(Pos) = '-' then            ^ stringtointeger.adb:13:12:VC_INDEX_CHECK] (
                                                       ((Standard__string.first
                                                           Stringtointeger__from_string__s.s)
                                                          <= !Stringtointeger__from_string__pos.pos)
                                                         /\
                                                         (!Stringtointeger__from_string__pos.pos
                                                            <= (Standard__string.last
                                                                  Stringtointeger__from_string__s.s))))) };
                                                     !Stringtointeger__from_string__pos.pos))
                                                 = 45)));
                                              ([branch_id=856] _gnatprove_standard.Main.spark__branch).bool__content
                                              then
                                              ();
                                              ([GP_Sloc:stringtointeger.adb:14:10] 
                                              ([sloc:stringtointeger.adb:14] ()));
                                              ([GP_Sloc:stringtointeger.adb:14:17] 
                                              ([sloc:stringtointeger.adb:14] (
                                              Stringtointeger__from_string__negate.negate
                                              :=
                                              (_gnatprove_standard.Boolean.of_int
                                                 1))));
                                              ([GP_Sloc:stringtointeger.adb:15:10] 
                                              ([sloc:stringtointeger.adb:15] 
                                              (if
                                              ([sloc:stringtointeger.adb:15] ([branch_id=865]
                                              _gnatprove_standard.Main.spark__branch
                                              :=
                                              (abstract ensures
                                                 { True } begin  (let _ =
                                                                Stringtointeger__from_string__s.s
                                                                in ())  end;
                                                 (Standard__string.length
                                                    Stringtointeger__from_string__s.s)
                                                 <= 1)));
                                              ([branch_id=865] _gnatprove_standard.Main.spark__branch).bool__content
                                              then
                                              ();
                                              ([GP_Sloc:stringtointeger.adb:16:13] 
                                              ([sloc:stringtointeger.adb:16] (
                                              stringtointeger__from_string__result
                                              := ( 0));
                                              raise Return__exc))  else 
                                              ())));
                                              ([GP_Sloc:stringtointeger.adb:18:10] 
                                              ([sloc:stringtointeger.adb:18] ()));
                                              ([GP_Sloc:stringtointeger.adb:18:14] 
                                              ([sloc:stringtointeger.adb:18] (
                                              Stringtointeger__from_string__pos.pos
                                              :=
                                              ( ([sloc:stringtointeger.adb:18] 
                                                ([GP_Shape:if__pos_assign__add]
                                                [vc:annotation]
                                                [GP_Reason:VC_OVERFLOW_CHECK]
                                                [GP_Id:0]
                                                [GP_Sloc:stringtointeger.adb:18:25]
                                                [comment:         Pos := S'First + 1;                         ^ stringtointeger.adb:18:25:VC_OVERFLOW_CHECK] (
                                                Standard__integer.range_check_
                                                  (abstract ensures
                                                     { True } begin  (let _ =
                                                                    Stringtointeger__from_string__s.s
                                                                    in ())  end;
                                                     (Standard__string.first
                                                        Stringtointeger__from_string__s.s)
                                                     + 1))))))))
                                               else ())));
          ([GP_Sloc:stringtointeger.adb:22:27] ([sloc:stringtointeger.adb:22] 
                                               (* Translation of an Ada loop from stringtointeger.adb:22 *);
                                               (if
                                               (!Stringtointeger__from_string__pos.pos
                                                  <= abstract ensures
                                                  { True } begin  (let _ =
                                                                 Stringtointeger__from_string__s.s
                                                                 in ())  end;
                                                  (Standard__string.last
                                                     Stringtointeger__from_string__s.s))
                                               then
                                               (try
                                               (try
                                                 (* While loop translating the Ada loop from stringtointeger.adb:22 *);
                                                   ([sloc:stringtointeger.adb:23] 
                                                   loop
                                                     (* Check for absence of RTE in the loop invariant and variant *);
                                                     (let ([mlw:proxy_symbol]
                                                     [introduced] temp___inv_182)
                                                     =
                                                     (_gnatprove_standard.Boolean.andb
                                                        (_gnatprove_standard.Boolean.andb
                                                           (!Stringtointeger__from_string__pos.pos
                                                              >= abstract
                                                              ensures
                                                              { True } begin 
                                                               (let _ =
                                                              Stringtointeger__from_string__s.s
                                                              in ())  end;
                                                              (Standard__string.first
                                                                 Stringtointeger__from_string__s.s))
                                                           (!Stringtointeger__from_string__pos.pos
                                                              <= abstract
                                                              ensures
                                                              { True } begin 
                                                               (let _ =
                                                              Stringtointeger__from_string__s.s
                                                              in ())  end;
                                                              (Standard__string.last
                                                                 Stringtointeger__from_string__s.s)))
                                                        (if
                                                        !Stringtointeger__from_string__negate.negate
                                                        then
                                                        (!Stringtointeger__from_string__result.result__
                                                           <= 0)
                                                         else
                                                        (!Stringtointeger__from_string__result.result__
                                                           >= 0))) in
                                                     abstract ensures
                                                     { True } begin  (let _ =
                                                                    () in
                                                                    ())  end)
                                                     invariant
                                                     {([sloc:stringtointeger.adb:23] 
                                                      ([GP_Id:11]
                                                      [GP_Reason:VC_LOOP_INVARIANT]
                                                      [GP_Shape:L_1_while__pragargs__and]
                                                      [vc:annotation]
                                                      [GP_Sloc:stringtointeger.adb:23:33]
                                                      [comment:         pragma Loop_Invariant (Pos >= S'First and Pos <= S'Last and                                  ^ stringtointeger.adb:23:33:VC_LOOP_INVARIANT] (
                                                      (([GP_Sloc:stringtointeger.adb:23:33]
                                                       [GP_Pretty_Ada:893] (
                                                       !Stringtointeger__from_string__pos.pos
                                                         >= (Standard__string.first
                                                               Stringtointeger__from_string__s.s)))
                                                         /\
                                                         ([GP_Pretty_Ada:899]
                                                         [GP_Sloc:stringtointeger.adb:23:52] (
                                                         !Stringtointeger__from_string__pos.pos
                                                           <= (Standard__string.last
                                                                 Stringtointeger__from_string__s.s))))
                                                        /\
                                                        (if
                                                        (!Stringtointeger__from_string__negate.negate
                                                           = True)
                                                        then
                                                        ([GP_Pretty_Ada:906]
                                                        [GP_Sloc:stringtointeger.adb:24:49] (
                                                        !Stringtointeger__from_string__result.result__
                                                          <= 0))
                                                         else
                                                        ([GP_Sloc:stringtointeger.adb:24:66]
                                                        [GP_Pretty_Ada:909] (
                                                        !Stringtointeger__from_string__result.result__
                                                          >= 0))))))}
                                                     
                                                     (* Assume implicit invariants from the loop stringtointeger.adb:22 *);
                                                     assume
                                                     { (_gnatprove_standard.Boolean.andb
                                                          (((True /\
                                                               (Standard__integer___axiom.dynamic_invariant
                                                                  !Stringtointeger__from_string__result.result__
                                                                  True True
                                                                  True True)
                                                               /\ True /\
                                                               True) /\
                                                              (Standard__integer___axiom.dynamic_invariant
                                                                 !Stringtointeger__from_string__c.c
                                                                 False True
                                                                 True True)
                                                              /\ True /\ True)
                                                             /\
                                                             (Standard__integer___axiom.dynamic_invariant
                                                                !Stringtointeger__from_string__pos.pos
                                                                False True
                                                                True True) /\
                                                             True /\ True)
                                                          (!Stringtointeger__from_string__pos.pos
                                                             <= (Standard__string.last
                                                                   Stringtointeger__from_string__s.s))) };
                                                     (* Continuation of loop after loop invariant and variant *);
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:26:33] 
                                                     ([sloc:stringtointeger.adb:26] ()));
                                                     ([GP_Sloc:stringtointeger.adb:26:10] 
                                                     ([sloc:stringtointeger.adb:26] 
                                                     (if
                                                     ([sloc:stringtointeger.adb:26] ([branch_id=911]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (214748364
                                                        < !Stringtointeger__from_string__result.result__)));
                                                     ([branch_id=911] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:27:13] 
                                                     ([sloc:stringtointeger.adb:27] (
                                                     stringtointeger__from_string__result
                                                     :=
                                                     ( 0));
                                                     raise Return__exc)) 
                                                     else ())));
                                                     ([GP_Sloc:stringtointeger.adb:29:34] 
                                                     ([sloc:stringtointeger.adb:29] ()));
                                                     ([GP_Sloc:stringtointeger.adb:29:10] 
                                                     ([sloc:stringtointeger.adb:29] 
                                                     (if
                                                     ([sloc:stringtointeger.adb:29] ([branch_id=921]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (-214748364
                                                        > !Stringtointeger__from_string__result.result__)));
                                                     ([branch_id=921] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:30:13] 
                                                     ([sloc:stringtointeger.adb:30] (
                                                     stringtointeger__from_string__result
                                                     :=
                                                     ( 0));
                                                     raise Return__exc)) 
                                                     else ())));
                                                     ([GP_Sloc:stringtointeger.adb:32:10] 
                                                     ([sloc:stringtointeger.adb:32] ()));
                                                     ([GP_Sloc:stringtointeger.adb:32:20] 
                                                     ([sloc:stringtointeger.adb:32] ()));
                                                     ([GP_Sloc:stringtointeger.adb:32:17] 
                                                     ([sloc:stringtointeger.adb:32] (
                                                     Stringtointeger__from_string__result.result__
                                                     :=
                                                     ( ([sloc:stringtointeger.adb:32] 
                                                       ([comment:         Result := Result * 10;                           ^ stringtointeger.adb:32:27:VC_OVERFLOW_CHECK]
                                                       [vc:annotation]
                                                       [GP_Shape:L_1_while__result_assign__mult]
                                                       [GP_Reason:VC_OVERFLOW_CHECK]
                                                       [GP_Sloc:stringtointeger.adb:32:27]
                                                       [GP_Id:2] (Standard__integer.range_check_
                                                                    (
                                                                    !Stringtointeger__from_string__result.result__
                                                                    * 10))))))));
                                                     ([GP_Sloc:stringtointeger.adb:33:15] 
                                                     ([sloc:stringtointeger.adb:33] ()));
                                                     ([GP_Sloc:stringtointeger.adb:33:33] 
                                                     ([sloc:stringtointeger.adb:33] ()));
                                                     ([GP_Sloc:stringtointeger.adb:33:10] 
                                                     ([sloc:stringtointeger.adb:33] 
                                                     (if
                                                     ([sloc:stringtointeger.adb:33] ([branch_id=936]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (_gnatprove_standard.Boolean.andb
                                                        ((Standard__character__rep.to_rep
                                                            (Array__Int__Standard__character.get
                                                               (Standard__string.to_array
                                                                  Stringtointeger__from_string__s.s)
                                                               assert
                                                               { ([sloc:stringtointeger.adb:33] 
                                                                 ([GP_Shape:L_1_while__if__and__cmp__ixdcomp]
                                                                 [comment:         if S(Pos) >= '0' and S(Pos) <= '9' then               ^ stringtointeger.adb:33:15:VC_INDEX_CHECK]
                                                                 [GP_Sloc:stringtointeger.adb:33:15]
                                                                 [vc:annotation]
                                                                 [GP_Reason:VC_INDEX_CHECK]
                                                                 [GP_Id:8] (
                                                                 ((Standard__string.first
                                                                    Stringtointeger__from_string__s.s)
                                                                    <= !Stringtointeger__from_string__pos.pos)
                                                                   /\
                                                                   (!Stringtointeger__from_string__pos.pos
                                                                    <= (
                                                                    Standard__string.last
                                                                    Stringtointeger__from_string__s.s))))) };
                                                               !Stringtointeger__from_string__pos.pos))
                                                           >= 48)
                                                        ((Standard__character__rep.to_rep
                                                            (Array__Int__Standard__character.get
                                                               (Standard__string.to_array
                                                                  Stringtointeger__from_string__s.s)
                                                               assert
                                                               { ([sloc:stringtointeger.adb:33] 
                                                                 ([GP_Shape:L_1_while__if__and__cmp__ixdcomp]
                                                                 [vc:annotation]
                                                                 [GP_Sloc:stringtointeger.adb:33:33]
                                                                 [comment:         if S(Pos) >= '0' and S(Pos) <= '9' then                                 ^ stringtointeger.adb:33:33:VC_INDEX_CHECK]
                                                                 [GP_Reason:VC_INDEX_CHECK]
                                                                 [GP_Id:9] (
                                                                 ((Standard__string.first
                                                                    Stringtointeger__from_string__s.s)
                                                                    <= !Stringtointeger__from_string__pos.pos)
                                                                   /\
                                                                   (!Stringtointeger__from_string__pos.pos
                                                                    <= (
                                                                    Standard__string.last
                                                                    Stringtointeger__from_string__s.s))))) };
                                                               !Stringtointeger__from_string__pos.pos))
                                                           <= 57))));
                                                     ([branch_id=936] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:34:13] 
                                                     ([sloc:stringtointeger.adb:34] ()));
                                                     ([GP_Sloc:stringtointeger.adb:34:34] 
                                                     ([sloc:stringtointeger.adb:34] ()));
                                                     ([GP_Sloc:stringtointeger.adb:34:15] 
                                                     ([sloc:stringtointeger.adb:34] (
                                                     Stringtointeger__from_string__c.c
                                                     :=
                                                     ( ((Standard__character__rep.to_rep
                                                           (Array__Int__Standard__character.get
                                                              (Standard__string.to_array
                                                                 Stringtointeger__from_string__s.s)
                                                              assert
                                                              { ([sloc:stringtointeger.adb:34] 
                                                                ([comment:            C := Character'Pos(S(Pos)) - Character'Pos('0');                                  ^ stringtointeger.adb:34:34:VC_INDEX_CHECK]
                                                                [vc:annotation]
                                                                [GP_Reason:VC_INDEX_CHECK]
                                                                [GP_Id:3]
                                                                [GP_Sloc:stringtointeger.adb:34:34]
                                                                [GP_Shape:L_1_while__if__c_assign__sub__typeconv__pos_ref__ixdcomp] (
                                                                ((Standard__string.first
                                                                    Stringtointeger__from_string__s.s)
                                                                   <= !Stringtointeger__from_string__pos.pos)
                                                                  /\
                                                                  (!Stringtointeger__from_string__pos.pos
                                                                    <= (
                                                                    Standard__string.last
                                                                    Stringtointeger__from_string__s.s))))) };
                                                              !Stringtointeger__from_string__pos.pos))
                                                          - 48)))));
                                                     ([GP_Sloc:stringtointeger.adb:35:16] 
                                                     ([sloc:stringtointeger.adb:35] ()));
                                                     ([GP_Sloc:stringtointeger.adb:35:13] 
                                                     ([sloc:stringtointeger.adb:35] 
                                                     (if
                                                     ([sloc:stringtointeger.adb:35] ([branch_id=961]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     !Stringtointeger__from_string__negate.negate));
                                                     ([branch_id=961] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:36:35] 
                                                     ([sloc:stringtointeger.adb:36] ()));
                                                     ([GP_Sloc:stringtointeger.adb:36:39] 
                                                     ([sloc:stringtointeger.adb:36] ()));
                                                     ([GP_Sloc:stringtointeger.adb:36:16] 
                                                     ([sloc:stringtointeger.adb:36] 
                                                     (if
                                                     ([sloc:stringtointeger.adb:36] ([branch_id=963]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (([sloc:stringtointeger.adb:36] 
                                                      ([comment:               if Integer'First + C > Result then                                 ^ stringtointeger.adb:36:33:VC_OVERFLOW_CHECK]
                                                      [vc:annotation]
                                                      [GP_Reason:VC_OVERFLOW_CHECK]
                                                      [GP_Shape:L_1_while__if__if__if__cmp__add]
                                                      [GP_Sloc:stringtointeger.adb:36:33]
                                                      [GP_Id:5] (Standard__integer.range_check_
                                                                   (-2147483648
                                                                    + !Stringtointeger__from_string__c.c))))
                                                        > !Stringtointeger__from_string__result.result__)));
                                                     ([branch_id=963] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:37:19] 
                                                     ([sloc:stringtointeger.adb:37] (
                                                     stringtointeger__from_string__result
                                                     :=
                                                     ( 0));
                                                     raise Return__exc)) 
                                                     else
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:39:19] 
                                                     ([sloc:stringtointeger.adb:39] ()));
                                                     ([GP_Sloc:stringtointeger.adb:39:29] 
                                                     ([sloc:stringtointeger.adb:39] ()));
                                                     ([GP_Sloc:stringtointeger.adb:39:38] 
                                                     ([sloc:stringtointeger.adb:39] ()));
                                                     ([GP_Sloc:stringtointeger.adb:39:26] 
                                                     ([sloc:stringtointeger.adb:39] (
                                                     Stringtointeger__from_string__result.result__
                                                     :=
                                                     ( ([sloc:stringtointeger.adb:39] 
                                                       ([GP_Shape:L_1_while__if__if__if__result_assign__sub]
                                                       [vc:annotation]
                                                       [comment:                  Result := Result - C;                                    ^ stringtointeger.adb:39:36:VC_OVERFLOW_CHECK]
                                                       [GP_Reason:VC_OVERFLOW_CHECK]
                                                       [GP_Id:4]
                                                       [GP_Sloc:stringtointeger.adb:39:36] (
                                                       Standard__integer.range_check_
                                                         (!Stringtointeger__from_string__result.result__
                                                            - !Stringtointeger__from_string__c.c)))))))))))
                                                      else
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:42:34] 
                                                     ([sloc:stringtointeger.adb:42] ()));
                                                     ([GP_Sloc:stringtointeger.adb:42:38] 
                                                     ([sloc:stringtointeger.adb:42] ()));
                                                     ([GP_Sloc:stringtointeger.adb:42:16] 
                                                     ([sloc:stringtointeger.adb:42] 
                                                     (if
                                                     ([sloc:stringtointeger.adb:42] ([branch_id=978]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (([sloc:stringtointeger.adb:42] 
                                                      ([GP_Sloc:stringtointeger.adb:42:32]
                                                      [comment:               if Integer'Last - C < Result then                                ^ stringtointeger.adb:42:32:VC_OVERFLOW_CHECK]
                                                      [vc:annotation]
                                                      [GP_Reason:VC_OVERFLOW_CHECK]
                                                      [GP_Shape:L_1_while__if__if__if__cmp__sub]
                                                      [GP_Id:7] (Standard__integer.range_check_
                                                                   (2147483647
                                                                    - !Stringtointeger__from_string__c.c))))
                                                        < !Stringtointeger__from_string__result.result__)));
                                                     ([branch_id=978] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:43:19] 
                                                     ([sloc:stringtointeger.adb:43] (
                                                     stringtointeger__from_string__result
                                                     :=
                                                     ( 0));
                                                     raise Return__exc)) 
                                                     else
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:45:19] 
                                                     ([sloc:stringtointeger.adb:45] ()));
                                                     ([GP_Sloc:stringtointeger.adb:45:29] 
                                                     ([sloc:stringtointeger.adb:45] ()));
                                                     ([GP_Sloc:stringtointeger.adb:45:38] 
                                                     ([sloc:stringtointeger.adb:45] ()));
                                                     ([GP_Sloc:stringtointeger.adb:45:26] 
                                                     ([sloc:stringtointeger.adb:45] (
                                                     Stringtointeger__from_string__result.result__
                                                     :=
                                                     ( ([sloc:stringtointeger.adb:45] 
                                                       ([vc:annotation]
                                                       [comment:                  Result := Result + C;                                    ^ stringtointeger.adb:45:36:VC_OVERFLOW_CHECK]
                                                       [GP_Reason:VC_OVERFLOW_CHECK]
                                                       [GP_Sloc:stringtointeger.adb:45:36]
                                                       [GP_Shape:L_1_while__if__if__if__result_assign__add]
                                                       [GP_Id:6] (Standard__integer.range_check_
                                                                    (
                                                                    !Stringtointeger__from_string__result.result__
                                                                    + !Stringtointeger__from_string__c.c))))))))))))))
                                                      else
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:49:13] 
                                                     ([sloc:stringtointeger.adb:49] (
                                                     stringtointeger__from_string__result
                                                     :=
                                                     ( 0));
                                                     raise Return__exc)))));
                                                     ([GP_Sloc:stringtointeger.adb:51:14] 
                                                     ([sloc:stringtointeger.adb:51] ()));
                                                     ([GP_Sloc:stringtointeger.adb:51:10] 
                                                     ([sloc:stringtointeger.adb:51] 
                                                     (if
                                                     ([sloc:stringtointeger.adb:51] ([branch_id=995]
                                                     _gnatprove_standard.Main.spark__branch
                                                     :=
                                                     (!Stringtointeger__from_string__pos.pos
                                                        < abstract ensures
                                                        { True } begin 
                                                         (let _ =
                                                        Stringtointeger__from_string__s.s
                                                        in ())  end;
                                                        (Standard__string.last
                                                           Stringtointeger__from_string__s.s))));
                                                     ([branch_id=995] _gnatprove_standard.Main.spark__branch).bool__content
                                                     then
                                                     ();
                                                     ([GP_Sloc:stringtointeger.adb:52:13] 
                                                     ([sloc:stringtointeger.adb:52] ()));
                                                     ([GP_Sloc:stringtointeger.adb:52:20] 
                                                     ([sloc:stringtointeger.adb:52] ()));
                                                     ([GP_Sloc:stringtointeger.adb:52:17] 
                                                     ([sloc:stringtointeger.adb:52] (
                                                     Stringtointeger__from_string__pos.pos
                                                     :=
                                                     ( ([sloc:stringtointeger.adb:52] 
                                                       ([GP_Id:10]
                                                       [comment:            Pos := Pos + 1;                        ^ stringtointeger.adb:52:24:VC_OVERFLOW_CHECK]
                                                       [GP_Shape:L_1_while__if__pos_assign__add]
                                                       [vc:annotation]
                                                       [GP_Reason:VC_OVERFLOW_CHECK]
                                                       [GP_Sloc:stringtointeger.adb:52:24] (
                                                       Standard__integer.range_check_
                                                         (!Stringtointeger__from_string__pos.pos
                                                            + 1))))))))
                                                      else
                                                     raise Temp___exception_181)));
                                                     (* Check for the exit condition and loop statements appearing before the loop invariant of loop stringtointeger.adb:22 *);
                                                     (if
                                                     --pp_not NOT IMPLEMENTED
                                                     then
                                                     raise Stringtointeger__from_string__L_1.L_1
                                                     )
                                                      end loop) with
                                                 | Temp___exception_181  ->
                                                 ();
                                                 ([GP_Sloc:stringtointeger.adb:54:20] 
                                                 ([sloc:stringtointeger.adb:54] ()));
                                                 ([GP_Sloc:stringtointeger.adb:54:13] 
                                                 ([sloc:stringtointeger.adb:54] (
                                                 stringtointeger__from_string__result
                                                 :=
                                                 !Stringtointeger__from_string__result.result__);
                                                 raise Return__exc))) with
                                               | Stringtointeger__from_string__L_1.L_1 
                                               -> ()) )));
          ([GP_Sloc:stringtointeger.adb:58:14] ([sloc:stringtointeger.adb:58] ()));
          ([GP_Sloc:stringtointeger.adb:58:7] ([sloc:stringtointeger.adb:58] (
                                              stringtointeger__from_string__result
                                              :=
                                              !Stringtointeger__from_string__result.result__);
                                              raise Return__exc));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        !stringtointeger__from_string__result

end
