module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Standard__natural
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type natural = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = natural,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type natural__ref = { mutable natural__content : natural }
  
  function natural__ref_natural__content__projection (a: natural__ref) : natural =
    a.natural__content
  
  meta "model_projection" function natural__ref_natural__content__projection
  
  meta "inline:no" function natural__ref_natural__content__projection
  
  val natural__havoc (x: natural__ref) : unit
    writes { x }
end

module Standard__natural___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural as Standard__natural
  
  predicate dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) =
    if ((temp___is_init_42 = True) \/
          (Standard__natural.first <= Standard__natural.last)) then
      (((Standard__natural.dynamic_property Standard__natural.first)
          Standard__natural.last)
         temp___expr_46)
    else true
  
  val dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_46 : int))
                      (temp___is_init_42 : bool))
                     (temp___skip_constant_43 : bool))
                    (temp___do_toplevel_44 : bool))
                   (temp___do_typ_inv_45 : bool)) }
  
  predicate default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) =
    true
  
  val default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_47 : int))
                   (temp___skip_top_level_48 : bool)) }
end

module Standard__natural__rep
  use Standard__natural as Standard__natural
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__natural.natural) : int =
    Standard__natural.natural'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__natural.natural,
    predicate in_range = Standard__natural.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__positive__rep
  use Standard__positive as Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__positive.positive) : int =
    Standard__positive.positive'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__positive.positive,
    predicate in_range = Standard__positive.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Variablestore__database__rep
  use _gnatprove_standard.Main
  use int.Int
  
  type __rep
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  val function bool_eq (a: __rep) (b: __rep) : bool
end

module Variablestore__database
  use export Variablestore__database__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type database = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function user_eq (a: database) (b: database) : bool
  
  val function dummy : database
  
  type database__ref = { mutable database__content : database }
  
  function database__ref_database__content__projection (a: database__ref) : database =
    a.database__content
  
  meta "model_projection" function database__ref_database__content__projection
  
  meta "inline:no" function database__ref_database__content__projection
  
  val database__havoc (x: database__ref) : unit
    writes { x }
end

module Main__db
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__database as Variablestore__database
  
  val db : Variablestore__database.database__ref
end

module Variablestore__variables__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t13s = <range 0 1024>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1024 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t13s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t13s__ref = { mutable t13s__content : t13s }
  
  function t13s__ref_t13s__content__projection (a: t13s__ref) : t13s =
    a.t13s__content
  
  meta "model_projection" function t13s__ref_t13s__content__projection
  
  meta "inline:no" function t13s__ref_t13s__content__projection
  
  val t13s__havoc (x: t13s__ref) : unit
    writes { x }
end

module Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Variablestore__variables__mystring__T13s.t13s) : int =
    Variablestore__variables__mystring__T13s.t13s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Variablestore__variables__mystring__T13s.t13s,
    predicate in_range = Variablestore__variables__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Variablestore__variables__mystringstr
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type component_type = Standard__character.character
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (1024 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Variablestore__variables__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__mystringstr as Variablestore__variables__mystringstr
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type __split_fields = {
                       rec__variablestore__variables__mystring__length :
                         Variablestore__variables__mystring__T13s.t13s;
                       rec__variablestore__variables__mystring__str :
                         Array__Int__Standard__character.map
                       }
  
  function __split_fields_rec__variablestore__variables__mystring__length__projection (a: __split_fields) : 
    Variablestore__variables__mystring__T13s.t13s =
    a.rec__variablestore__variables__mystring__length
  
  meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  function __split_fields_rec__variablestore__variables__mystring__str__projection (a: __split_fields) : 
    Array__Int__Standard__character.map =
    a.rec__variablestore__variables__mystring__str
  
  meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate variablestore__variables__mystring__length__pred (a: __rep) =
    true
  
  val variablestore__variables__mystring__length__pred (a: __rep) : bool
    ensures { result
                <->
                (variablestore__variables__mystring__length__pred (a : __rep)) }
  
  val rec__variablestore__variables__mystring__length_ (a: __rep) : Variablestore__variables__mystring__T13s.t13s
    requires { variablestore__variables__mystring__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__variablestore__variables__mystring__length)) }
  
  predicate variablestore__variables__mystring__str__pred (a: __rep) = true
  
  val variablestore__variables__mystring__str__pred (a: __rep) : bool
    ensures { result
                <->
                (variablestore__variables__mystring__str__pred (a : __rep)) }
  
  val rec__variablestore__variables__mystring__str_ (a: __rep) : Array__Int__Standard__character.map
    requires { variablestore__variables__mystring__str__pred a }
    ensures { (result
                 = ((__split_fields a).rec__variablestore__variables__mystring__str)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Variablestore__variables__mystring__T13s__rep.to_rep
            ((__split_fields a).rec__variablestore__variables__mystring__length))
           = (Variablestore__variables__mystring__T13s__rep.to_rep
                ((__split_fields b).rec__variablestore__variables__mystring__length))) /\
          ((Variablestore__variables__mystringstr.bool_eq
              ((__split_fields a).rec__variablestore__variables__mystring__str))
             ((__split_fields b).rec__variablestore__variables__mystring__str))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Variablestore__variable
  use export Variablestore__variables__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type variable = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function variablestore__variables__mystring__length__first__bit : 
    int
  
  val function variablestore__variables__mystring__length__last__bit : 
    int
  
  val function variablestore__variables__mystring__length__position : 
    int
  
  axiom variablestore__variables__mystring__length__first__bit_axiom:
    (variablestore__variables__mystring__length__first__bit >= (0 : int))
  
  axiom variablestore__variables__mystring__length__last__bit_axiom:
    (variablestore__variables__mystring__length__last__bit
       > variablestore__variables__mystring__length__first__bit)
  
  axiom variablestore__variables__mystring__length__position_axiom:
    (variablestore__variables__mystring__length__position >= (0 : int))
  
  val function variablestore__variables__mystring__str__first__bit : 
    int
  
  val function variablestore__variables__mystring__str__last__bit : int
  
  val function variablestore__variables__mystring__str__position : int
  
  axiom variablestore__variables__mystring__str__first__bit_axiom:
    (variablestore__variables__mystring__str__first__bit >= (0 : int))
  
  axiom variablestore__variables__mystring__str__last__bit_axiom:
    (variablestore__variables__mystring__str__last__bit
       > variablestore__variables__mystring__str__first__bit)
  
  axiom variablestore__variables__mystring__str__position_axiom:
    (variablestore__variables__mystring__str__position >= (0 : int))
  
  val function user_eq (a: variable) (b: variable) : bool
  
  val function dummy : variable
  
  type variable__ref = { mutable variable__content : variable }
  
  function variable__ref_variable__content__projection (a: variable__ref) : variable =
    a.variable__content
  
  meta "model_projection" function variable__ref_variable__content__projection
  
  meta "inline:no" function variable__ref_variable__content__projection
  
  val variable__havoc (x: variable__ref) : unit
    writes { x }
end

module Variablestore__from_string
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  use Variablestore__variable as Variablestore__variable
  
  val function from_string (s: Standard__string.string__) : Variablestore__variable.variable
  
  val predicate from_string__function_guard (temp___result_163: Variablestore__variable.variable) (s: 
    Standard__string.string__)
end

module Variablestore__variable___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variable as Variablestore__variable
  
  predicate dynamic_invariant (temp___expr_237: Variablestore__variable.variable) (temp___is_init_233: bool) (temp___skip_constant_234: bool) (temp___do_toplevel_235: bool) (temp___do_typ_inv_236: bool) =
    true
  
  val dynamic_invariant (temp___expr_237: Variablestore__variable.variable) (temp___is_init_233: bool) (temp___skip_constant_234: bool) (temp___do_toplevel_235: bool) (temp___do_typ_inv_236: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_237 : Variablestore__variable.variable))
                      (temp___is_init_233 : bool))
                     (temp___skip_constant_234 : bool))
                    (temp___do_toplevel_235 : bool))
                   (temp___do_typ_inv_236 : bool)) }
  
  predicate default_initial_assumption (temp___expr_239: Variablestore__variable.variable) (temp___skip_top_level_240: bool) =
    true
  
  val default_initial_assumption (temp___expr_239: Variablestore__variable.variable) (temp___skip_top_level_240: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_239 : Variablestore__variable.variable))
                   (temp___skip_top_level_240 : bool)) }
end

module Variablestore__from_string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__string as Standard__string
  use Variablestore__variable as Variablestore__variable
  use Variablestore__from_string as Variablestore__from_string
  use Variablestore__variable___axiom as Variablestore__variable___axiom
  
  val from_string (s: Standard__string.string__) : Variablestore__variable.variable
    requires { [@GP_Pretty_Ada:45081]
               ((Standard__string.length s) <= (1024 : int))
    }
    ensures { (((result = (Variablestore__from_string.from_string s)) /\
                  ((Variablestore__from_string.from_string__function_guard
                      result)
                     s)) /\
                 (((((Variablestore__variable___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
end

module Main__var
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variable as Variablestore__variable
  
  val var__split_fields : Variablestore__variable.__split_fields__ref
end

module Main__master_pin
  use _gnatprove_standard.Main
  use int.Int
  
  val master_pin : int__ref
end

module Main__enter_pin
  use _gnatprove_standard.Main
  use int.Int
  
  val enter_pin : int__ref
end

module Main__lines__mystring__T14b
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t14b = <range 0 2048>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t14b,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t14b__ref = { mutable t14b__content : t14b }
  
  function t14b__ref_t14b__content__projection (a: t14b__ref) : t14b =
    a.t14b__content
  
  meta "model_projection" function t14b__ref_t14b__content__projection
  
  meta "inline:no" function t14b__ref_t14b__content__projection
  
  val t14b__havoc (x: t14b__ref) : unit
    writes { x }
end

module Main__lines__mystring__T14b__rep
  use Main__lines__mystring__T14b as Main__lines__mystring__T14b
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Main__lines__mystring__T14b.t14b) : int =
    Main__lines__mystring__T14b.t14b'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Main__lines__mystring__T14b.t14b,
    predicate in_range = Main__lines__mystring__T14b.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Main__lines__mystringstr
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type component_type = Standard__character.character
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Main__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring__T14b as Main__lines__mystring__T14b
  use Main__lines__mystring__T14b__rep as Main__lines__mystring__T14b__rep
  use Main__lines__mystringstr as Main__lines__mystringstr
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type __split_fields = {
                       rec__main__lines__mystring__length :
                         Main__lines__mystring__T14b.t14b;
                       rec__main__lines__mystring__str :
                         Array__Int__Standard__character.map
                       }
  
  function __split_fields_rec__main__lines__mystring__length__projection (a: __split_fields) : 
    Main__lines__mystring__T14b.t14b =
    a.rec__main__lines__mystring__length
  
  meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
  
  meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
  
  function __split_fields_rec__main__lines__mystring__str__projection (a: __split_fields) : 
    Array__Int__Standard__character.map =
    a.rec__main__lines__mystring__str
  
  meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
  
  meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate main__lines__mystring__length__pred (a: __rep) = true
  
  val main__lines__mystring__length__pred (a: __rep) : bool
    ensures { result <-> (main__lines__mystring__length__pred (a : __rep)) }
  
  val rec__main__lines__mystring__length_ (a: __rep) : Main__lines__mystring__T14b.t14b
    requires { main__lines__mystring__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__main__lines__mystring__length)) }
  
  predicate main__lines__mystring__str__pred (a: __rep) = true
  
  val main__lines__mystring__str__pred (a: __rep) : bool
    ensures { result <-> (main__lines__mystring__str__pred (a : __rep)) }
  
  val rec__main__lines__mystring__str_ (a: __rep) : Array__Int__Standard__character.map
    requires { main__lines__mystring__str__pred a }
    ensures { (result = ((__split_fields a).rec__main__lines__mystring__str)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Main__lines__mystring__T14b__rep.to_rep
            ((__split_fields a).rec__main__lines__mystring__length))
           = (Main__lines__mystring__T14b__rep.to_rep
                ((__split_fields b).rec__main__lines__mystring__length))) /\
          ((Main__lines__mystringstr.bool_eq
              ((__split_fields a).rec__main__lines__mystring__str))
             ((__split_fields b).rec__main__lines__mystring__str))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Main__lines__mystring
  use export Main__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type mystring = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function main__lines__mystring__length__first__bit : int
  
  val function main__lines__mystring__length__last__bit : int
  
  val function main__lines__mystring__length__position : int
  
  axiom main__lines__mystring__length__first__bit_axiom:
    (main__lines__mystring__length__first__bit >= (0 : int))
  
  axiom main__lines__mystring__length__last__bit_axiom:
    (main__lines__mystring__length__last__bit
       > main__lines__mystring__length__first__bit)
  
  axiom main__lines__mystring__length__position_axiom:
    (main__lines__mystring__length__position >= (0 : int))
  
  val function main__lines__mystring__str__first__bit : int
  
  val function main__lines__mystring__str__last__bit : int
  
  val function main__lines__mystring__str__position : int
  
  axiom main__lines__mystring__str__first__bit_axiom:
    (main__lines__mystring__str__first__bit >= (0 : int))
  
  axiom main__lines__mystring__str__last__bit_axiom:
    (main__lines__mystring__str__last__bit
       > main__lines__mystring__str__first__bit)
  
  axiom main__lines__mystring__str__position_axiom:
    (main__lines__mystring__str__position >= (0 : int))
  
  val function user_eq (a: mystring) (b: mystring) : bool
  
  val function dummy : mystring
  
  type mystring__ref = { mutable mystring__content : mystring }
  
  function mystring__ref_mystring__content__2__projection (a: mystring__ref) : mystring =
    a.mystring__content
  
  meta "model_projection" function mystring__ref_mystring__content__2__projection
  
  meta "inline:no" function mystring__ref_mystring__content__2__projection
  
  val mystring__havoc (x: mystring__ref) : unit
    writes { x }
end

module Main__lines__to_string
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  use Main__lines__mystring as Main__lines__mystring
  
  val function to_string (m: Main__lines__mystring.mystring) : Standard__string.string__
  
  val predicate to_string__function_guard (temp___result_165: Standard__string.string__) (m: 
    Main__lines__mystring.mystring)
end

module Main__lines__length
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val function length (m: Main__lines__mystring.mystring) : int
  
  val predicate length__function_guard (temp___result_164: int) (m: Main__lines__mystring.mystring)
end

module Main__lines__mystring___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  predicate dynamic_invariant (temp___expr_268: Main__lines__mystring.mystring) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) =
    true
  
  val dynamic_invariant (temp___expr_268: Main__lines__mystring.mystring) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_268 : Main__lines__mystring.mystring))
                      (temp___is_init_264 : bool))
                     (temp___skip_constant_265 : bool))
                    (temp___do_toplevel_266 : bool))
                   (temp___do_typ_inv_267 : bool)) }
  
  predicate default_initial_assumption (temp___expr_270: Main__lines__mystring.mystring) (temp___skip_top_level_271: bool) =
    true
  
  val default_initial_assumption (temp___expr_270: Main__lines__mystring.mystring) (temp___skip_top_level_271: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_270 : Main__lines__mystring.mystring))
                   (temp___skip_top_level_271 : bool)) }
end

module Main__lines__to_string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length as Main__lines__length
  use Main__lines__to_string as Main__lines__to_string
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  
  val to_string (m: Main__lines__mystring.mystring) : Standard__string.string__
    requires { true }
    ensures { (((result = (Main__lines__to_string.to_string m)) /\
                  ((Main__lines__to_string.to_string__function_guard result)
                     m)) /\
                 ((((((Standard__string___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    ((([@GP_Pretty_Ada:69152]
                       ((Standard__string.length result)
                          = (epsilon temp___result_276: int.
                               ((temp___result_276
                                   = (Main__lines__length.length m)) /\
                                  ((Main__lines__length.length__function_guard
                                      temp___result_276)
                                     m))))) /\
                        ([@GP_Pretty_Ada:69159]
                         ((Standard__string.first result) = (1 : int)))) /\
                       ([@GP_Pretty_Ada:69164]
                        ((Standard__string.last result)
                           = (epsilon temp___result_277: int.
                                ((temp___result_277
                                    = (Main__lines__length.length m)) /\
                                   ((Main__lines__length.length__function_guard
                                       temp___result_277)
                                      m)))))))) }
  
  axiom to_string__post_axiom:
    forall m : Main__lines__mystring.mystring
          [Main__lines__to_string.to_string m].
      ((((((Main__lines__mystring___axiom.dynamic_invariant m) True) True)
           True)
          True) ->
         (let result = Main__lines__to_string.to_string m in
          if ((Main__lines__to_string.to_string__function_guard result) m) then
            ((((([@GP_Pretty_Ada:69152]
                 ((Standard__string.length result)
                    = (epsilon temp___result_278: int.
                         ((temp___result_278
                             = (Main__lines__length.length m)) /\
                            ((Main__lines__length.length__function_guard
                                temp___result_278)
                               m))))) /\
                  ([@GP_Pretty_Ada:69159]
                   ((Standard__string.first result) = (1 : int)))) /\
                 ([@GP_Pretty_Ada:69164]
                  ((Standard__string.last result)
                     = (epsilon temp___result_279: int.
                          ((temp___result_279
                              = (Main__lines__length.length m)) /\
                             ((Main__lines__length.length__function_guard
                                 temp___result_279)
                                m)))))) /\
                (((((Standard__string___axiom.dynamic_invariant result) True)
                     False)
                    True)
                   True)) /\
               true)
          else true))
end

module Main__lines__from_string
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  use Main__lines__mystring as Main__lines__mystring
  
  val function from_string (s: Standard__string.string__) : Main__lines__mystring.mystring
  
  val predicate from_string__function_guard (temp___result_166: Main__lines__mystring.mystring) (s: 
    Standard__string.string__)
end

module Main__lines__from_string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length as Main__lines__length
  use Main__lines__from_string as Main__lines__from_string
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  
  val from_string (s: Standard__string.string__) : Main__lines__mystring.mystring
    requires { [@GP_Pretty_Ada:69370]
               ((Standard__string.length s) <= (2048 : int))
    }
    ensures { (((result = (Main__lines__from_string.from_string s)) /\
                  ((Main__lines__from_string.from_string__function_guard
                      result)
                     s)) /\
                 ((((((Main__lines__mystring___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    ([@GP_Pretty_Ada:69384]
                     ((epsilon temp___result_280: int.
                         ((temp___result_280
                             = (Main__lines__length.length result)) /\
                            ((Main__lines__length.length__function_guard
                                temp___result_280)
                               result)))
                        = (Standard__string.length s))))) }
  
  axiom from_string__post_axiom:
    forall s : Standard__string.string__
          [Main__lines__from_string.from_string s].
      (((((((Standard__string___axiom.dynamic_invariant s) True) True) True)
           True) /\
          ([@GP_Pretty_Ada:69370]
           ((Standard__string.length s) <= (2048 : int)))) ->
         (let result = Main__lines__from_string.from_string s in
          if ((Main__lines__from_string.from_string__function_guard result) s) then
            ((([@GP_Pretty_Ada:69384]
               ((epsilon temp___result_281: int.
                   ((temp___result_281 = (Main__lines__length.length result)) /\
                      ((Main__lines__length.length__function_guard
                          temp___result_281)
                         result)))
                  = (Standard__string.length s))) /\
                (((((Main__lines__mystring___axiom.dynamic_invariant result)
                      True)
                     False)
                    True)
                   True)) /\
               true)
          else true))
end

module Main__lines__get
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val function get (m: Main__lines__mystring.mystring) (index: int) : 
    int
  
  val predicate get__function_guard (temp___result_168: int) (m: Main__lines__mystring.mystring) (index: int)
end

module Main__lines__equal
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val function equal (m1: Main__lines__mystring.mystring) (m2: Main__lines__mystring.mystring) : 
    bool
  
  val predicate equal__function_guard (temp___result_169: bool) (m1: 
    Main__lines__mystring.mystring) (m2: Main__lines__mystring.mystring)
end

module Main__lines__equal___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length as Main__lines__length
  use Main__lines__get as Main__lines__get
  use Main__lines__equal as Main__lines__equal
  
  val equal (m1: Main__lines__mystring.mystring) (m2: Main__lines__mystring.mystring) : 
    bool
    requires { true }
    ensures { (((result = ((Main__lines__equal.equal m1) m2)) /\
                  (((Main__lines__equal.equal__function_guard result) m1) m2)) /\
                 (if (result = True) then
                    (([@GP_Pretty_Ada:69216]
                      ((epsilon temp___result_286: int.
                          ((temp___result_286
                              = (Main__lines__length.length m1)) /\
                             ((Main__lines__length.length__function_guard
                                 temp___result_286)
                                m1)))
                         = (epsilon temp___result_287: int.
                              ((temp___result_287
                                  = (Main__lines__length.length m2)) /\
                                 ((Main__lines__length.length__function_guard
                                     temp___result_287)
                                    m2))))) /\
                       (forall i : int.
                          ((((1 : int) <= i) /\
                              (i
                                 <= (epsilon temp___result_288: int.
                                       ((temp___result_288
                                           = (Main__lines__length.length m1)) /\
                                          ((Main__lines__length.length__function_guard
                                              temp___result_288)
                                             m1))))) ->
                             ([@GP_Pretty_Ada:69224]
                              ((epsilon temp___result_289: int.
                                  ((temp___result_289
                                      = ((Main__lines__get.get m1) i)) /\
                                     (((Main__lines__get.get__function_guard
                                          temp___result_289)
                                         m1)
                                        i)))
                                 = (epsilon temp___result_290: int.
                                      ((temp___result_290
                                          = ((Main__lines__get.get m2) i)) /\
                                         (((Main__lines__get.get__function_guard
                                              temp___result_290)
                                             m2)
                                            i))))))))
                  else ([@GP_Pretty_Ada:69544] true))) }
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Main__lines__substring
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val function substring (m: Main__lines__mystring.mystring) (from: int) (to__: int) : 
    Main__lines__mystring.mystring
  
  val predicate substring__function_guard (temp___result_170: Main__lines__mystring.mystring) (m: 
    Main__lines__mystring.mystring) (from: int) (to__: int)
end

module Main__lines__substring___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive___axiom as Standard__positive___axiom
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length as Main__lines__length
  use Main__lines__substring as Main__lines__substring
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  
  val substring (m: Main__lines__mystring.mystring) (from: int) (to__: int) : 
    Main__lines__mystring.mystring
    requires { (([@GP_Pretty_Ada:69266] (from <= to__)) /\
                  ([@GP_Pretty_Ada:69269]
                   (to__
                      <= (epsilon temp___result_291: int.
                            ((temp___result_291
                                = (Main__lines__length.length m)) /\
                               ((Main__lines__length.length__function_guard
                                   temp___result_291)
                                  m))))))
    }
    ensures { (((result = (((Main__lines__substring.substring m) from) to__)) /\
                  ((((Main__lines__substring.substring__function_guard result)
                       m)
                      from)
                     to__)) /\
                 ((((((Main__lines__mystring___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    ([@GP_Pretty_Ada:69469]
                     ((epsilon temp___result_292: int.
                         ((temp___result_292
                             = (Main__lines__length.length result)) /\
                            ((Main__lines__length.length__function_guard
                                temp___result_292)
                               result)))
                        = ((to__ - from) + (1 : int)))))) }
  
  axiom substring__post_axiom:
    forall m : Main__lines__mystring.mystring.
      forall from : int, to__ : int
            [((Main__lines__substring.substring m) from) to__].
        (((((((((Main__lines__mystring___axiom.dynamic_invariant m) True)
                 True)
                True)
               True) /\
              (((((Standard__positive___axiom.dynamic_invariant from) True)
                   True)
                  True)
                 True)) /\
             (((((Standard__positive___axiom.dynamic_invariant to__) True)
                  True)
                 True)
                True)) /\
            (([@GP_Pretty_Ada:69266] (from <= to__)) /\
               ([@GP_Pretty_Ada:69269]
                (to__
                   <= (epsilon temp___result_293: int.
                         ((temp___result_293
                             = (Main__lines__length.length m)) /\
                            ((Main__lines__length.length__function_guard
                                temp___result_293)
                               m))))))) ->
           (let result = ((Main__lines__substring.substring m) from) to__ in
            if ((((Main__lines__substring.substring__function_guard result) m)
                   from)
                  to__) then
              ((([@GP_Pretty_Ada:69469]
                 ((epsilon temp___result_294: int.
                     ((temp___result_294
                         = (Main__lines__length.length result)) /\
                        ((Main__lines__length.length__function_guard
                            temp___result_294)
                           result)))
                    = ((to__ - from) + (1 : int)))) /\
                  (((((Main__lines__mystring___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True)) /\
                 true)
            else true))
end

module Ada___ada__text_io__file_system
  use _gnatprove_standard.Main
  use int.Int
  
  val file_system : Main.__private__ref
end

module Ada___ada__text_io__standard_in
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_in : Main.__private__ref
end

module Ada___ada__text_io__standard_out
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_out : Main.__private__ref
end

module Ada___ada__text_io__standard_err
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_err : Main.__private__ref
end

module Ada___ada__text_io__current_in
  use _gnatprove_standard.Main
  use int.Int
  
  val current_in : Main.__private__ref
end

module Ada___ada__text_io__current_out
  use _gnatprove_standard.Main
  use int.Int
  
  val current_out : Main.__private__ref
end

module Ada___ada__text_io__current_err
  use _gnatprove_standard.Main
  use int.Int
  
  val current_err : Main.__private__ref
end

module Main__lines__get_line___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val get_line (m__split_fields: Main__lines__mystring.__split_fields__ref) : 
    unit
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes { Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err, m__split_fields }
    ensures { ((((Main__lines__mystring___axiom.dynamic_invariant
                    { Main__lines__mystring.__split_fields =
                        (Main__lines__mystring.__split_fields__content
                            m__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Main__p
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val p__split_fields : Main__lines__mystring.__split_fields__ref
end

module Main__current_state
  use _gnatprove_standard.Main
  use int.Int
  
  val current_state : int__ref
end

module Main__command
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val command__split_fields : Main__lines__mystring.__split_fields__ref
end

module Main__number
  use _gnatprove_standard.Main
  use int.Int
  
  val number : int__ref
end

module Operations__operandstack__stack__T13s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t13s = <range 0 512>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (512 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t13s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t13s__ref = { mutable t13s__content : t13s }
  
  function t13s__ref_t13s__content__2__projection (a: t13s__ref) : t13s =
    a.t13s__content
  
  meta "model_projection" function t13s__ref_t13s__content__2__projection
  
  meta "inline:no" function t13s__ref_t13s__content__2__projection
  
  val t13s__havoc (x: t13s__ref) : unit
    writes { x }
end

module Operations__operandstack__stack__T13s__rep
  use Operations__operandstack__stack__T13s as Operations__operandstack__stack__T13s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Operations__operandstack__stack__T13s.t13s) : int =
    Operations__operandstack__stack__T13s.t13s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Operations__operandstack__stack__T13s.t13s,
    predicate in_range = Operations__operandstack__stack__T13s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__integer__rep as Standard__integer__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__integer.integer
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_171 : int.
          if ((a__first <= temp___idx_171) /\ (temp___idx_171 <= a__last)) then
            ((Standard__integer__rep.to_rep ((get a) temp___idx_171))
               = (Standard__integer__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_171))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_171 : int.
                 if ((a__first <= temp___idx_171) /\
                       (temp___idx_171 <= a__last)) then
                   ((Standard__integer__rep.to_rep ((get a) temp___idx_171))
                      = (Standard__integer__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_171))))
                 else true)))
end

module Operations__operandstack__storagearray
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Array__Int__Standard__integer as Array__Int__Standard__integer
  
  type component_type = Standard__integer.integer
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (512 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__integer.map,
    function array_bool_eq = Array__Int__Standard__integer.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Operations__operandstack__stack__rep
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack__T13s as Operations__operandstack__stack__T13s
  use Operations__operandstack__stack__T13s__rep as Operations__operandstack__stack__T13s__rep
  use Operations__operandstack__storagearray as Operations__operandstack__storagearray
  use Array__Int__Standard__integer as Array__Int__Standard__integer
  use Array__Int__Standard__integer as Array__Int__Standard__integer
  use Array__Int__Standard__integer as Array__Int__Standard__integer
  use Array__Int__Standard__integer as Array__Int__Standard__integer
  
  type __split_fields = {
                       rec__operations__operandstack__stack__size :
                         Operations__operandstack__stack__T13s.t13s;
                       rec__operations__operandstack__stack__storage :
                         Array__Int__Standard__integer.map
                       }
  
  function __split_fields_rec__operations__operandstack__stack__size__projection (a: __split_fields) : 
    Operations__operandstack__stack__T13s.t13s =
    a.rec__operations__operandstack__stack__size
  
  meta "model_projection" function __split_fields_rec__operations__operandstack__stack__size__projection
  
  meta "inline:no" function __split_fields_rec__operations__operandstack__stack__size__projection
  
  function __split_fields_rec__operations__operandstack__stack__storage__projection (a: __split_fields) : 
    Array__Int__Standard__integer.map =
    a.rec__operations__operandstack__stack__storage
  
  meta "model_projection" function __split_fields_rec__operations__operandstack__stack__storage__projection
  
  meta "inline:no" function __split_fields_rec__operations__operandstack__stack__storage__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__3__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__3__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__3__projection
  
  meta "inline:no" function __rep___split_fields__3__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate operations__operandstack__stack__size__pred (a: __rep) = true
  
  val operations__operandstack__stack__size__pred (a: __rep) : bool
    ensures { result
                <->
                (operations__operandstack__stack__size__pred (a : __rep)) }
  
  val rec__operations__operandstack__stack__size_ (a: __rep) : Operations__operandstack__stack__T13s.t13s
    requires { operations__operandstack__stack__size__pred a }
    ensures { (result
                 = ((__split_fields a).rec__operations__operandstack__stack__size)) }
  
  predicate operations__operandstack__stack__storage__pred (a: __rep) = true
  
  val operations__operandstack__stack__storage__pred (a: __rep) : bool
    ensures { result
                <->
                (operations__operandstack__stack__storage__pred (a : __rep)) }
  
  val rec__operations__operandstack__stack__storage_ (a: __rep) : Array__Int__Standard__integer.map
    requires { operations__operandstack__stack__storage__pred a }
    ensures { (result
                 = ((__split_fields a).rec__operations__operandstack__stack__storage)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Operations__operandstack__stack__T13s__rep.to_rep
            ((__split_fields a).rec__operations__operandstack__stack__size))
           = (Operations__operandstack__stack__T13s__rep.to_rep
                ((__split_fields b).rec__operations__operandstack__stack__size))) /\
          ((Operations__operandstack__storagearray.bool_eq
              ((__split_fields a).rec__operations__operandstack__stack__storage))
             ((__split_fields b).rec__operations__operandstack__stack__storage))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Operations__operandstack__stack
  use export Operations__operandstack__stack__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type stack = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function operations__operandstack__stack__size__first__bit : int
  
  val function operations__operandstack__stack__size__last__bit : int
  
  val function operations__operandstack__stack__size__position : int
  
  axiom operations__operandstack__stack__size__first__bit_axiom:
    (operations__operandstack__stack__size__first__bit >= (0 : int))
  
  axiom operations__operandstack__stack__size__last__bit_axiom:
    (operations__operandstack__stack__size__last__bit
       > operations__operandstack__stack__size__first__bit)
  
  axiom operations__operandstack__stack__size__position_axiom:
    (operations__operandstack__stack__size__position >= (0 : int))
  
  val function operations__operandstack__stack__storage__first__bit : 
    int
  
  val function operations__operandstack__stack__storage__last__bit : 
    int
  
  val function operations__operandstack__stack__storage__position : int
  
  axiom operations__operandstack__stack__storage__first__bit_axiom:
    (operations__operandstack__stack__storage__first__bit >= (0 : int))
  
  axiom operations__operandstack__stack__storage__last__bit_axiom:
    (operations__operandstack__stack__storage__last__bit
       > operations__operandstack__stack__storage__first__bit)
  
  axiom operations__operandstack__stack__storage__position_axiom:
    (operations__operandstack__stack__storage__position >= (0 : int))
  
  val function user_eq (a: stack) (b: stack) : bool
  
  val function dummy : stack
  
  type stack__ref = { mutable stack__content : stack }
  
  function stack__ref_stack__content__projection (a: stack__ref) : stack =
    a.stack__content
  
  meta "model_projection" function stack__ref_stack__content__projection
  
  meta "inline:no" function stack__ref_stack__content__projection
  
  val stack__havoc (x: stack__ref) : unit
    writes { x }
end

module Main__opstack
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  
  val opstack__split_fields : Operations__operandstack__stack.__split_fields__ref
end

module Operations__operandstack__stack___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  
  predicate dynamic_invariant (temp___expr_337: Operations__operandstack__stack.stack) (temp___is_init_333: bool) (temp___skip_constant_334: bool) (temp___do_toplevel_335: bool) (temp___do_typ_inv_336: bool) =
    true
  
  val dynamic_invariant (temp___expr_337: Operations__operandstack__stack.stack) (temp___is_init_333: bool) (temp___skip_constant_334: bool) (temp___do_toplevel_335: bool) (temp___do_typ_inv_336: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_337 :
                          Operations__operandstack__stack.stack))
                      (temp___is_init_333 : bool))
                     (temp___skip_constant_334 : bool))
                    (temp___do_toplevel_335 : bool))
                   (temp___do_typ_inv_336 : bool)) }
  
  predicate default_initial_assumption (temp___expr_339: Operations__operandstack__stack.stack) (temp___skip_top_level_340: bool) =
    true
  
  val default_initial_assumption (temp___expr_339: Operations__operandstack__stack.stack) (temp___skip_top_level_340: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_339 : Operations__operandstack__stack.stack))
                   (temp___skip_top_level_340 : bool)) }
end

module Operations__operandstack__size
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  
  val function size (s: Operations__operandstack__stack.stack) : int
  
  val predicate size__function_guard (temp___result_172: int) (s: Operations__operandstack__stack.stack)
end

module Operations__operandstack__init___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  use Operations__operandstack__size as Operations__operandstack__size
  
  val init (s__split_fields: Operations__operandstack__stack.__split_fields__ref) : 
    unit
    requires { true }
    writes { s__split_fields }
    ensures { (([@GP_Pretty_Ada:68869]
                ((epsilon temp___result_347: int.
                    ((temp___result_347
                        = (Operations__operandstack__size.size
                             { Operations__operandstack__stack.__split_fields =
                                 (Operations__operandstack__stack.__split_fields__content
                                     s__split_fields) })) /\
                       ((Operations__operandstack__size.size__function_guard
                           temp___result_347)
                          { Operations__operandstack__stack.__split_fields =
                              (Operations__operandstack__stack.__split_fields__content
                                  s__split_fields) })))
                   = (0 : int))) /\
                 (((((Operations__operandstack__stack___axiom.dynamic_invariant
                        { Operations__operandstack__stack.__split_fields =
                            (Operations__operandstack__stack.__split_fields__content
                                s__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Variablestore__database___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__database as Variablestore__database
  
  predicate dynamic_invariant (temp___expr_208: Variablestore__database.database) (temp___is_init_204: bool) (temp___skip_constant_205: bool) (temp___do_toplevel_206: bool) (temp___do_typ_inv_207: bool) =
    true
  
  val dynamic_invariant (temp___expr_208: Variablestore__database.database) (temp___is_init_204: bool) (temp___skip_constant_205: bool) (temp___do_toplevel_206: bool) (temp___do_typ_inv_207: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_208 : Variablestore__database.database))
                      (temp___is_init_204 : bool))
                     (temp___skip_constant_205 : bool))
                    (temp___do_toplevel_206 : bool))
                   (temp___do_typ_inv_207 : bool)) }
  
  predicate default_initial_assumption (temp___expr_209: Variablestore__database.database) (temp___skip_top_level_210: bool) =
    true
  
  val default_initial_assumption (temp___expr_209: Variablestore__database.database) (temp___skip_top_level_210: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_209 : Variablestore__database.database))
                   (temp___skip_top_level_210 : bool)) }
end

module Variablestore__init___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__database as Variablestore__database
  use Variablestore__database___axiom as Variablestore__database___axiom
  
  val init (d: Variablestore__database.database__ref) : unit
    requires { true }
    writes { d }
    ensures { ((((Variablestore__database___axiom.dynamic_invariant
                    (d.Variablestore__database.database__content))
                   True)
                  True)
                 True)
                True }
end

module Ada___ada__text_io__line_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function line_length (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) : int
  
  val predicate line_length__function_guard (temp___result_161: int) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private)
end

module Ada___ada__text_io__page_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function page_length (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) : int
  
  val predicate page_length__function_guard (temp___result_162: int) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private)
end

module Ada___ada__text_io__put__4___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val put (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes { Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err }
    ensures { (([@GP_Pretty_Ada:14327]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err)))) /\
                 ([@GP_Pretty_Ada:14333]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__file_system.file_system))
                                (Main.__private__content
                                    Ada___ada__text_io__standard_in.standard_in))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_out.standard_out))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_err.standard_err))
                             (Main.__private__content
                                 Ada___ada__text_io__current_in.current_in))
                            (Main.__private__content
                                Ada___ada__text_io__current_out.current_out))
                           (Main.__private__content
                               Ada___ada__text_io__current_err.current_err)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out))
                          (Main.__private__content
                              Ada___ada__text_io__current_err.current_err))))) }
end

module Pin__from_string
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function from_string (s: Standard__string.string__) : int
  
  val predicate from_string__function_guard (temp___result_173: int) (s: 
    Standard__string.string__)
end

module Pin__pin
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type pin = <range 0 9999>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (9999 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = pin,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type pin__ref = { mutable pin__content : pin }
  
  function pin__ref_pin__content__projection (a: pin__ref) : pin =
    a.pin__content
  
  meta "model_projection" function pin__ref_pin__content__projection
  
  meta "inline:no" function pin__ref_pin__content__projection
  
  val pin__havoc (x: pin__ref) : unit
    writes { x }
end

module Pin__pin___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Pin__pin as Pin__pin
  
  predicate dynamic_invariant (temp___expr_251: int) (temp___is_init_247: bool) (temp___skip_constant_248: bool) (temp___do_toplevel_249: bool) (temp___do_typ_inv_250: bool) =
    if ((temp___is_init_247 = True) \/ (Pin__pin.first <= Pin__pin.last)) then
      (((Pin__pin.dynamic_property Pin__pin.first) Pin__pin.last)
         temp___expr_251)
    else true
  
  val dynamic_invariant (temp___expr_251: int) (temp___is_init_247: bool) (temp___skip_constant_248: bool) (temp___do_toplevel_249: bool) (temp___do_typ_inv_250: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_251 : int))
                      (temp___is_init_247 : bool))
                     (temp___skip_constant_248 : bool))
                    (temp___do_toplevel_249 : bool))
                   (temp___do_typ_inv_250 : bool)) }
  
  predicate default_initial_assumption (temp___expr_252: int) (temp___skip_top_level_253: bool) =
    true
  
  val default_initial_assumption (temp___expr_252: int) (temp___skip_top_level_253: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_252 : int))
                   (temp___skip_top_level_253 : bool)) }
end

module Pin__from_string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Pin__from_string as Pin__from_string
  use Pin__pin___axiom as Pin__pin___axiom
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val from_string (s: Standard__string.string__) : int
    requires { (([@GP_Pretty_Ada:12236]
                 ((Standard__string.length s) = (4 : int))) /\
                  (forall i : int.
                     ((((Standard__string.first s) <= i) /\
                         (i <= (Standard__string.last s))) ->
                        (([@GP_Pretty_Ada:12247]
                          ((Standard__character__rep.to_rep
                              ((Array__Int__Standard__character.get
                                  (Standard__string.to_array s))
                                 i))
                             >= (48 : int))) /\
                           ([@GP_Pretty_Ada:12253]
                            ((Standard__character__rep.to_rep
                                ((Array__Int__Standard__character.get
                                    (Standard__string.to_array s))
                                   i))
                               <= (57 : int)))))))
    }
    ensures { (((result = (Pin__from_string.from_string s)) /\
                  ((Pin__from_string.from_string__function_guard result) s)) /\
                 (((((Pin__pin___axiom.dynamic_invariant result) True) False)
                     True)
                    True)) }
  
  axiom from_string__post_axiom:
    forall s : Standard__string.string__ [Pin__from_string.from_string s].
      (((((((Standard__string___axiom.dynamic_invariant s) True) True) True)
           True) /\
          (([@GP_Pretty_Ada:12236] ((Standard__string.length s) = (4 : int))) /\
             (forall i : int.
                ((((Standard__string.first s) <= i) /\
                    (i <= (Standard__string.last s))) ->
                   (([@GP_Pretty_Ada:12247]
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (Standard__string.to_array s))
                            i))
                        >= (48 : int))) /\
                      ([@GP_Pretty_Ada:12253]
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (Standard__string.to_array s))
                              i))
                          <= (57 : int)))))))) ->
         (let result = Pin__from_string.from_string s in
          if ((Pin__from_string.from_string__function_guard result) s) then
            ((true /\
                (((((Pin__pin___axiom.dynamic_invariant result) True) False)
                    True)
                   True)) /\
               true)
          else true))
end

module Mystringtokeniser__tokenextent__rep
  use _gnatprove_standard.Main
  use int.Int
  use Standard__natural as Standard__natural
  use Standard__natural__rep as Standard__natural__rep
  use Standard__positive as Standard__positive
  use Standard__positive__rep as Standard__positive__rep
  
  type __split_fields = {
                       rec__mystringtokeniser__tokenextent__start :
                         Standard__positive.positive;
                       rec__mystringtokeniser__tokenextent__length :
                         Standard__natural.natural
                       }
  
  function __split_fields_rec__mystringtokeniser__tokenextent__start__projection (a: __split_fields) : 
    Standard__positive.positive =
    a.rec__mystringtokeniser__tokenextent__start
  
  meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
  
  meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
  
  function __split_fields_rec__mystringtokeniser__tokenextent__length__projection (a: __split_fields) : 
    Standard__natural.natural =
    a.rec__mystringtokeniser__tokenextent__length
  
  meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
  
  meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__4__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__4__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__4__projection
  
  meta "inline:no" function __rep___split_fields__4__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate mystringtokeniser__tokenextent__start__pred (a: __rep) = true
  
  val mystringtokeniser__tokenextent__start__pred (a: __rep) : bool
    ensures { result
                <->
                (mystringtokeniser__tokenextent__start__pred (a : __rep)) }
  
  val rec__mystringtokeniser__tokenextent__start_ (a: __rep) : Standard__positive.positive
    requires { mystringtokeniser__tokenextent__start__pred a }
    ensures { (result
                 = ((__split_fields a).rec__mystringtokeniser__tokenextent__start)) }
  
  predicate mystringtokeniser__tokenextent__length__pred (a: __rep) = true
  
  val mystringtokeniser__tokenextent__length__pred (a: __rep) : bool
    ensures { result
                <->
                (mystringtokeniser__tokenextent__length__pred (a : __rep)) }
  
  val rec__mystringtokeniser__tokenextent__length_ (a: __rep) : Standard__natural.natural
    requires { mystringtokeniser__tokenextent__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__mystringtokeniser__tokenextent__length)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Standard__positive__rep.to_rep
            ((__split_fields a).rec__mystringtokeniser__tokenextent__start))
           = (Standard__positive__rep.to_rep
                ((__split_fields b).rec__mystringtokeniser__tokenextent__start))) /\
          ((Standard__natural__rep.to_rep
              ((__split_fields a).rec__mystringtokeniser__tokenextent__length))
             = (Standard__natural__rep.to_rep
                  ((__split_fields b).rec__mystringtokeniser__tokenextent__length)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Mystringtokeniser__tokenextent
  use export Mystringtokeniser__tokenextent__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tokenextent = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function mystringtokeniser__tokenextent__start__first__bit : int
  
  val function mystringtokeniser__tokenextent__start__last__bit : int
  
  val function mystringtokeniser__tokenextent__start__position : int
  
  axiom mystringtokeniser__tokenextent__start__first__bit_axiom:
    (mystringtokeniser__tokenextent__start__first__bit >= (0 : int))
  
  axiom mystringtokeniser__tokenextent__start__last__bit_axiom:
    (mystringtokeniser__tokenextent__start__last__bit
       > mystringtokeniser__tokenextent__start__first__bit)
  
  axiom mystringtokeniser__tokenextent__start__position_axiom:
    (mystringtokeniser__tokenextent__start__position >= (0 : int))
  
  val function mystringtokeniser__tokenextent__length__first__bit : int
  
  val function mystringtokeniser__tokenextent__length__last__bit : int
  
  val function mystringtokeniser__tokenextent__length__position : int
  
  axiom mystringtokeniser__tokenextent__length__first__bit_axiom:
    (mystringtokeniser__tokenextent__length__first__bit >= (0 : int))
  
  axiom mystringtokeniser__tokenextent__length__last__bit_axiom:
    (mystringtokeniser__tokenextent__length__last__bit
       > mystringtokeniser__tokenextent__length__first__bit)
  
  axiom mystringtokeniser__tokenextent__length__position_axiom:
    (mystringtokeniser__tokenextent__length__position >= (0 : int))
  
  val function user_eq (a: tokenextent) (b: tokenextent) : bool
  
  val function dummy : tokenextent
  
  type tokenextent__ref = { mutable tokenextent__content : tokenextent }
  
  function tokenextent__ref_tokenextent__content__projection (a: tokenextent__ref) : tokenextent =
    a.tokenextent__content
  
  meta "model_projection" function tokenextent__ref_tokenextent__content__projection
  
  meta "inline:no" function tokenextent__ref_tokenextent__content__projection
  
  val tokenextent__havoc (x: tokenextent__ref) : unit
    writes { x }
end

module Array__Int__Mystringtokeniser__tokenextent
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  
  function index_I1_one : int = 1 : int
  
  type component_type = Mystringtokeniser__tokenextent.tokenextent
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_174 : int.
          if ((a__first <= temp___idx_174) /\ (temp___idx_174 <= a__last)) then
            ((Mystringtokeniser__tokenextent.bool_eq ((get a) temp___idx_174))
               ((get b) ((b__first - a__first) + temp___idx_174)))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_174 : int.
                 if ((a__first <= temp___idx_174) /\
                       (temp___idx_174 <= a__last)) then
                   ((Mystringtokeniser__tokenextent.bool_eq
                       ((get a) temp___idx_174))
                      ((get b) ((b__first - a__first) + temp___idx_174)))
                 else true)))
end

module Main__B_2__t
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  val t : Array__Int__Mystringtokeniser__tokenextent.map__ref
end

module Main__B_2__numtokens
  use _gnatprove_standard.Main
  use int.Int
  
  val numtokens : int__ref
end

module Mystringtokeniser__tokenarray
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__integer__rep as Standard__integer__rep
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  type component_type = Mystringtokeniser__tokenextent.tokenextent
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Mystringtokeniser__tokenextent.map,
    function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type tokenarray = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type tokenarray__ref = { mutable tokenarray__content : tokenarray }
  
  function tokenarray__ref_tokenarray__content__projection (a: tokenarray__ref) : tokenarray =
    a.tokenarray__content
  
  meta "model_projection" function tokenarray__ref_tokenarray__content__projection
  
  meta "inline:no" function tokenarray__ref_tokenarray__content__projection
  
  val tokenarray__havoc (x: tokenarray__ref) : unit
    writes { x }
end

module Mystringtokeniser__tokenarray___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
  
  predicate dynamic_invariant (temp___expr_365: Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_361: bool) (temp___skip_constant_362: bool) (temp___do_toplevel_363: bool) (temp___do_typ_inv_364: bool) =
    if temp___skip_constant_362 then true
    else
      ((((Mystringtokeniser__tokenarray.dynamic_property
            Standard__positive.first)
           Standard__positive.last)
          (Mystringtokeniser__tokenarray.first temp___expr_365))
         (Mystringtokeniser__tokenarray.last temp___expr_365))
  
  val dynamic_invariant (temp___expr_365: Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_361: bool) (temp___skip_constant_362: bool) (temp___do_toplevel_363: bool) (temp___do_typ_inv_364: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_365 :
                          Mystringtokeniser__tokenarray.tokenarray))
                      (temp___is_init_361 : bool))
                     (temp___skip_constant_362 : bool))
                    (temp___do_toplevel_363 : bool))
                   (temp___do_typ_inv_364 : bool)) }
end

module Mystringtokeniser__tokenise___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Integer as Integer
  use Standard__integer as Standard__integer
  use Standard__natural as Standard__natural
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__natural__rep as Standard__natural__rep
  use Standard__positive as Standard__positive
  use Standard__positive__rep as Standard__positive__rep
  use Standard__string as Standard__string
  use Standard__integer__rep as Standard__integer__rep
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
  use Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  val tokenise (s: Standard__string.string__) (tokens: Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first: 
    Standard__integer.integer) (tokens__last: Standard__integer.integer) (count: int__ref) : 
    unit
    requires { ((if ((Standard__string.length s) > (0 : int)) then
                   ([@GP_Pretty_Ada:10703]
                    ((Standard__string.first s) <= (Standard__string.last s)))
                 else ([@GP_Pretty_Ada:63576] true)) /\
                  ([@GP_Pretty_Ada:10712]
                   ((Standard__integer__rep.to_rep tokens__first)
                      <= (Standard__integer__rep.to_rep tokens__last))))
    }
    writes { tokens, count }
    ensures { ((([@GP_Pretty_Ada:10720]
                 ((count.int__content)
                    <= ((Integer.length
                           (Standard__integer__rep.to_rep tokens__first))
                          (Standard__integer__rep.to_rep tokens__last)))) /\
                  (forall index : int.
                     ((((Standard__integer__rep.to_rep tokens__first)
                          <= index) /\
                         (index
                            <= ((Standard__integer__rep.to_rep tokens__first)
                                  + ((count.int__content) - (1 : int))))) ->
                        ((([@GP_Pretty_Ada:10744]
                           ((Standard__positive__rep.to_rep
                               ((Mystringtokeniser__tokenextent.__split_fields
                                    (let temp___379 =
                                       ((Mystringtokeniser__tokenarray.of_array
                                           (tokens.Array__Int__Mystringtokeniser__tokenextent.map__content))
                                          (Standard__integer__rep.to_rep
                                             tokens__first))
                                         (Standard__integer__rep.to_rep
                                            tokens__last) in
                                     (Array__Int__Mystringtokeniser__tokenextent.get
                                        (Mystringtokeniser__tokenarray.to_array
                                           temp___379))
                                       index)).Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))
                              >= (Standard__string.first s))) /\
                            ([@GP_Pretty_Ada:10754]
                             ((Standard__natural__rep.to_rep
                                 ((Mystringtokeniser__tokenextent.__split_fields
                                      (let temp___380 =
                                         ((Mystringtokeniser__tokenarray.of_array
                                             (tokens.Array__Int__Mystringtokeniser__tokenextent.map__content))
                                            (Standard__integer__rep.to_rep
                                               tokens__first))
                                           (Standard__integer__rep.to_rep
                                              tokens__last) in
                                       (Array__Int__Mystringtokeniser__tokenextent.get
                                          (Mystringtokeniser__tokenarray.to_array
                                             temp___380))
                                         index)).Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))
                                > (0 : int)))) /\
                           ([@GP_Pretty_Ada:10764]
                            (((Standard__natural__rep.to_rep
                                 ((Mystringtokeniser__tokenextent.__split_fields
                                      (let temp___381 =
                                         ((Mystringtokeniser__tokenarray.of_array
                                             (tokens.Array__Int__Mystringtokeniser__tokenextent.map__content))
                                            (Standard__integer__rep.to_rep
                                               tokens__first))
                                           (Standard__integer__rep.to_rep
                                              tokens__last) in
                                       (Array__Int__Mystringtokeniser__tokenextent.get
                                          (Mystringtokeniser__tokenarray.to_array
                                             temp___381))
                                         index)).Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))
                                - (1 : int))
                               <= ((Standard__string.last s)
                                     - (Standard__positive__rep.to_rep
                                          ((Mystringtokeniser__tokenextent.__split_fields
                                               (let temp___382 =
                                                  ((Mystringtokeniser__tokenarray.of_array
                                                      (tokens.Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                     (Standard__integer__rep.to_rep
                                                        tokens__first))
                                                    (Standard__integer__rep.to_rep
                                                       tokens__last) in
                                                (Array__Int__Mystringtokeniser__tokenextent.get
                                                   (Mystringtokeniser__tokenarray.to_array
                                                      temp___382))
                                                  index)).Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))))))))) /\
                 ((((((Mystringtokeniser__tokenarray___axiom.dynamic_invariant
                         (((Mystringtokeniser__tokenarray.of_array
                              (tokens.Array__Int__Mystringtokeniser__tokenextent.map__content))
                             (Standard__integer__rep.to_rep tokens__first))
                            (Standard__integer__rep.to_rep tokens__last)))
                        True)
                       True)
                      True)
                     True) /\
                    (((((Standard__natural___axiom.dynamic_invariant
                           (count.int__content))
                          True)
                         True)
                        True)
                       True))) }
end

module Ada___ada__text_io__put_line__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val put_line (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes { Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err }
    ensures { (([@GP_Pretty_Ada:14549]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err)))) /\
                 ([@GP_Pretty_Ada:14555]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__file_system.file_system))
                                (Main.__private__content
                                    Ada___ada__text_io__standard_in.standard_in))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_out.standard_out))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_err.standard_err))
                             (Main.__private__content
                                 Ada___ada__text_io__current_in.current_in))
                            (Main.__private__content
                                Ada___ada__text_io__current_out.current_out))
                           (Main.__private__content
                               Ada___ada__text_io__current_err.current_err)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out))
                          (Main.__private__content
                              Ada___ada__text_io__current_err.current_err))))) }
end

module Main__B_2__L_3__R27b
  use _gnatprove_standard.Main
  use int.Int
  
  val function r27b : int
end

module Main__B_2__L_3__i
  use _gnatprove_standard.Main
  use int.Int
  
  val i : int__ref
end

module Main__B_2__B_4__tokstr
  use _gnatprove_standard.Main
  use int.Int
  use Standard__integer as Standard__integer
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val tokstr : Array__Int__Standard__character.map__ref
  
  val function tokstr__first : Standard__integer.integer
  
  val function tokstr__last : Standard__integer.integer
end

module Main__B_6__t
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  val t : Array__Int__Mystringtokeniser__tokenextent.map__ref
end

module Main__B_6__numtokens
  use _gnatprove_standard.Main
  use int.Int
  
  val numtokens : int__ref
end

module Main__B_6__L_7__R39b
  use _gnatprove_standard.Main
  use int.Int
  
  val function r39b : int
end

module Main__B_6__L_7__i
  use _gnatprove_standard.Main
  use int.Int
  
  val i : int__ref
end

module Main__B_6__B_8__tokstr
  use _gnatprove_standard.Main
  use int.Int
  use Standard__integer as Standard__integer
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val tokstr : Array__Int__Standard__character.map__ref
  
  val function tokstr__first : Standard__integer.integer
  
  val function tokstr__last : Standard__integer.integer
end

module Stringtointeger__from_string
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function from_string (s: Standard__string.string__) : int
  
  val predicate from_string__function_guard (temp___result_175: int) (s: 
    Standard__string.string__)
end

module Stringtointeger__from_string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__string as Standard__string
  use Stringtointeger__from_string as Stringtointeger__from_string
  
  val from_string (s: Standard__string.string__) : int
    requires { true }
    ensures { (((result = (Stringtointeger__from_string.from_string s)) /\
                  ((Stringtointeger__from_string.from_string__function_guard
                      result)
                     s)) /\
                 (((((Standard__integer___axiom.dynamic_invariant result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom from_string__post_axiom:
    forall s : Standard__string.string__
          [Stringtointeger__from_string.from_string s].
      let result = Stringtointeger__from_string.from_string s in
      ((Standard__integer.dynamic_property Standard__integer.first)
         Standard__integer.last)
        result
end

module Operations__plus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  
  val plus (s__split_fields: Operations__operandstack__stack.__split_fields__ref) : 
    unit
    requires { true }
    writes { s__split_fields }
    ensures { ((((Operations__operandstack__stack___axiom.dynamic_invariant
                    { Operations__operandstack__stack.__split_fields =
                        (Operations__operandstack__stack.__split_fields__content
                            s__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Operations__minus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  
  val minus (s__split_fields: Operations__operandstack__stack.__split_fields__ref) : 
    unit
    requires { true }
    writes { s__split_fields }
    ensures { ((((Operations__operandstack__stack___axiom.dynamic_invariant
                    { Operations__operandstack__stack.__split_fields =
                        (Operations__operandstack__stack.__split_fields__content
                            s__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Operations__multiply___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  
  val multiply (s__split_fields: Operations__operandstack__stack.__split_fields__ref) : 
    unit
    requires { true }
    writes { s__split_fields }
    ensures { ((((Operations__operandstack__stack___axiom.dynamic_invariant
                    { Operations__operandstack__stack.__split_fields =
                        (Operations__operandstack__stack.__split_fields__content
                            s__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Operations__divide___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  
  val divide (s__split_fields: Operations__operandstack__stack.__split_fields__ref) : 
    unit
    requires { true }
    writes { s__split_fields }
    ensures { ((((Operations__operandstack__stack___axiom.dynamic_invariant
                    { Operations__operandstack__stack.__split_fields =
                        (Operations__operandstack__stack.__split_fields__content
                            s__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Operations__push_operation___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  
  val push_operation (s__split_fields: Operations__operandstack__stack.__split_fields__ref) (i: int) : 
    unit
    requires { true }
    writes { s__split_fields }
    ensures { ((((Operations__operandstack__stack___axiom.dynamic_invariant
                    { Operations__operandstack__stack.__split_fields =
                        (Operations__operandstack__stack.__split_fields__content
                            s__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Operations__pop_operation___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__integer___axiom as Standard__integer___axiom
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  
  val pop_operation (s__split_fields: Operations__operandstack__stack.__split_fields__ref) (i: int__ref) : 
    unit
    requires { true }
    writes { s__split_fields, i }
    ensures { ((((((Operations__operandstack__stack___axiom.dynamic_invariant
                      { Operations__operandstack__stack.__split_fields =
                          (Operations__operandstack__stack.__split_fields__content
                              s__split_fields) })
                     True)
                    True)
                   True)
                  True) /\
                 (((((Standard__integer___axiom.dynamic_invariant
                        (i.int__content))
                       True)
                      True)
                     True)
                    True)) }
end

module Operations__load___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__database as Variablestore__database
  use Variablestore__variable as Variablestore__variable
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  
  val load (v: Variablestore__variable.variable) (db: Variablestore__database.database) (s__split_fields: 
    Operations__operandstack__stack.__split_fields__ref) : unit
    requires { true }
    writes { s__split_fields }
    ensures { ((((Operations__operandstack__stack___axiom.dynamic_invariant
                    { Operations__operandstack__stack.__split_fields =
                        (Operations__operandstack__stack.__split_fields__content
                            s__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Operations__store___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__database as Variablestore__database
  use Variablestore__variable as Variablestore__variable
  use Variablestore__variable___axiom as Variablestore__variable___axiom
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  use Variablestore__database___axiom as Variablestore__database___axiom
  
  val store (v__split_fields: Variablestore__variable.__split_fields__ref) (db: 
    Variablestore__database.database__ref) (s__split_fields: Operations__operandstack__stack.__split_fields__ref) : 
    unit
    requires { true }
    writes { v__split_fields, db, s__split_fields }
    ensures { (((((((Variablestore__variable___axiom.dynamic_invariant
                       { Variablestore__variable.__split_fields =
                           (Variablestore__variable.__split_fields__content
                               v__split_fields) })
                      True)
                     True)
                    True)
                   True) /\
                  (((((Variablestore__database___axiom.dynamic_invariant
                         (db.Variablestore__database.database__content))
                        True)
                       True)
                      True)
                     True)) /\
                 (((((Operations__operandstack__stack___axiom.dynamic_invariant
                        { Operations__operandstack__stack.__split_fields =
                            (Operations__operandstack__stack.__split_fields__content
                                s__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Operations__remove___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__database as Variablestore__database
  use Variablestore__variable as Variablestore__variable
  use Variablestore__variable___axiom as Variablestore__variable___axiom
  use Variablestore__database___axiom as Variablestore__database___axiom
  
  val remove (v__split_fields: Variablestore__variable.__split_fields__ref) (db: 
    Variablestore__database.database__ref) : unit
    requires { true }
    writes { v__split_fields, db }
    ensures { ((((((Variablestore__variable___axiom.dynamic_invariant
                      { Variablestore__variable.__split_fields =
                          (Variablestore__variable.__split_fields__content
                              v__split_fields) })
                     True)
                    True)
                   True)
                  True) /\
                 (((((Variablestore__database___axiom.dynamic_invariant
                        (db.Variablestore__database.database__content))
                       True)
                      True)
                     True)
                    True)) }
end

module Operations__list___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__database as Variablestore__database
  
  val list (db: Variablestore__database.database) : unit
    requires { true }
    ensures { true }
end

module Main__state
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type state
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = state,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type state__ref = { mutable state__content : state }
  
  function state__ref_state__content__projection (a: state__ref) : state =
    a.state__content
  
  meta "model_projection" function state__ref_state__content__projection
  
  meta "inline:no" function state__ref_state__content__projection
  
  val state__havoc (x: state__ref) : unit
    writes { x }
end

module Main__state___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Main__state as Main__state
  
  predicate dynamic_invariant (temp___expr_320: int) (temp___is_init_316: bool) (temp___skip_constant_317: bool) (temp___do_toplevel_318: bool) (temp___do_typ_inv_319: bool) =
    if ((temp___is_init_316 = True) \/
          (Main__state.first <= Main__state.last)) then
      (((Main__state.dynamic_property Main__state.first) Main__state.last)
         temp___expr_320)
    else true
  
  val dynamic_invariant (temp___expr_320: int) (temp___is_init_316: bool) (temp___skip_constant_317: bool) (temp___do_toplevel_318: bool) (temp___do_typ_inv_319: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_320 : int))
                      (temp___is_init_316 : bool))
                     (temp___skip_constant_317 : bool))
                    (temp___do_toplevel_318 : bool))
                   (temp___do_typ_inv_319 : bool)) }
  
  predicate default_initial_assumption (temp___expr_321: int) (temp___skip_top_level_322: bool) =
    true
  
  val default_initial_assumption (temp___expr_321: int) (temp___skip_top_level_322: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_321 : int))
                   (temp___skip_top_level_322 : bool)) }
end

module Main__L_1
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_1
end

module Main__B_2__TTtSP1
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tTtSP1 = <range 1 3>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = tTtSP1,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type tTtSP1__ref = { mutable tTtSP1__content : tTtSP1 }
  
  function tTtSP1__ref_tTtSP1__content__projection (a: tTtSP1__ref) : tTtSP1 =
    a.tTtSP1__content
  
  meta "model_projection" function tTtSP1__ref_tTtSP1__content__projection
  
  meta "inline:no" function tTtSP1__ref_tTtSP1__content__projection
  
  val tTtSP1__havoc (x: tTtSP1__ref) : unit
    writes { x }
end

module Main__B_2__TtS___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  predicate dynamic_invariant (temp___expr_371: Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_367: bool) (temp___skip_constant_368: bool) (temp___do_toplevel_369: bool) (temp___do_typ_inv_370: bool) =
    true
  
  val dynamic_invariant (temp___expr_371: Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_367: bool) (temp___skip_constant_368: bool) (temp___do_toplevel_369: bool) (temp___do_typ_inv_370: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_371 :
                          Array__Int__Mystringtokeniser__tokenextent.map))
                      (temp___is_init_367 : bool))
                     (temp___skip_constant_368 : bool))
                    (temp___do_toplevel_369 : bool))
                   (temp___do_typ_inv_370 : bool)) }
  
  predicate default_initial_assumption (temp___expr_373: Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_374: bool) =
    true
  
  val default_initial_assumption (temp___expr_373: Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_374: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_373 :
                       Array__Int__Mystringtokeniser__tokenextent.map))
                   (temp___skip_top_level_374 : bool)) }
end

module Main__B_2__L_3
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_3
end

module Main__L_5
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_5
end

module Main__B_6__TTtSP1
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tTtSP1 = <range 1 3>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = tTtSP1,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type tTtSP1__ref = { mutable tTtSP1__content : tTtSP1 }
  
  function tTtSP1__ref_tTtSP1__content__2__projection (a: tTtSP1__ref) : tTtSP1 =
    a.tTtSP1__content
  
  meta "model_projection" function tTtSP1__ref_tTtSP1__content__2__projection
  
  meta "inline:no" function tTtSP1__ref_tTtSP1__content__2__projection
  
  val tTtSP1__havoc (x: tTtSP1__ref) : unit
    writes { x }
end

module Main__B_6__TtS___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  predicate dynamic_invariant (temp___expr_391: Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_387: bool) (temp___skip_constant_388: bool) (temp___do_toplevel_389: bool) (temp___do_typ_inv_390: bool) =
    true
  
  val dynamic_invariant (temp___expr_391: Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_387: bool) (temp___skip_constant_388: bool) (temp___do_toplevel_389: bool) (temp___do_typ_inv_390: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_391 :
                          Array__Int__Mystringtokeniser__tokenextent.map))
                      (temp___is_init_387 : bool))
                     (temp___skip_constant_388 : bool))
                    (temp___do_toplevel_389 : bool))
                   (temp___do_typ_inv_390 : bool)) }
  
  predicate default_initial_assumption (temp___expr_393: Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_394: bool) =
    true
  
  val default_initial_assumption (temp___expr_393: Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_394: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_393 :
                       Array__Int__Mystringtokeniser__tokenextent.map))
                   (temp___skip_top_level_394 : bool)) }
end

module Main__B_6__L_7
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_7
end

module Temp___String_Literal_422
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_422 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_422__def_axiom:
    forall __void_param : unit [temp___String_Literal_422 __void_param]. true
end

module Temp___String_Literal_426
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_426 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_426__def_axiom:
    forall __void_param : unit [temp___String_Literal_426 __void_param]. true
end

module Temp___String_Literal_432
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_432 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_432__def_axiom:
    forall __void_param : unit [temp___String_Literal_432 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_432 __void_param))
               (1 : int)))
           = (36 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_432 __void_param))
                 (2 : int)))
             = (32 : int))) /\
         (((((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_432 __void_param))
                   (3 : int)))
               = (46 : int)) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_432 __void_param))
                     (4 : int)))
                 = (47 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_432 __void_param))
                     (5 : int)))
                 = (109 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_432 __void_param))
                       (6 : int)))
                   = (97 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_432 __void_param))
                     (7 : int)))
                 = (105 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_432 __void_param))
                       (8 : int)))
                   = (110 : int))) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_432 __void_param))
                      (9 : int)))
                  = (32 : int)))))
end

module Temp___String_Literal_436
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_436 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_436__def_axiom:
    forall __void_param : unit [temp___String_Literal_436 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_436 __void_param))
               (1 : int)))
           = (70 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_436 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         ((((((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_436 __void_param))
                    (3 : int)))
                = (114 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_436 __void_param))
                      (4 : int)))
                  = (109 : int))) /\
              (((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_436 __void_param))
                      (5 : int)))
                  = (97 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_436 __void_param))
                        (6 : int)))
                    = (116 : int)))) /\
             ((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_436 __void_param))
                      (7 : int)))
                  = (32 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_436 __void_param))
                        (8 : int)))
                    = (105 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_436 __void_param))
                        (9 : int)))
                    = (115 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_436 __void_param))
                          (10 : int)))
                      = (32 : int))))) /\
            (((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_436 __void_param))
                      (11 : int)))
                  = (105 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_436 __void_param))
                        (12 : int)))
                    = (110 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_436 __void_param))
                        (13 : int)))
                    = (118 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_436 __void_param))
                          (14 : int)))
                      = (97 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_436 __void_param))
                        (15 : int)))
                    = (108 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_436 __void_param))
                          (16 : int)))
                      = (105 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_436 __void_param))
                          (17 : int)))
                      = (100 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_436 __void_param))
                            (18 : int)))
                        = (33 : int)))))))
end

module Temp___String_Literal_443
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_443 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_443__def_axiom:
    forall __void_param : unit [temp___String_Literal_443 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_443 __void_param))
               (1 : int)))
           = (108 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_443 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         (((((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_443 __void_param))
                   (3 : int)))
               = (99 : int)) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_443 __void_param))
                     (4 : int)))
                 = (107 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_443 __void_param))
                     (5 : int)))
                 = (101 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_443 __void_param))
                       (6 : int)))
                   = (100 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_443 __void_param))
                     (7 : int)))
                 = (62 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_443 __void_param))
                       (8 : int)))
                   = (32 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_443 __void_param))
                       (9 : int)))
                   = (32 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_443 __void_param))
                         (10 : int)))
                     = (32 : int))))))
end

module Main__B_2__t__aggregate_def
  use _gnatprove_standard.Main
  use int.Int
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  val function main__B_2__t__aggregate_def (temp___447: Mystringtokeniser__tokenextent.tokenextent) : 
    Array__Int__Mystringtokeniser__tokenextent.map
end

module Temp___String_Literal_455
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_455 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_455__def_axiom:
    forall __void_param : unit [temp___String_Literal_455 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_455 __void_param))
               (1 : int)))
           = (89 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_455 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_455 __void_param))
                      (3 : int)))
                  = (117 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_455 __void_param))
                        (4 : int)))
                    = (32 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_455 __void_param))
                       (5 : int)))
                   = (101 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_455 __void_param))
                       (6 : int)))
                   = (110 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (7 : int)))
                     = (116 : int)))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_455 __void_param))
                       (8 : int)))
                   = (101 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (9 : int)))
                     = (114 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (10 : int)))
                     = (101 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (11 : int)))
                       = (100 : int))))) /\
             (((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_455 __void_param))
                       (12 : int)))
                   = (32 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (13 : int)))
                     = (116 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (14 : int)))
                     = (111 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (15 : int)))
                       = (111 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (16 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (17 : int)))
                       = (109 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (18 : int)))
                       = (97 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_455 __void_param))
                             (19 : int)))
                         = (110 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_455 __void_param))
                        (20 : int)))
                    = (121 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_455 __void_param))
                          (21 : int)))
                      = (32 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (22 : int)))
                     = (116 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (23 : int)))
                     = (111 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (24 : int)))
                       = (107 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (25 : int)))
                     = (101 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (26 : int)))
                       = (110 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (27 : int)))
                       = (115 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_455 __void_param))
                             (28 : int)))
                         = (32 : int))))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_455 __void_param))
                         (29 : int)))
                     = (101 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (30 : int)))
                       = (120 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (31 : int)))
                       = (112 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_455 __void_param))
                             (32 : int)))
                         = (101 : int)))) /\
                  ((((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_455 __void_param))
                           (33 : int)))
                       = (99 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_455 __void_param))
                             (34 : int)))
                         = (116 : int))) /\
                     (((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_455 __void_param))
                             (35 : int)))
                         = (32 : int)) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_455 __void_param))
                               (36 : int)))
                           = (50 : int))))))))
end

module Temp___String_Literal_465
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_465 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_465__def_axiom:
    forall __void_param : unit [temp___String_Literal_465 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_465 __void_param))
               (1 : int)))
           = (84 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_465 __void_param))
                 (2 : int)))
             = (104 : int))) /\
         (((((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_465 __void_param))
                     (3 : int)))
                 = (101 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_465 __void_param))
                       (4 : int)))
                   = (32 : int))) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_465 __void_param))
                      (5 : int)))
                  = (80 : int))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_465 __void_param))
                       (6 : int)))
                   = (73 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_465 __void_param))
                         (7 : int)))
                     = (78 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_465 __void_param))
                        (8 : int)))
                    = (32 : int)))) /\
             (((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_465 __void_param))
                       (9 : int)))
                   = (105 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_465 __void_param))
                         (10 : int)))
                     = (115 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_465 __void_param))
                        (11 : int)))
                    = (32 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_465 __void_param))
                        (12 : int)))
                    = (110 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_465 __void_param))
                          (13 : int)))
                      = (111 : int))))) /\
            ((((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_465 __void_param))
                       (14 : int)))
                   = (116 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_465 __void_param))
                         (15 : int)))
                     = (32 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_465 __void_param))
                        (16 : int)))
                    = (99 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_465 __void_param))
                        (17 : int)))
                    = (111 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_465 __void_param))
                          (18 : int)))
                      = (114 : int)))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_465 __void_param))
                         (19 : int)))
                     = (114 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_465 __void_param))
                           (20 : int)))
                       = (101 : int))) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_465 __void_param))
                          (21 : int)))
                      = (99 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_465 __void_param))
                          (22 : int)))
                      = (116 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_465 __void_param))
                            (23 : int)))
                        = (46 : int)))))))
end

module Temp___String_Literal_468
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_468 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_468__def_axiom:
    forall __void_param : unit [temp___String_Literal_468 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_468 __void_param))
               (1 : int)))
           = (84 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_468 __void_param))
                 (2 : int)))
             = (104 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_468 __void_param))
                      (3 : int)))
                  = (101 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_468 __void_param))
                        (4 : int)))
                    = (32 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_468 __void_param))
                        (5 : int)))
                    = (67 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (6 : int)))
                      = (111 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_468 __void_param))
                        (7 : int)))
                    = (109 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (8 : int)))
                      = (109 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_468 __void_param))
                         (9 : int)))
                     = (97 : int)))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_468 __void_param))
                        (10 : int)))
                    = (110 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (11 : int)))
                      = (100 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (12 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (13 : int)))
                        = (105 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (14 : int)))
                      = (115 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (15 : int)))
                        = (32 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_468 __void_param))
                           (16 : int)))
                       = (110 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_468 __void_param))
                        (17 : int)))
                    = (111 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (18 : int)))
                      = (116 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (19 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (20 : int)))
                        = (99 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (21 : int)))
                      = (111 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (22 : int)))
                        = (114 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_468 __void_param))
                           (23 : int)))
                       = (114 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (24 : int)))
                      = (101 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (25 : int)))
                        = (99 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (26 : int)))
                        = (116 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (27 : int)))
                          = (32 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (28 : int)))
                        = (111 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (29 : int)))
                          = (114 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_468 __void_param))
                             (30 : int)))
                         = (32 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_468 __void_param))
                        (31 : int)))
                    = (99 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (32 : int)))
                      = (117 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (33 : int)))
                      = (114 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (34 : int)))
                        = (114 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (35 : int)))
                      = (101 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (36 : int)))
                        = (110 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_468 __void_param))
                           (37 : int)))
                       = (116 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (38 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (39 : int)))
                        = (115 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (40 : int)))
                        = (116 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (41 : int)))
                          = (97 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (42 : int)))
                        = (116 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (43 : int)))
                          = (101 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_468 __void_param))
                             (44 : int)))
                         = (32 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_468 __void_param))
                          (45 : int)))
                      = (105 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (46 : int)))
                        = (115 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (47 : int)))
                        = (32 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (48 : int)))
                          = (110 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (49 : int)))
                        = (111 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (50 : int)))
                          = (116 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_468 __void_param))
                             (51 : int)))
                         = (32 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_468 __void_param))
                            (52 : int)))
                        = (108 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (53 : int)))
                          = (111 : int))) /\
                      (((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (54 : int)))
                          = (99 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_468 __void_param))
                                (55 : int)))
                            = (107 : int)))) /\
                     ((((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_468 __void_param))
                              (56 : int)))
                          = (101 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_468 __void_param))
                                (57 : int)))
                            = (100 : int))) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_468 __void_param))
                               (58 : int)))
                           = (46 : int))))))))
end

module Temp___String_Literal_471
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_471 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_471__def_axiom:
    forall __void_param : unit [temp___String_Literal_471 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_471 __void_param))
               (1 : int)))
           = (117 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_471 __void_param))
                 (2 : int)))
             = (110 : int))) /\
         ((((Standard__character__rep.to_rep
               ((Array__Int__Standard__character.get
                   (temp___String_Literal_471 __void_param))
                  (3 : int)))
              = (108 : int)) /\
             ((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_471 __void_param))
                    (4 : int)))
                = (111 : int))) /\
            (((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_471 __void_param))
                    (5 : int)))
                = (99 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_471 __void_param))
                      (6 : int)))
                  = (107 : int)))))
end

module Temp___String_Literal_473
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_473 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_473__def_axiom:
    forall __void_param : unit [temp___String_Literal_473 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_473 __void_param))
               (1 : int)))
           = (117 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_473 __void_param))
                 (2 : int)))
             = (110 : int))) /\
         (((((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_473 __void_param))
                   (3 : int)))
               = (108 : int)) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_473 __void_param))
                     (4 : int)))
                 = (111 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_473 __void_param))
                     (5 : int)))
                 = (99 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_473 __void_param))
                       (6 : int)))
                   = (107 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_473 __void_param))
                     (7 : int)))
                 = (101 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_473 __void_param))
                       (8 : int)))
                   = (100 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_473 __void_param))
                       (9 : int)))
                   = (62 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_473 __void_param))
                         (10 : int)))
                     = (32 : int))))))
end

module Main__B_6__t__aggregate_def
  use _gnatprove_standard.Main
  use int.Int
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  val function main__B_6__t__aggregate_def (temp___477: Mystringtokeniser__tokenextent.tokenextent) : 
    Array__Int__Mystringtokeniser__tokenextent.map
end

module Temp___String_Literal_485
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_485 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_485__def_axiom:
    forall __void_param : unit [temp___String_Literal_485 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_485 __void_param))
               (1 : int)))
           = (89 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_485 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_485 __void_param))
                      (3 : int)))
                  = (117 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_485 __void_param))
                        (4 : int)))
                    = (32 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_485 __void_param))
                       (5 : int)))
                   = (101 : int))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_485 __void_param))
                        (6 : int)))
                    = (110 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (7 : int)))
                      = (116 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_485 __void_param))
                         (8 : int)))
                     = (101 : int)))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_485 __void_param))
                        (9 : int)))
                    = (114 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (10 : int)))
                      = (101 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_485 __void_param))
                         (11 : int)))
                     = (100 : int))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (12 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (13 : int)))
                        = (116 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_485 __void_param))
                           (14 : int)))
                       = (111 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_485 __void_param))
                        (15 : int)))
                    = (111 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (16 : int)))
                      = (32 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_485 __void_param))
                         (17 : int)))
                     = (109 : int))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (18 : int)))
                      = (97 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (19 : int)))
                        = (110 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_485 __void_param))
                           (20 : int)))
                       = (121 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (21 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (22 : int)))
                        = (116 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_485 __void_param))
                           (23 : int)))
                       = (111 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_485 __void_param))
                           (24 : int)))
                       = (107 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_485 __void_param))
                             (25 : int)))
                         = (101 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_485 __void_param))
                        (26 : int)))
                    = (110 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (27 : int)))
                      = (115 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_485 __void_param))
                         (28 : int)))
                     = (32 : int))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (29 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (30 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_485 __void_param))
                           (31 : int)))
                       = (45 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (32 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (33 : int)))
                        = (73 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_485 __void_param))
                           (34 : int)))
                       = (32 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (35 : int)))
                        = (115 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_485 __void_param))
                              (36 : int)))
                          = (97 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_485 __void_param))
                             (37 : int)))
                         = (105 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_485 __void_param))
                          (38 : int)))
                      = (100 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (39 : int)))
                        = (32 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_485 __void_param))
                           (40 : int)))
                       = (97 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (41 : int)))
                        = (116 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_485 __void_param))
                              (42 : int)))
                          = (32 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_485 __void_param))
                             (43 : int)))
                         = (109 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_485 __void_param))
                            (44 : int)))
                        = (111 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_485 __void_param))
                              (45 : int)))
                          = (115 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_485 __void_param))
                             (46 : int)))
                         = (116 : int))) /\
                     (((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_485 __void_param))
                             (47 : int)))
                         = (32 : int)) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_485 __void_param))
                               (48 : int)))
                           = (50 : int))))))))
end

module Temp___String_Literal_500
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_500 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_500__def_axiom:
    forall __void_param : unit [temp___String_Literal_500 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_500 __void_param))
               (1 : int)))
           = (84 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_500 __void_param))
                 (2 : int)))
             = (104 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_500 __void_param))
                      (3 : int)))
                  = (101 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_500 __void_param))
                        (4 : int)))
                    = (32 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_500 __void_param))
                        (5 : int)))
                    = (67 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (6 : int)))
                      = (111 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_500 __void_param))
                        (7 : int)))
                    = (109 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (8 : int)))
                      = (109 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (9 : int)))
                      = (97 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (10 : int)))
                        = (110 : int))))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_500 __void_param))
                        (11 : int)))
                    = (100 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (12 : int)))
                      = (32 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (13 : int)))
                      = (105 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (14 : int)))
                        = (115 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (15 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (16 : int)))
                        = (110 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_500 __void_param))
                           (17 : int)))
                       = (111 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_500 __void_param))
                        (18 : int)))
                    = (116 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (19 : int)))
                      = (32 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (20 : int)))
                      = (99 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (21 : int)))
                        = (111 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (22 : int)))
                      = (114 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (23 : int)))
                        = (114 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_500 __void_param))
                           (24 : int)))
                       = (101 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (25 : int)))
                      = (99 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (26 : int)))
                        = (116 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (27 : int)))
                        = (32 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (28 : int)))
                          = (111 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (29 : int)))
                        = (114 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (30 : int)))
                          = (32 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_500 __void_param))
                             (31 : int)))
                         = (99 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_500 __void_param))
                        (32 : int)))
                    = (117 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (33 : int)))
                      = (114 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (34 : int)))
                      = (114 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (35 : int)))
                        = (101 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (36 : int)))
                      = (110 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (37 : int)))
                        = (116 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (38 : int)))
                        = (32 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (39 : int)))
                          = (115 : int))))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (40 : int)))
                      = (116 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (41 : int)))
                        = (97 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (42 : int)))
                        = (116 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (43 : int)))
                          = (101 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (44 : int)))
                        = (32 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (45 : int)))
                          = (105 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_500 __void_param))
                             (46 : int)))
                         = (115 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_500 __void_param))
                          (47 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (48 : int)))
                        = (110 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (49 : int)))
                        = (111 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (50 : int)))
                          = (116 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (51 : int)))
                        = (32 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (52 : int)))
                          = (117 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_500 __void_param))
                             (53 : int)))
                         = (110 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_500 __void_param))
                            (54 : int)))
                        = (108 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (55 : int)))
                          = (111 : int))) /\
                      (((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (56 : int)))
                          = (99 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_500 __void_param))
                                (57 : int)))
                            = (107 : int)))) /\
                     ((((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_500 __void_param))
                              (58 : int)))
                          = (101 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_500 __void_param))
                                (59 : int)))
                            = (100 : int))) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_500 __void_param))
                               (60 : int)))
                           = (46 : int))))))))
end

module Temp___String_Literal_503
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_503 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_503__def_axiom:
    forall __void_param : unit [temp___String_Literal_503 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_503 __void_param))
               (1 : int)))
           = (108 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_503 __void_param))
                 (2 : int)))
             = (105 : int))) /\
         (((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_503 __void_param))
                 (3 : int)))
             = (115 : int)) /\
            ((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_503 __void_param))
                   (4 : int)))
               = (116 : int))))
end

module Temp___String_Literal_507
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_507 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_507__def_axiom:
    forall __void_param : unit [temp___String_Literal_507 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_507 __void_param))
               (1 : int)))
           = (114 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_507 __void_param))
                 (2 : int)))
             = (101 : int))) /\
         ((((Standard__character__rep.to_rep
               ((Array__Int__Standard__character.get
                   (temp___String_Literal_507 __void_param))
                  (3 : int)))
              = (109 : int)) /\
             ((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_507 __void_param))
                    (4 : int)))
                = (111 : int))) /\
            (((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_507 __void_param))
                    (5 : int)))
                = (118 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_507 __void_param))
                      (6 : int)))
                  = (101 : int)))))
end

module Temp___String_Literal_512
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_512 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_512__def_axiom:
    forall __void_param : unit [temp___String_Literal_512 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_512 __void_param))
               (1 : int)))
           = (115 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_512 __void_param))
                 (2 : int)))
             = (116 : int))) /\
         ((((Standard__character__rep.to_rep
               ((Array__Int__Standard__character.get
                   (temp___String_Literal_512 __void_param))
                  (3 : int)))
              = (111 : int)) /\
             ((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_512 __void_param))
                    (4 : int)))
                = (114 : int))) /\
            ((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_512 __void_param))
                   (5 : int)))
               = (101 : int))))
end

module Temp___String_Literal_515
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_515 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_515__def_axiom:
    forall __void_param : unit [temp___String_Literal_515 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_515 __void_param))
               (1 : int)))
           = (108 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_515 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         (((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_515 __void_param))
                 (3 : int)))
             = (97 : int)) /\
            ((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_515 __void_param))
                   (4 : int)))
               = (100 : int))))
end

module Temp___String_Literal_519
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_519 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_519__def_axiom:
    forall __void_param : unit [temp___String_Literal_519 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_519 __void_param))
               (1 : int)))
           = (112 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_519 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         ((Standard__character__rep.to_rep
             ((Array__Int__Standard__character.get
                 (temp___String_Literal_519 __void_param))
                (3 : int)))
            = (112 : int)))
end

module Temp___String_Literal_522
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_522 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_522__def_axiom:
    forall __void_param : unit [temp___String_Literal_522 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_522 __void_param))
               (1 : int)))
           = (112 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_522 __void_param))
                 (2 : int)))
             = (117 : int))) /\
         (((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_522 __void_param))
                 (3 : int)))
             = (115 : int)) /\
            ((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_522 __void_param))
                   (4 : int)))
               = (104 : int))))
end

module Temp___String_Literal_525
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_525 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_525__def_axiom:
    forall __void_param : unit [temp___String_Literal_525 __void_param].
      ((Standard__character__rep.to_rep
          ((Array__Int__Standard__character.get
              (temp___String_Literal_525 __void_param))
             (1 : int)))
         = (47 : int))
end

module Temp___String_Literal_528
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_528 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_528__def_axiom:
    forall __void_param : unit [temp___String_Literal_528 __void_param].
      ((Standard__character__rep.to_rep
          ((Array__Int__Standard__character.get
              (temp___String_Literal_528 __void_param))
             (1 : int)))
         = (42 : int))
end

module Temp___String_Literal_531
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_531 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_531__def_axiom:
    forall __void_param : unit [temp___String_Literal_531 __void_param].
      ((Standard__character__rep.to_rep
          ((Array__Int__Standard__character.get
              (temp___String_Literal_531 __void_param))
             (1 : int)))
         = (45 : int))
end

module Temp___String_Literal_534
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_534 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_534__def_axiom:
    forall __void_param : unit [temp___String_Literal_534 __void_param].
      ((Standard__character__rep.to_rep
          ((Array__Int__Standard__character.get
              (temp___String_Literal_534 __void_param))
             (1 : int)))
         = (43 : int))
end

module Temp___String_Literal_536
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_536 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_536__def_axiom:
    forall __void_param : unit [temp___String_Literal_536 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_536 __void_param))
               (1 : int)))
           = (108 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_536 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         (((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_536 __void_param))
                 (3 : int)))
             = (99 : int)) /\
            ((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_536 __void_param))
                   (4 : int)))
               = (107 : int))))
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Main__db___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__var___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__master_pin___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__enter_pin___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__p___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__current_state___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__command___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__number___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__opstack___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_2__t___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Mystringtokeniser__tokenextent___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  
  predicate dynamic_invariant (temp___expr_356: Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_352: bool) (temp___skip_constant_353: bool) (temp___do_toplevel_354: bool) (temp___do_typ_inv_355: bool) =
    true
  
  val dynamic_invariant (temp___expr_356: Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_352: bool) (temp___skip_constant_353: bool) (temp___do_toplevel_354: bool) (temp___do_typ_inv_355: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_356 :
                          Mystringtokeniser__tokenextent.tokenextent))
                      (temp___is_init_352 : bool))
                     (temp___skip_constant_353 : bool))
                    (temp___do_toplevel_354 : bool))
                   (temp___do_typ_inv_355 : bool)) }
  
  predicate default_initial_assumption (temp___expr_357: Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_358: bool) =
    true
  
  val default_initial_assumption (temp___expr_357: Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_358: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_357 :
                       Mystringtokeniser__tokenextent.tokenextent))
                   (temp___skip_top_level_358 : bool)) }
end

module Main__B_2__t__aggregate_def___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  use Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Main__B_2__t__aggregate_def as Main__B_2__t__aggregate_def
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  axiom def_axiom:
    forall temp___447 : Mystringtokeniser__tokenextent.tokenextent.
      let temp___446 =
        Main__B_2__t__aggregate_def.main__B_2__t__aggregate_def temp___447 in
      forall temp___448 : int.
        if (((((Mystringtokeniser__tokenextent___axiom.dynamic_invariant
                  temp___447)
                 True)
                True)
               True)
              True) then
          (((Array__Int__Mystringtokeniser__tokenextent.get temp___446)
              temp___448)
             = temp___447)
        else true
end

module Main__B_2__numtokens___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_2__L_3__i___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_2__B_4__tokstr___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_6__t___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_6__t__aggregate_def___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  use Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Main__B_6__t__aggregate_def as Main__B_6__t__aggregate_def
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  
  axiom def_axiom:
    forall temp___477 : Mystringtokeniser__tokenextent.tokenextent.
      let temp___476 =
        Main__B_6__t__aggregate_def.main__B_6__t__aggregate_def temp___477 in
      forall temp___478 : int.
        if (((((Mystringtokeniser__tokenextent___axiom.dynamic_invariant
                  temp___477)
                 True)
                True)
               True)
              True) then
          (((Array__Int__Mystringtokeniser__tokenextent.get temp___476)
              temp___478)
             = temp___477)
        else true
end

module Main__B_6__numtokens___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_6__L_7__i___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_6__B_8__tokstr___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_2__L_3___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_6__L_7___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__L_5___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__L_1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Ada___ada__text_io__count
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type count = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = count,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type count__ref = { mutable count__content : count }
  
  function count__ref_count__content__projection (a: count__ref) : count =
    a.count__content
  
  meta "model_projection" function count__ref_count__content__projection
  
  meta "inline:no" function count__ref_count__content__projection
  
  val count__havoc (x: count__ref) : unit
    writes { x }
end

module Ada___ada__text_io__count___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Ada___ada__text_io__count as Ada___ada__text_io__count
  
  predicate dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) =
    if ((temp___is_init_176 = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last)) then
      (((Ada___ada__text_io__count.dynamic_property
           Ada___ada__text_io__count.first)
          Ada___ada__text_io__count.last)
         temp___expr_180)
    else true
  
  val dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_180 : int))
                      (temp___is_init_176 : bool))
                     (temp___skip_constant_177 : bool))
                    (temp___do_toplevel_178 : bool))
                   (temp___do_typ_inv_179 : bool)) }
  
  predicate default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) =
    true
  
  val default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_181 : int))
                   (temp___skip_top_level_182 : bool)) }
end

module Ada___ada__text_io__line_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val line_length (__void_param: unit) : int
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom line_length__post_axiom:
    forall Ada___ada__text_io__file_system___file_system___ : Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private
          [((((((Ada___ada__text_io__line_length__2.line_length
                   Ada___ada__text_io__file_system___file_system___)
                  Ada___ada__text_io__standard_in___standard_in___)
                 Ada___ada__text_io__standard_out___standard_out___)
                Ada___ada__text_io__standard_err___standard_err___)
               Ada___ada__text_io__current_in___current_in___)
              Ada___ada__text_io__current_out___current_out___)
             Ada___ada__text_io__current_err___current_err___].
      let result =
        ((((((Ada___ada__text_io__line_length__2.line_length
                Ada___ada__text_io__file_system___file_system___)
               Ada___ada__text_io__standard_in___standard_in___)
              Ada___ada__text_io__standard_out___standard_out___)
             Ada___ada__text_io__standard_err___standard_err___)
            Ada___ada__text_io__current_in___current_in___)
           Ada___ada__text_io__current_out___current_out___)
          Ada___ada__text_io__current_err___current_err___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Ada___ada__text_io__page_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val page_length (__void_param: unit) : int
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__page_length__2.page_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom page_length__post_axiom:
    forall Ada___ada__text_io__file_system___file_system___ : Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private
          [((((((Ada___ada__text_io__page_length__2.page_length
                   Ada___ada__text_io__file_system___file_system___)
                  Ada___ada__text_io__standard_in___standard_in___)
                 Ada___ada__text_io__standard_out___standard_out___)
                Ada___ada__text_io__standard_err___standard_err___)
               Ada___ada__text_io__current_in___current_in___)
              Ada___ada__text_io__current_out___current_out___)
             Ada___ada__text_io__current_err___current_err___].
      let result =
        ((((((Ada___ada__text_io__page_length__2.page_length
                Ada___ada__text_io__file_system___file_system___)
               Ada___ada__text_io__standard_in___standard_in___)
              Ada___ada__text_io__standard_out___standard_out___)
             Ada___ada__text_io__standard_err___standard_err___)
            Ada___ada__text_io__current_in___current_in___)
           Ada___ada__text_io__current_out___current_out___)
          Ada___ada__text_io__current_err___current_err___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Operations__operandstack__storagearray___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__integer as Array__Int__Standard__integer
  use Array__Int__Standard__integer as Array__Int__Standard__integer
  
  predicate dynamic_invariant (temp___expr_327: Array__Int__Standard__integer.map) (temp___is_init_323: bool) (temp___skip_constant_324: bool) (temp___do_toplevel_325: bool) (temp___do_typ_inv_326: bool) =
    true
  
  val dynamic_invariant (temp___expr_327: Array__Int__Standard__integer.map) (temp___is_init_323: bool) (temp___skip_constant_324: bool) (temp___do_toplevel_325: bool) (temp___do_typ_inv_326: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_327 : Array__Int__Standard__integer.map))
                      (temp___is_init_323 : bool))
                     (temp___skip_constant_324 : bool))
                    (temp___do_toplevel_325 : bool))
                   (temp___do_typ_inv_326 : bool)) }
  
  predicate default_initial_assumption (temp___expr_329: Array__Int__Standard__integer.map) (temp___skip_top_level_330: bool) =
    true
  
  val default_initial_assumption (temp___expr_329: Array__Int__Standard__integer.map) (temp___skip_top_level_330: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_329 : Array__Int__Standard__integer.map))
                   (temp___skip_top_level_330 : bool)) }
end

module Operations__operandstack__size___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__integer___axiom as Standard__integer___axiom
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  use Operations__operandstack__size as Operations__operandstack__size
  use Operations__operandstack__stack__T13s as Operations__operandstack__stack__T13s
  use Operations__operandstack__stack__T13s__rep as Operations__operandstack__stack__T13s__rep
  
  val size (s: Operations__operandstack__stack.stack) : int
    requires { true }
    ensures { (((result = (Operations__operandstack__size.size s)) /\
                  ((Operations__operandstack__size.size__function_guard
                      result)
                     s)) /\
                 ((((((Standard__integer___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    (result
                       = (Operations__operandstack__stack__T13s__rep.to_rep
                            ((Operations__operandstack__stack.__split_fields
                                 s).Operations__operandstack__stack.rec__operations__operandstack__stack__size))))) }
  
  axiom size__post_axiom:
    forall s : Operations__operandstack__stack.stack
          [Operations__operandstack__size.size s].
      ((((((Operations__operandstack__stack___axiom.dynamic_invariant s) True)
            True)
           True)
          True) ->
         (let result = Operations__operandstack__size.size s in
          if ((Operations__operandstack__size.size__function_guard result) s) then
            ((true /\
                (((((Standard__integer___axiom.dynamic_invariant result) True)
                     False)
                    True)
                   True)) /\
               true)
          else true))
  
  axiom size__def_axiom:
    forall s : Operations__operandstack__stack.stack
          [Operations__operandstack__size.size s].
      ((((((Operations__operandstack__stack___axiom.dynamic_invariant s) True)
            True)
           True)
          True) ->
         ((Operations__operandstack__size.size s)
            = (Operations__operandstack__stack__T13s__rep.to_rep
                 ((Operations__operandstack__stack.__split_fields s).
                    Operations__operandstack__stack.rec__operations__operandstack__stack__size))))
end

module Operations__operandstack__stack__T13s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__mystringstr___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  predicate dynamic_invariant (temp___expr_258: Array__Int__Standard__character.map) (temp___is_init_254: bool) (temp___skip_constant_255: bool) (temp___do_toplevel_256: bool) (temp___do_typ_inv_257: bool) =
    true
  
  val dynamic_invariant (temp___expr_258: Array__Int__Standard__character.map) (temp___is_init_254: bool) (temp___skip_constant_255: bool) (temp___do_toplevel_256: bool) (temp___do_typ_inv_257: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_258 : Array__Int__Standard__character.map))
                      (temp___is_init_254 : bool))
                     (temp___skip_constant_255 : bool))
                    (temp___do_toplevel_256 : bool))
                   (temp___do_typ_inv_257 : bool)) }
  
  predicate default_initial_assumption (temp___expr_260: Array__Int__Standard__character.map) (temp___skip_top_level_261: bool) =
    true
  
  val default_initial_assumption (temp___expr_260: Array__Int__Standard__character.map) (temp___skip_top_level_261: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_260 : Array__Int__Standard__character.map))
                   (temp___skip_top_level_261 : bool)) }
end

module Main__lines__length___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural___axiom as Standard__natural___axiom
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length as Main__lines__length
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Main__lines__mystring__T14b as Main__lines__mystring__T14b
  use Main__lines__mystring__T14b__rep as Main__lines__mystring__T14b__rep
  
  val length (m: Main__lines__mystring.mystring) : int
    requires { true }
    ensures { (((result = (Main__lines__length.length m)) /\
                  ((Main__lines__length.length__function_guard result) m)) /\
                 ((((((Standard__natural___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    ((result
                        = (Main__lines__mystring__T14b__rep.to_rep
                             ((Main__lines__mystring.__split_fields m).
                                Main__lines__mystring.rec__main__lines__mystring__length))) /\
                       ([@GP_Pretty_Ada:69434] (result <= (2048 : int)))))) }
  
  axiom length__post_axiom:
    forall m : Main__lines__mystring.mystring [Main__lines__length.length m].
      ((((((Main__lines__mystring___axiom.dynamic_invariant m) True) True)
           True)
          True) ->
         (let result = Main__lines__length.length m in
          if ((Main__lines__length.length__function_guard result) m) then
            ((([@GP_Pretty_Ada:69434] (result <= (2048 : int))) /\
                (((((Standard__natural___axiom.dynamic_invariant result) True)
                     False)
                    True)
                   True)) /\
               true)
          else true))
  
  axiom length__def_axiom:
    forall m : Main__lines__mystring.mystring [Main__lines__length.length m].
      ((((((Main__lines__mystring___axiom.dynamic_invariant m) True) True)
           True)
          True) ->
         ((Main__lines__length.length m)
            = (Main__lines__mystring__T14b__rep.to_rep
                 ((Main__lines__mystring.__split_fields m).Main__lines__mystring.rec__main__lines__mystring__length))))
end

module Main__lines__get___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character as Standard__character
  use Standard__character___axiom as Standard__character___axiom
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length as Main__lines__length
  use Main__lines__get as Main__lines__get
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val get (m: Main__lines__mystring.mystring) (index: int) : int
    requires { [@GP_Pretty_Ada:69484]
               (index
                  <= (epsilon temp___result_282: int.
                        ((temp___result_282 = (Main__lines__length.length m)) /\
                           ((Main__lines__length.length__function_guard
                               temp___result_282)
                              m))))
    }
    ensures { (((result = ((Main__lines__get.get m) index)) /\
                  (((Main__lines__get.get__function_guard result) m) index)) /\
                 ((((((Standard__character___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    (result
                       = (Standard__character__rep.to_rep
                            (let temp___283 =
                               (Main__lines__mystring.__split_fields m).
                                 Main__lines__mystring.rec__main__lines__mystring__str in
                             (Array__Int__Standard__character.get temp___283)
                               index))))) }
  
  axiom get__post_axiom:
    forall m : Main__lines__mystring.mystring.
      forall index : int [(Main__lines__get.get m) index].
        ((((((((Main__lines__mystring___axiom.dynamic_invariant m) True) True)
               True)
              True) /\
             (((((Standard__positive___axiom.dynamic_invariant index) True)
                  True)
                 True)
                True)) /\
            ([@GP_Pretty_Ada:69484]
             (index
                <= (epsilon temp___result_284: int.
                      ((temp___result_284 = (Main__lines__length.length m)) /\
                         ((Main__lines__length.length__function_guard
                             temp___result_284)
                            m)))))) ->
           (let result = (Main__lines__get.get m) index in
            if (((Main__lines__get.get__function_guard result) m) index) then
              ((true /\
                  (((((Standard__character___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True)) /\
                 true)
            else true))
  
  axiom get__def_axiom:
    forall m : Main__lines__mystring.mystring.
      forall index : int [(Main__lines__get.get m) index].
        (((((((Main__lines__mystring___axiom.dynamic_invariant m) True) True)
              True)
             True) /\
            (((((Standard__positive___axiom.dynamic_invariant index) True)
                 True)
                True)
               True)) ->
           (((Main__lines__get.get m) index)
              = (Standard__character__rep.to_rep
                   (let temp___285 =
                      (Main__lines__mystring.__split_fields m).Main__lines__mystring.rec__main__lines__mystring__str in
                    (Array__Int__Standard__character.get temp___285) index))))
end

module Main__lines__mystring__T14b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_2__TTtSP1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_2__L_3__R27b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_6__TTtSP1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_6__L_7__R39b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__natural as Standard__natural
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__natural__rep as Standard__natural__rep
  use Standard__positive as Standard__positive
  use Standard__positive__rep as Standard__positive__rep
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__integer__rep as Standard__integer__rep
  use Standard__string___axiom as Standard__string___axiom
  use Variablestore__database as Variablestore__database
  use Main__db as Main__db
  use Variablestore__variable as Variablestore__variable
  use Variablestore__from_string___axiom as Variablestore__from_string___axiom
  use Main__var as Main__var
  use Variablestore__variable___axiom as Variablestore__variable___axiom
  use Main__master_pin as Main__master_pin
  use Main__enter_pin as Main__enter_pin
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__to_string as Main__lines__to_string
  use Main__lines__to_string___axiom as Main__lines__to_string___axiom
  use Main__lines__from_string___axiom as Main__lines__from_string___axiom
  use Main__lines__equal___axiom as Main__lines__equal___axiom
  use Main__lines__substring___axiom as Main__lines__substring___axiom
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Main__lines__get_line___axiom as Main__lines__get_line___axiom
  use Main__p as Main__p
  use Main__current_state as Main__current_state
  use Main__command as Main__command
  use Main__number as Main__number
  use Main__opstack as Main__opstack
  use Operations__operandstack__stack as Operations__operandstack__stack
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  use Operations__operandstack__init___axiom as Operations__operandstack__init___axiom
  use Variablestore__init___axiom as Variablestore__init___axiom
  use Ada___ada__text_io__put__4___axiom as Ada___ada__text_io__put__4___axiom
  use Pin__from_string___axiom as Pin__from_string___axiom
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Main__B_2__t as Main__B_2__t
  use Main__B_2__numtokens as Main__B_2__numtokens
  use Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Main__B_2__L_3__R27b as Main__B_2__L_3__R27b
  use Main__B_2__L_3__i as Main__B_2__L_3__i
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Main__B_2__B_4__tokstr as Main__B_2__B_4__tokstr
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Main__B_6__t as Main__B_6__t
  use Main__B_6__numtokens as Main__B_6__numtokens
  use Main__B_6__L_7__R39b as Main__B_6__L_7__R39b
  use Main__B_6__L_7__i as Main__B_6__L_7__i
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Main__B_6__B_8__tokstr as Main__B_6__B_8__tokstr
  use Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
  use Operations__plus___axiom as Operations__plus___axiom
  use Operations__minus___axiom as Operations__minus___axiom
  use Operations__multiply___axiom as Operations__multiply___axiom
  use Operations__divide___axiom as Operations__divide___axiom
  use Operations__push_operation___axiom as Operations__push_operation___axiom
  use Operations__pop_operation___axiom as Operations__pop_operation___axiom
  use Operations__load___axiom as Operations__load___axiom
  use Operations__store___axiom as Operations__store___axiom
  use Operations__remove___axiom as Operations__remove___axiom
  use Operations__list___axiom as Operations__list___axiom
  use Variablestore__database___axiom as Variablestore__database___axiom
  use Pin__pin___axiom as Pin__pin___axiom
  use Main__state___axiom as Main__state___axiom
  use Main__L_1 as Main__L_1
  use Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
  use Main__B_2__TTtSP1 as Main__B_2__TTtSP1
  use Main__B_2__TtS___axiom as Main__B_2__TtS___axiom
  use Main__B_2__L_3 as Main__B_2__L_3
  use Main__L_5 as Main__L_5
  use Main__B_6__TTtSP1 as Main__B_6__TTtSP1
  use Main__B_6__TtS___axiom as Main__B_6__TtS___axiom
  use Main__B_6__L_7 as Main__B_6__L_7
  use Temp___String_Literal_422 as Temp___String_Literal_422
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_426 as Temp___String_Literal_426
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_432 as Temp___String_Literal_432
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_436 as Temp___String_Literal_436
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_443 as Temp___String_Literal_443
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Main__B_2__t__aggregate_def as Main__B_2__t__aggregate_def
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Temp___String_Literal_455 as Temp___String_Literal_455
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_465 as Temp___String_Literal_465
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_468 as Temp___String_Literal_468
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_471 as Temp___String_Literal_471
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_473 as Temp___String_Literal_473
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Main__B_6__t__aggregate_def as Main__B_6__t__aggregate_def
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
  use Temp___String_Literal_485 as Temp___String_Literal_485
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_500 as Temp___String_Literal_500
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_503 as Temp___String_Literal_503
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_507 as Temp___String_Literal_507
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_512 as Temp___String_Literal_512
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_515 as Temp___String_Literal_515
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_519 as Temp___String_Literal_519
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_522 as Temp___String_Literal_522
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_525 as Temp___String_Literal_525
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_528 as Temp___String_Literal_528
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_531 as Temp___String_Literal_531
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_534 as Temp___String_Literal_534
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_536 as Temp___String_Literal_536
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Main__db___axiom as Main__db___axiom
  use Main__var___axiom as Main__var___axiom
  use Main__master_pin___axiom as Main__master_pin___axiom
  use Main__enter_pin___axiom as Main__enter_pin___axiom
  use Main__p___axiom as Main__p___axiom
  use Main__state___axiom as Main__state___axiom
  use Main__current_state___axiom as Main__current_state___axiom
  use Main__command___axiom as Main__command___axiom
  use Main__number___axiom as Main__number___axiom
  use Main__opstack___axiom as Main__opstack___axiom
  use Main__B_2__t___axiom as Main__B_2__t___axiom
  use Main__B_2__t__aggregate_def___axiom as Main__B_2__t__aggregate_def___axiom
  use Main__B_2__numtokens___axiom as Main__B_2__numtokens___axiom
  use Main__B_2__L_3__i___axiom as Main__B_2__L_3__i___axiom
  use Main__B_2__B_4__tokstr___axiom as Main__B_2__B_4__tokstr___axiom
  use Main__B_6__t___axiom as Main__B_6__t___axiom
  use Main__B_6__t__aggregate_def___axiom as Main__B_6__t__aggregate_def___axiom
  use Main__B_6__numtokens___axiom as Main__B_6__numtokens___axiom
  use Main__B_6__L_7__i___axiom as Main__B_6__L_7__i___axiom
  use Main__B_6__B_8__tokstr___axiom as Main__B_6__B_8__tokstr___axiom
  use Main__B_2__L_3___axiom as Main__B_2__L_3___axiom
  use Main__B_6__L_7___axiom as Main__B_6__L_7___axiom
  use Main__L_5___axiom as Main__L_5___axiom
  use Main__L_1___axiom as Main__L_1___axiom
  use Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
  use Variablestore__database___axiom as Variablestore__database___axiom
  use Variablestore__init___axiom as Variablestore__init___axiom
  use Variablestore__from_string___axiom as Variablestore__from_string___axiom
  use Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
  use Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
  use Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
  use Pin__from_string___axiom as Pin__from_string___axiom
  use Pin__pin___axiom as Pin__pin___axiom
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__line_length__2___axiom as Ada___ada__text_io__line_length__2___axiom
  use Ada___ada__text_io__page_length__2___axiom as Ada___ada__text_io__page_length__2___axiom
  use Ada___ada__text_io__put__4___axiom as Ada___ada__text_io__put__4___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Operations__plus___axiom as Operations__plus___axiom
  use Operations__minus___axiom as Operations__minus___axiom
  use Operations__multiply___axiom as Operations__multiply___axiom
  use Operations__divide___axiom as Operations__divide___axiom
  use Operations__push_operation___axiom as Operations__push_operation___axiom
  use Operations__pop_operation___axiom as Operations__pop_operation___axiom
  use Operations__load___axiom as Operations__load___axiom
  use Operations__store___axiom as Operations__store___axiom
  use Operations__remove___axiom as Operations__remove___axiom
  use Operations__list___axiom as Operations__list___axiom
  use Variablestore__variable___axiom as Variablestore__variable___axiom
  use Operations__operandstack__storagearray___axiom as Operations__operandstack__storagearray___axiom
  use Operations__operandstack__stack___axiom as Operations__operandstack__stack___axiom
  use Operations__operandstack__init___axiom as Operations__operandstack__init___axiom
  use Operations__operandstack__size___axiom as Operations__operandstack__size___axiom
  use Operations__operandstack__stack__T13s___axiom as Operations__operandstack__stack__T13s___axiom
  use Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Main__lines__to_string___axiom as Main__lines__to_string___axiom
  use Main__lines__from_string___axiom as Main__lines__from_string___axiom
  use Main__lines__equal___axiom as Main__lines__equal___axiom
  use Main__lines__length___axiom as Main__lines__length___axiom
  use Main__lines__substring___axiom as Main__lines__substring___axiom
  use Main__lines__get___axiom as Main__lines__get___axiom
  use Main__lines__get_line___axiom as Main__lines__get_line___axiom
  use Main__lines__mystring__T14b___axiom as Main__lines__mystring__T14b___axiom
  use Main__B_2__TtS___axiom as Main__B_2__TtS___axiom
  use Main__B_2__TTtSP1___axiom as Main__B_2__TTtSP1___axiom
  use Main__B_2__L_3__R27b___axiom as Main__B_2__L_3__R27b___axiom
  use Main__B_6__TtS___axiom as Main__B_6__TtS___axiom
  use Main__B_6__TTtSP1___axiom as Main__B_6__TTtSP1___axiom
  use Main__B_6__L_7__R39b___axiom as Main__B_6__L_7__R39b___axiom
  
  exception Temp___exception_457
  
  exception Temp___exception_467
  
  exception Temp___exception_470
  
  exception Temp___exception_487
  
  exception Temp___exception_502
  
  let def (__void_param : unit)
    requires { [#"main.adb" 16 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram main.adb:16]
      ());
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram main.adb:16]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram main.adb:16]
      ());
     ([#"main.adb" 16 0 0] ());
     ([@GNAT-comment:Assume Pre of the subprogram main.adb:16] ());
     ([#"main.adb" 16 0 0]
      (try
         ([#"main.adb" 17 0 0] ());
         ([#"main.adb" 18 0 0]
          (([#"main.adb" 18 0 0]
            assume {
              [#"main.adb" 18 0 0]
              ((Variablestore__database___axiom.default_initial_assumption
                  (Main__db.db.Variablestore__database.database__content))
                 False) });
           ([#"main.adb" 18 0 0]
            assume {
              [#"main.adb" 18 0 0]
              (((((Variablestore__database___axiom.dynamic_invariant
                     (Main__db.db.Variablestore__database.database__content))
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 19 0 0] ());
         ([#"main.adb" 19 0 0]
          ((let main__var__assume =
              [#"main.adb" 19 0 0]
              [@GP_Reason:VC_PRECONDITION]
              [@comment:   VAR : VariableStore.Variable := VariableStore.From_String("");                                                 ^ main.adb:19:49:VC_PRECONDITION]
              [@vc:annotation]
              [@GP_Shape:var_decl__call_from_string]
              [@GP_Sloc:main.adb:19:49]
              [@GP_Id:0]
              (Variablestore__from_string___axiom.from_string
                 (let temp___423 =
                    Temp___String_Literal_422.temp___String_Literal_422 () in
                  ((Standard__string.of_array temp___423) (1 : int))
                    (0 : int))) in
            Main__var.var__split_fields.Variablestore__variable.__split_fields__content <-
              (Variablestore__variable.__split_fields main__var__assume));
           assume {
             ((((Variablestore__variable___axiom.dynamic_invariant
                   { Variablestore__variable.__split_fields =
                       (Variablestore__variable.__split_fields__content
                           Main__var.var__split_fields) })
                  True)
                 False)
                True)
               True }));
         ([#"main.adb" 21 0 0]
          (([#"main.adb" 21 0 0]
            assume {
              [#"main.adb" 21 0 0]
              ((Pin__pin___axiom.default_initial_assumption
                  (Main__master_pin.master_pin.int__content))
                 False) });
           ([#"main.adb" 21 0 0]
            assume {
              [#"main.adb" 21 0 0]
              (((((Pin__pin___axiom.dynamic_invariant
                     (Main__master_pin.master_pin.int__content))
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 23 0 0]
          (([#"main.adb" 23 0 0]
            assume {
              [#"main.adb" 23 0 0]
              ((Pin__pin___axiom.default_initial_assumption
                  (Main__enter_pin.enter_pin.int__content))
                 False) });
           ([#"main.adb" 23 0 0]
            assume {
              [#"main.adb" 23 0 0]
              (((((Pin__pin___axiom.dynamic_invariant
                     (Main__enter_pin.enter_pin.int__content))
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 24 0 0] ());
         ([#"mystring.adb" 3 0 0] ());
         ([#"main.adb" 24 0 0] ());
         ([#"main.adb" 26 0 0]
          (([#"main.adb" 26 0 0]
            assume {
              [#"main.adb" 26 0 0]
              ((Main__lines__mystring___axiom.default_initial_assumption
                  { Main__lines__mystring.__split_fields =
                      (Main__lines__mystring.__split_fields__content
                          Main__p.p__split_fields) })
                 False) });
           ([#"main.adb" 26 0 0]
            assume {
              [#"main.adb" 26 0 0]
              (((((Main__lines__mystring___axiom.dynamic_invariant
                     { Main__lines__mystring.__split_fields =
                         (Main__lines__mystring.__split_fields__content
                             Main__p.p__split_fields) })
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 28 0 0] ());
         ([#"main.adb" 30 0 0] ());
         ([#"main.adb" 30 0 0]
          (([#"main.adb" 30 0 0]
            (Main__current_state.current_state.int__content <- (0 : int)));
           ([#"main.adb" 30 0 0]
            assume {
              [#"main.adb" 30 0 0]
              (((((Main__state___axiom.dynamic_invariant
                     (Main__current_state.current_state.int__content))
                    True)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 32 0 0] ());
         ([#"main.adb" 32 0 0]
          ((let main__command__assume =
              [#"main.adb" 32 0 0]
              [@GP_Reason:VC_PRECONDITION]
              [@vc:annotation]
              [@GP_Shape:command_decl__call_from_string]
              [@GP_Sloc:main.adb:32:37]
              [@comment:   COMMAND : Lines.MyString := Lines.From_String("");                                     ^ main.adb:32:37:VC_PRECONDITION]
              [@GP_Id:1]
              (Main__lines__from_string___axiom.from_string
                 (let temp___427 =
                    Temp___String_Literal_426.temp___String_Literal_426 () in
                  ((Standard__string.of_array temp___427) (1 : int))
                    (0 : int))) in
            Main__command.command__split_fields.Main__lines__mystring.__split_fields__content <-
              (Main__lines__mystring.__split_fields main__command__assume));
           assume {
             ((((Main__lines__mystring___axiom.dynamic_invariant
                   { Main__lines__mystring.__split_fields =
                       (Main__lines__mystring.__split_fields__content
                           Main__command.command__split_fields) })
                  True)
                 False)
                True)
               True }));
         ([#"main.adb" 34 0 0]
          (([#"main.adb" 34 0 0]
            (Main__number.number.int__content <- (0 : int)));
           ([#"main.adb" 34 0 0]
            assume {
              [#"main.adb" 34 0 0]
              (((((Standard__integer___axiom.dynamic_invariant
                     (Main__number.number.int__content))
                    True)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 37 0 0]
          (([#"main.adb" 37 0 0]
            assume {
              [#"main.adb" 37 0 0]
              ((Operations__operandstack__stack___axiom.default_initial_assumption
                  { Operations__operandstack__stack.__split_fields =
                      (Operations__operandstack__stack.__split_fields__content
                          Main__opstack.opstack__split_fields) })
                 False) });
           ([#"main.adb" 37 0 0]
            assume {
              [#"main.adb" 37 0 0]
              (((((Operations__operandstack__stack___axiom.dynamic_invariant
                     { Operations__operandstack__stack.__split_fields =
                         (Operations__operandstack__stack.__split_fields__content
                             Main__opstack.opstack__split_fields) })
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 61 0 0] ());
         ([#"main.adb" 108 0 0] ());
         ([#"main.adb" 105 0 0] ());
         ([#"main.adb" 56 0 0] ());
         ([@GP_Sloc:main.adb:41:33] [#"main.adb" 41 0 0] ());
         ([@GP_Sloc:main.adb:41:27] [#"main.adb" 41 0 0] ());
         ([@GP_Sloc:main.adb:41:27]
          [#"main.adb" 41 0 0]
          (let temp___compl_430 =
             { Operations__operandstack__stack.__split_fields =
                 (Operations__operandstack__stack.__split_fields__content
                     Main__opstack.opstack__split_fields) } in
           ([#"main.adb" 41 0 0] (val _f : unit in
                                  _f));
           (Operations__operandstack__init___axiom.init
              Main__opstack.opstack__split_fields)));
         ([@GP_Sloc:main.adb:42:23] [#"main.adb" 42 0 0] ());
         ([@GP_Sloc:main.adb:42:17] [#"main.adb" 42 0 0] ());
         ([@GP_Sloc:main.adb:42:17]
          [#"main.adb" 42 0 0]
          (let temp___compl_431 =
             Main__db.db.Variablestore__database.database__content in
           ([#"main.adb" 42 0 0] (val _f : unit in
                                  _f));
           (Variablestore__init___axiom.init Main__db.db)));
         ([@GP_Sloc:main.adb:44:4] [#"main.adb" 44 0 0] ());
         ([@GP_Sloc:main.adb:44:4]
          [#"main.adb" 44 0 0]
          (([#"main.adb" 44 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put__4___axiom.put
              (let temp___433 =
                 Temp___String_Literal_432.temp___String_Literal_432 () in
               ((Standard__string.of_array temp___433) (1 : int)) (9 : int)))));
         ([@GP_Sloc:main.adb:45:19] [#"main.adb" 45 0 0] ());
         ([@GP_Sloc:main.adb:45:9] [#"main.adb" 45 0 0] ());
         ([@GP_Sloc:main.adb:45:9]
          [#"main.adb" 45 0 0]
          (let temp___compl_434 =
             { Main__lines__mystring.__split_fields =
                 (Main__lines__mystring.__split_fields__content
                     Main__p.p__split_fields) } in
           ([#"main.adb" 45 0 0] (val _f : unit in
                                  _f));
           (Main__lines__get_line___axiom.get_line Main__p.p__split_fields)));
         ([@GP_Sloc:main.adb:48:23] [#"main.adb" 48 0 0] ());
         ([@GP_Sloc:main.adb:48:12] [#"main.adb" 48 0 0] ());
         ([@GP_Sloc:main.adb:48:4]
          [#"main.adb" 48 0 0]
          (if (([#"main.adb" 48 0 0]
                [#"main.adb" 48 0 0]
                (([@branch_id=951] Main.spark__branch).bool__content <-
                   ((Boolean.andb
                       ((([#"main.adb" 48 0 0]
                          (begin
                             ensures { true }
                             let _ =
                               let _ =
                                 Main__lines__to_string___axiom.to_string
                                   { Main__lines__mystring.__split_fields =
                                       (Main__lines__mystring.__split_fields__content
                                           Main__p.p__split_fields) } in
                               () in
                             ()
                           end));
                         (Standard__string.length
                            (Main__lines__to_string___axiom.to_string
                               { Main__lines__mystring.__split_fields =
                                   (Main__lines__mystring.__split_fields__content
                                       Main__p.p__split_fields) })))
                          = (4 : int)))
                      (let temp___439 =
                         Main__lines__to_string___axiom.to_string
                           { Main__lines__mystring.__split_fields =
                               (Main__lines__mystring.__split_fields__content
                                   Main__p.p__split_fields) } in
                       (let temp___438 =
                          [#"main.adb" 48 0 0] (val _f : int in
                                                _f) in
                        if ((Boolean.andb
                               ((Standard__string.first temp___439)
                                  <= temp___438))
                              (temp___438
                                 <= (Standard__string.last temp___439))) then
                          ([#"main.adb" 48 0 0]
                           (begin
                              ensures { true }
                              let _ =
                                let _ =
                                  let i =
                                    Standard__character__rep.to_rep
                                      ((Array__Int__Standard__character.get
                                          (Standard__string.to_array
                                             temp___439))
                                         temp___438) in
                                  (Boolean.andb (i >= (48 : int)))
                                    (i <= (57 : int)) in
                                () in
                              ()
                            end))
                        else ());
                       ([#"main.adb" 48 0 0]
                        (val _f : bool
                           ensures { [#"main.adb" 48 0 0]
                                     ((result = True) <->
                                        (let temp___442 =
                                           epsilon temp___result_440: 
                                             Standard__string.string__.
                                             ((temp___result_440
                                                 = (Main__lines__to_string.to_string
                                                      { Main__lines__mystring.__split_fields =
                                                          (Main__lines__mystring.__split_fields__content
                                                              Main__p.p__split_fields) })) /\
                                                ((Main__lines__to_string.to_string__function_guard
                                                    temp___result_440)
                                                   { Main__lines__mystring.__split_fields =
                                                       (Main__lines__mystring.__split_fields__content
                                                           Main__p.p__split_fields) })) in
                                         forall temp___441 : int.
                                           ((((Standard__string.first
                                                 temp___442)
                                                <= temp___441) /\
                                               (temp___441
                                                  <= (Standard__string.last
                                                        temp___442))) ->
                                              (let i =
                                                 Standard__character__rep.to_rep
                                                   ((Array__Int__Standard__character.get
                                                       (Standard__string.to_array
                                                          temp___442))
                                                      temp___441) in
                                               ((i >= (48 : int)) /\
                                                  (i <= (57 : int))))))) } in
                         _f))))));
               (([@branch_id=951] Main.spark__branch).bool__content)) then
             (([@GP_Sloc:main.adb:50:7] [#"main.adb" 50 0 0] ());
              ([@GP_Sloc:main.adb:50:53] [#"main.adb" 50 0 0] ());
              ([@GP_Sloc:main.adb:50:42] [#"main.adb" 50 0 0] ());
              ([@GP_Sloc:main.adb:50:24] [#"main.adb" 50 0 0] ());
              ([@GP_Sloc:main.adb:50:18]
               [#"main.adb" 50 0 0]
               [#"main.adb" 50 0 0]
               (Main__master_pin.master_pin.int__content <-
                  ([#"main.adb" 50 0 0]
                   [@GP_Reason:VC_PRECONDITION]
                   [@comment:      MASTER_PIN := PIN.From_String(Lines.To_String(P));                        ^ main.adb:50:24:VC_PRECONDITION]
                   [@vc:annotation]
                   [@GP_Shape:if__master_pin_assign__call_from_string]
                   [@GP_Id:2]
                   [@GP_Sloc:main.adb:50:24]
                   (Pin__from_string___axiom.from_string
                      (Main__lines__to_string___axiom.to_string
                         { Main__lines__mystring.__split_fields =
                             (Main__lines__mystring.__split_fields__content
                                 Main__p.p__split_fields) }))))))
           else
             (([@GP_Sloc:main.adb:52:7] [#"main.adb" 52 0 0] ());
              ([@GP_Sloc:main.adb:52:7]
               [#"main.adb" 52 0 0]
               (([#"main.adb" 52 0 0] (val _f : unit in
                                       _f));
                (Ada___ada__text_io__put__4___axiom.put
                   (let temp___437 =
                      Temp___String_Literal_436.temp___String_Literal_436 () in
                    ((Standard__string.of_array temp___437) (1 : int))
                      (18 : int)))));
              ([@GP_Sloc:main.adb:53:7]
               [#"main.adb" 53 0 0]
               [#"main.adb" 53 0 0] ((raise Return__exc) : unit)))));
         ([@GP_Sloc:main.adb:56:15]
          [#"main.adb" 56 0 0]
          (([@GNAT-comment:Translation of an Ada loop from main.adb:56] ());
           (if (Boolean.of_int (1 : int)) then
              ([#"main.adb" 56 0 0]
               (try
                  [#"main.adb" 56 0 0]
                  (try
                     let temp___loop_entry_547 =
                       { Main__lines__mystring.__split_fields =
                           (Main__lines__mystring.__split_fields__content
                               Main__p.p__split_fields) } in
                     let temp___loop_entry_546 =
                       { Operations__operandstack__stack.__split_fields =
                           (Operations__operandstack__stack.__split_fields__content
                               Main__opstack.opstack__split_fields) } in
                     let temp___loop_entry_545 =
                       { Variablestore__variable.__split_fields =
                           (Variablestore__variable.__split_fields__content
                               Main__var.var__split_fields) } in
                     let temp___loop_entry_544 =
                       Main__db.db.Variablestore__database.database__content in
                     let temp___loop_entry_543 =
                       { Main__lines__mystring.__split_fields =
                           (Main__lines__mystring.__split_fields__content
                               Main__command.command__split_fields) } in
                     ([@GNAT-comment:While loop translating the Ada loop from main.adb:56]
                      ());
                     ([#"main.adb" 56 0 0]
                      [#"main.adb" 56 0 0]
                      (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                        ());
                       while True do
                         ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                          (([@GNAT-comment:Assume implicit invariants from the loop main.adb:56]
                            ());
                           ([#"main.adb" 56 0 0]
                            assume {
                              [#"main.adb" 56 0 0]
                              ((((((((((((((((((true /\
                                                  (((((Main__state___axiom.dynamic_invariant
                                                         (Main__current_state.current_state.int__content))
                                                        True)
                                                       True)
                                                      True)
                                                     True)) /\
                                                 (true /\ true)) /\
                                                (((((Main__lines__mystring___axiom.dynamic_invariant
                                                       { Main__lines__mystring.__split_fields =
                                                           (Main__lines__mystring.__split_fields__content
                                                               Main__command.command__split_fields) })
                                                      True)
                                                     True)
                                                    True)
                                                   True)) /\
                                               (true /\ true)) /\
                                              (((((Variablestore__database___axiom.dynamic_invariant
                                                     (Main__db.db.Variablestore__database.database__content))
                                                    False)
                                                   True)
                                                  True)
                                                 True)) /\
                                             (true /\ true)) /\
                                            (((((Standard__integer___axiom.dynamic_invariant
                                                   (Main__number.number.int__content))
                                                  True)
                                                 True)
                                                True)
                                               True)) /\
                                           (true /\ true)) /\
                                          (((((Variablestore__variable___axiom.dynamic_invariant
                                                 { Variablestore__variable.__split_fields =
                                                     (Variablestore__variable.__split_fields__content
                                                         Main__var.var__split_fields) })
                                                True)
                                               True)
                                              True)
                                             True)) /\
                                         (true /\ true)) /\
                                        (((((Operations__operandstack__stack___axiom.dynamic_invariant
                                               { Operations__operandstack__stack.__split_fields =
                                                   (Operations__operandstack__stack.__split_fields__content
                                                       Main__opstack.opstack__split_fields) })
                                              False)
                                             True)
                                            True)
                                           True)) /\
                                       (true /\ true)) /\
                                      (((((Pin__pin___axiom.dynamic_invariant
                                             (Main__master_pin.master_pin.int__content))
                                            False)
                                           True)
                                          True)
                                         True)) /\
                                     (true /\ true)) /\
                                    (((((Pin__pin___axiom.dynamic_invariant
                                           (Main__enter_pin.enter_pin.int__content))
                                          False)
                                         True)
                                        True)
                                       True)) /\
                                   (true /\ true)) /\
                                  (((((Main__lines__mystring___axiom.dynamic_invariant
                                         { Main__lines__mystring.__split_fields =
                                             (Main__lines__mystring.__split_fields__content
                                                 Main__p.p__split_fields) })
                                        False)
                                       True)
                                      True)
                                     True)) /\
                                 (true /\ true)) });
                           ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                            ());
                           ([@GP_Sloc:main.adb:59:7] [#"main.adb" 59 0 0] ());
                           ([@GP_Sloc:main.adb:59:7]
                            [#"main.adb" 59 0 0]
                            (([#"main.adb" 59 0 0] (val _f : unit in
                                                    _f));
                             (Ada___ada__text_io__put__4___axiom.put
                                (let temp___444 =
                                   Temp___String_Literal_443.temp___String_Literal_443
                                     () in
                                 ((Standard__string.of_array temp___444)
                                    (1 : int))
                                   (10 : int)))));
                           ([@GP_Sloc:main.adb:60:22] [#"main.adb" 60 0 0] ());
                           ([@GP_Sloc:main.adb:60:12] [#"main.adb" 60 0 0] ());
                           ([@GP_Sloc:main.adb:60:12]
                            [#"main.adb" 60 0 0]
                            (let temp___compl_445 =
                               { Main__lines__mystring.__split_fields =
                                   (Main__lines__mystring.__split_fields__content
                                       Main__p.p__split_fields) } in
                             ([#"main.adb" 60 0 0] (val _f : unit in
                                                    _f));
                             (Main__lines__get_line___axiom.get_line
                                Main__p.p__split_fields)));
                           ([@GP_Sloc:main.adb:62:10]
                            [#"main.adb" 62 0 0] [#"main.adb" 62 0 0] ());
                           ([@GP_Sloc:main.adb:62:10]
                            [#"main.adb" 62 0 0]
                            [#"main.adb" 62 0 0]
                            (([#"main.adb" 62 0 0]
                              (Main__B_2__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <-
                                 (let temp___449 =
                                    Main__B_2__t__aggregate_def.main__B_2__t__aggregate_def
                                      { Mystringtokeniser__tokenextent.__split_fields =
                                          { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start =
                                              (1 :
                                                 Standard__positive.positive) ;
                                            Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length =
                                              (0 : Standard__natural.natural) } } in
                                  temp___449)));
                             ([#"main.adb" 62 0 0]
                              assume {
                                [#"main.adb" 62 0 0]
                                (((((Main__B_2__TtS___axiom.dynamic_invariant
                                       (Main__B_2__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content))
                                      True)
                                     False)
                                    True)
                                   True) })));
                           ([@GP_Sloc:main.adb:63:10]
                            [#"main.adb" 63 0 0]
                            [#"main.adb" 63 0 0]
                            (([#"main.adb" 63 0 0]
                              assume {
                                [#"main.adb" 63 0 0]
                                ((Standard__natural___axiom.default_initial_assumption
                                    (Main__B_2__numtokens.numtokens.int__content))
                                   False) });
                             ([#"main.adb" 63 0 0]
                              assume {
                                [#"main.adb" 63 0 0]
                                (((((Standard__natural___axiom.dynamic_invariant
                                       (Main__B_2__numtokens.numtokens.int__content))
                                      False)
                                     False)
                                    True)
                                   True) })));
                           ([@GP_Sloc:main.adb:73:13] [#"main.adb" 73 0 0] ());
                           ([@GP_Sloc:main.adb:72:32] [#"main.adb" 72 0 0] ());
                           ([@GP_Sloc:main.adb:65:53] [#"main.adb" 65 0 0] ());
                           ([@GP_Sloc:main.adb:65:42] [#"main.adb" 65 0 0] ());
                           ([@GP_Sloc:main.adb:65:56] [#"main.adb" 65 0 0] ());
                           ([@GP_Sloc:main.adb:65:58] [#"main.adb" 65 0 0] ());
                           ([@GP_Sloc:main.adb:65:27] [#"main.adb" 65 0 0] ());
                           ([@GP_Sloc:main.adb:65:27]
                            [#"main.adb" 65 0 0]
                            (let temp___compl_451 =
                               let temp___450 =
                                 Main__B_2__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in
                               ((Mystringtokeniser__tokenarray.of_array
                                   temp___450)
                                  Main__B_2__TTtSP1.first)
                                 Main__B_2__TTtSP1.last in
                             [#"main.adb" 65 0 0]
                             (let tokens =
                                { Array__Int__Mystringtokeniser__tokenextent.map__content =
                                    (Mystringtokeniser__tokenarray.to_array
                                       temp___compl_451) } in
                              let temp___compl_454 =
                                Main__B_2__numtokens.numtokens.int__content in
                              ([#"main.adb" 65 0 0] (val _f : unit in
                                                     _f));
                              ([#"main.adb" 65 0 0]
                               [@GP_Sloc:main.adb:65:27]
                               [@GP_Reason:VC_PRECONDITION]
                               [@comment:         MyStringTokeniser.Tokenise(Lines.To_String(P),T,NumTokens);                           ^ main.adb:65:27:VC_PRECONDITION]
                               [@vc:annotation]
                               [@GP_Shape:L_1_while__B_2_declblk__call_tokenise]
                               [@GP_Id:3]
                               (((((Mystringtokeniser__tokenise___axiom.tokenise
                                      (Main__lines__to_string___axiom.to_string
                                         { Main__lines__mystring.__split_fields =
                                             (Main__lines__mystring.__split_fields__content
                                                 Main__p.p__split_fields) }))
                                     tokens)
                                    (Standard__integer__rep.of_rep
                                       (Mystringtokeniser__tokenarray.first
                                          temp___compl_451)))
                                   (Standard__integer__rep.of_rep
                                      (Mystringtokeniser__tokenarray.last
                                         temp___compl_451)))
                                  Main__B_2__numtokens.numtokens));
                              (Main__B_2__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <-
                                 (let temp___452 =
                                    ((Mystringtokeniser__tokenarray.of_array
                                        (tokens.Array__Int__Mystringtokeniser__tokenextent.map__content))
                                       (Mystringtokeniser__tokenarray.first
                                          temp___compl_451))
                                      (Mystringtokeniser__tokenarray.last
                                         temp___compl_451) in
                                  let temp___453 =
                                    ((Array__Int__Mystringtokeniser__tokenextent.slide
                                        (Mystringtokeniser__tokenarray.to_array
                                           temp___452))
                                       (Mystringtokeniser__tokenarray.first
                                          temp___452))
                                      Main__B_2__TTtSP1.first in
                                  temp___453)))));
                           ([@GP_Sloc:main.adb:67:13] [#"main.adb" 67 0 0] ());
                           ([@GP_Sloc:main.adb:67:10]
                            [#"main.adb" 67 0 0]
                            (if (([#"main.adb" 67 0 0]
                                  [#"main.adb" 67 0 0]
                                  (([@branch_id=1041] Main.spark__branch).bool__content <-
                                     ((Main__B_2__numtokens.numtokens.int__content)
                                        > (2 : int))));
                                 (([@branch_id=1041] Main.spark__branch).bool__content)) then
                               (raise Temp___exception_457)
                             else ()));
                           ([@GP_Sloc:main.adb:72:22] [#"main.adb" 72 0 0] ());
                           ([@GP_Sloc:main.adb:72:22]
                            [#"main.adb" 72 0 0]
                            [#"main.adb" 72 0 0]
                            ((let main__B_2__L_3__R27b__assume =
                                Main__B_2__numtokens.numtokens.int__content in
                              [#"main.adb" 72 0 0]
                              assume {
                                [#"main.adb" 72 0 0]
                                (main__B_2__L_3__R27b__assume
                                   = Main__B_2__L_3__R27b.r27b) });
                             ([#"main.adb" 72 0 0]
                              assume {
                                [#"main.adb" 72 0 0]
                                (((((Standard__natural___axiom.dynamic_invariant
                                       Main__B_2__L_3__R27b.r27b)
                                      True)
                                     False)
                                    True)
                                   True) })));
                           ([@GP_Sloc:main.adb:72:32]
                            [#"main.adb" 72 0 0]
                            (let temp___458 = 1 : int in
                             let temp___459 = Main__B_2__L_3__R27b.r27b in
                             ([#"main.adb" 72 0 0]
                              (Main__B_2__L_3__i.i.int__content <- temp___458));
                             ([@GNAT-comment:Translation of an Ada loop from main.adb:72]
                              ());
                             (if ((Boolean.andb
                                     (temp___458
                                        <= (Main__B_2__L_3__i.i.int__content)))
                                    ((Main__B_2__L_3__i.i.int__content)
                                       <= temp___459)) then
                                ([#"main.adb" 72 0 0]
                                 (try
                                    let temp___loop_entry_463 =
                                      { Main__lines__mystring.__split_fields =
                                          (Main__lines__mystring.__split_fields__content
                                              Main__command.command__split_fields) } in
                                    ([@GNAT-comment:While loop translating the Ada loop from main.adb:72]
                                     ());
                                    ([#"main.adb" 72 0 0]
                                     [#"main.adb" 72 0 0]
                                     (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                                       ());
                                      while True do
                                        ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                                         (([@GNAT-comment:Assume implicit invariants from the loop main.adb:72]
                                           ());
                                          ([#"main.adb" 72 0 0]
                                           assume {
                                             [#"main.adb" 72 0 0]
                                             ((Boolean.andb
                                                 ((((true /\
                                                       (((((Main__lines__mystring___axiom.dynamic_invariant
                                                              { Main__lines__mystring.__split_fields =
                                                                  (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                             True)
                                                            True)
                                                           True)
                                                          True)) /\
                                                      (true /\ true)) /\
                                                     (((((Pin__pin___axiom.dynamic_invariant
                                                            (Main__enter_pin.enter_pin.int__content))
                                                           False)
                                                          True)
                                                         True)
                                                        True)) /\
                                                    (true /\ true)))
                                                (((1 : int)
                                                    <= (Main__B_2__L_3__i.i.int__content)) /\
                                                   ((Main__B_2__L_3__i.i.int__content)
                                                      <= Main__B_2__L_3__R27b.r27b))) });
                                          ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                                           ());
                                          ([@GP_Sloc:main.adb:74:67]
                                           [#"main.adb" 74 0 0] ());
                                          ([@GP_Sloc:main.adb:74:56]
                                           [#"main.adb" 74 0 0] ());
                                          ([@GP_Sloc:main.adb:74:40]
                                           [#"main.adb" 74 0 0] ());
                                          ([@GP_Sloc:main.adb:74:16]
                                           [#"main.adb" 74 0 0]
                                           [#"main.adb" 74 0 0]
                                           ((let main__B_2__B_4__tokstr__assume =
                                               Main__lines__to_string___axiom.to_string
                                                 ([#"main.adb" 74 0 0]
                                                  [@GP_Reason:VC_PRECONDITION]
                                                  [@vc:annotation]
                                                  [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring]
                                                  [@comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                        ^ main.adb:74:56:VC_PRECONDITION]
                                                  [@GP_Sloc:main.adb:74:56]
                                                  [@GP_Id:9]
                                                  (((Main__lines__substring___axiom.substring
                                                       { Main__lines__mystring.__split_fields =
                                                           (Main__lines__mystring.__split_fields__content
                                                               Main__p.p__split_fields) })
                                                      (Standard__positive__rep.to_rep
                                                         ((Mystringtokeniser__tokenextent.__split_fields
                                                              ((Array__Int__Mystringtokeniser__tokenextent.get
                                                                  (Main__B_2__t.t.
                                                                    Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                                 (([#"main.adb" 74 0 0]
                                                                   assert {
                                                                    [#"main.adb" 74 0 0]
                                                                    [#"main.adb" 74 0 0]
                                                                    [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__selectcomp__ixdcomp]
                                                                    [@GP_Sloc:main.adb:74:71]
                                                                    [@vc:annotation]
                                                                    [@comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                       ^ main.adb:74:71:VC_INDEX_CHECK]
                                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                                    [@GP_Id:4]
                                                                    ((Main__B_2__TTtSP1.first
                                                                    <= (Main__B_2__L_3__i.i.int__content)) /\
                                                                    ((Main__B_2__L_3__i.i.int__content)
                                                                    <= Main__B_2__TTtSP1.last)) });
                                                                  (Main__B_2__L_3__i.i.int__content)))).
                                                            Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)))
                                                     ([#"main.adb" 74 0 0]
                                                      [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub]
                                                      [@vc:annotation]
                                                      [@GP_Reason:VC_RANGE_CHECK]
                                                      [@GP_Sloc:main.adb:74:102]
                                                      [@GP_Id:8]
                                                      [@comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                      ^ main.adb:74:102:VC_RANGE_CHECK]
                                                      (Standard__positive.range_check_
                                                         (([#"main.adb" 74 0 0]
                                                           [@vc:annotation]
                                                           [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub__add]
                                                           [@comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                          ^ main.adb:74:90:VC_OVERFLOW_CHECK]
                                                           [@GP_Reason:VC_OVERFLOW_CHECK]
                                                           [@GP_Sloc:main.adb:74:90]
                                                           [@GP_Id:7]
                                                           (Standard__integer.range_check_
                                                              ((Standard__positive__rep.to_rep
                                                                  ((Mystringtokeniser__tokenextent.__split_fields
                                                                    ((Array__Int__Mystringtokeniser__tokenextent.get
                                                                    (Main__B_2__t.t.
                                                                    Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                                    (([#"main.adb" 74 0 0]
                                                                    assert {
                                                                    [#"main.adb" 74 0 0]
                                                                    [#"main.adb" 74 0 0]
                                                                    [@vc:annotation]
                                                                    [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                                    [@comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                  ^ main.adb:74:82:VC_INDEX_CHECK]
                                                                    [@GP_Id:5]
                                                                    [@GP_Sloc:main.adb:74:82]
                                                                    ((Main__B_2__TTtSP1.first
                                                                    <= (Main__B_2__L_3__i.i.int__content)) /\
                                                                    ((Main__B_2__L_3__i.i.int__content)
                                                                    <= Main__B_2__TTtSP1.last)) });
                                                                    (Main__B_2__L_3__i.i.int__content)))).
                                                                    Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))
                                                                 + (Standard__natural__rep.to_rep
                                                                    ((Mystringtokeniser__tokenextent.__split_fields
                                                                    ((Array__Int__Mystringtokeniser__tokenextent.get
                                                                    (Main__B_2__t.t.
                                                                    Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                                    (assert {
                                                                    [#"main.adb" 74 0 0]
                                                                    [@vc:annotation]
                                                                    [@comment:               TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                             ^ main.adb:74:93:VC_INDEX_CHECK]
                                                                    [@GP_Sloc:main.adb:74:93]
                                                                    [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                                    [@GP_Id:6]
                                                                    ((Main__B_2__TTtSP1.first
                                                                    <= (Main__B_2__L_3__i.i.int__content)) /\
                                                                    ((Main__B_2__L_3__i.i.int__content)
                                                                    <= Main__B_2__TTtSP1.last)) };
                                                                    (Main__B_2__L_3__i.i.int__content)))).
                                                                    Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)))))
                                                            - (1 : int)))))) in
                                             (Main__B_2__B_4__tokstr.tokstr.
                                                Array__Int__Standard__character.map__content <-
                                                (Standard__string.to_array
                                                   main__B_2__B_4__tokstr__assume));
                                             assume {
                                               ((Standard__integer__rep.to_rep
                                                   Main__B_2__B_4__tokstr.tokstr__first)
                                                  = (Standard__string.first
                                                       main__B_2__B_4__tokstr__assume)) };
                                             assume {
                                               ((Standard__integer__rep.to_rep
                                                   Main__B_2__B_4__tokstr.tokstr__last)
                                                  = (Standard__string.last
                                                       main__B_2__B_4__tokstr__assume)) });
                                            assume {
                                              ((((Standard__string___axiom.dynamic_invariant
                                                    (((Standard__string.of_array
                                                         (Main__B_2__B_4__tokstr.tokstr.
                                                            Array__Int__Standard__character.map__content))
                                                        (Standard__integer__rep.to_rep
                                                           Main__B_2__B_4__tokstr.tokstr__first))
                                                       (Standard__integer__rep.to_rep
                                                          Main__B_2__B_4__tokstr.tokstr__last)))
                                                   True)
                                                  False)
                                                 True)
                                                True }));
                                          ([@GP_Sloc:main.adb:76:16]
                                           [#"main.adb" 76 0 0]
                                           (if (([#"main.adb" 76 0 0]
                                                 [#"main.adb" 76 0 0]
                                                 (([@branch_id=1090]
                                                   Main.spark__branch).bool__content <-
                                                    ((Main__B_2__L_3__i.i.int__content)
                                                       = (1 : int))));
                                                (([@branch_id=1090]
                                                  Main.spark__branch).bool__content)) then
                                              (([@GP_Sloc:main.adb:78:19]
                                                [#"main.adb" 78 0 0] ());
                                               ([@GP_Sloc:main.adb:78:48]
                                                [#"main.adb" 78 0 0] ());
                                               ([@GP_Sloc:main.adb:78:35]
                                                [#"main.adb" 78 0 0] ());
                                               ([@GP_Sloc:main.adb:78:27]
                                                [#"main.adb" 78 0 0]
                                                (let temp___461 =
                                                   [#"main.adb" 78 0 0]
                                                   [@GP_Sloc:main.adb:78:35]
                                                   [@GP_Id:10]
                                                   [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__if__command_assign__call_from_string]
                                                   [@GP_Reason:VC_PRECONDITION]
                                                   [@vc:annotation]
                                                   [@comment:                  COMMAND := Lines.From_String(TokStr);                                   ^ main.adb:78:35:VC_PRECONDITION]
                                                   (Main__lines__from_string___axiom.from_string
                                                      (((Standard__string.of_array
                                                           (Main__B_2__B_4__tokstr.tokstr.
                                                              Array__Int__Standard__character.map__content))
                                                          (Standard__integer__rep.to_rep
                                                             Main__B_2__B_4__tokstr.tokstr__first))
                                                         (Standard__integer__rep.to_rep
                                                            Main__B_2__B_4__tokstr.tokstr__last))) in
                                                 Main__command.command__split_fields.
                                                   Main__lines__mystring.__split_fields__content <-
                                                   (Main__lines__mystring.__split_fields
                                                       temp___461))))
                                            else ()));
                                          ([@GP_Sloc:main.adb:80:16]
                                           [#"main.adb" 80 0 0]
                                           (if (([#"main.adb" 80 0 0]
                                                 [#"main.adb" 80 0 0]
                                                 (([@branch_id=1101]
                                                   Main.spark__branch).bool__content <-
                                                    ((Main__B_2__L_3__i.i.int__content)
                                                       = (2 : int))));
                                                (([@branch_id=1101]
                                                  Main.spark__branch).bool__content)) then
                                              (([@GP_Sloc:main.adb:82:19]
                                                [#"main.adb" 82 0 0] ());
                                               ([@GP_Sloc:main.adb:82:48]
                                                [#"main.adb" 82 0 0] ());
                                               ([@GP_Sloc:main.adb:82:35]
                                                [#"main.adb" 82 0 0] ());
                                               ([@GP_Sloc:main.adb:82:29]
                                                [#"main.adb" 82 0 0]
                                                [#"main.adb" 82 0 0]
                                                (Main__enter_pin.enter_pin.int__content <-
                                                   ([#"main.adb" 82 0 0]
                                                    [@GP_Id:11]
                                                    [@GP_Reason:VC_PRECONDITION]
                                                    [@vc:annotation]
                                                    [@GP_Sloc:main.adb:82:35]
                                                    [@GP_Shape:L_1_while__B_2_declblk__L_3_while__B_4_declblk__if__enter_pin_assign__call_from_string]
                                                    [@comment:                  ENTER_PIN := PIN.From_String(TokStr);                                   ^ main.adb:82:35:VC_PRECONDITION]
                                                    (Pin__from_string___axiom.from_string
                                                       (((Standard__string.of_array
                                                            (Main__B_2__B_4__tokstr.tokstr.
                                                               Array__Int__Standard__character.map__content))
                                                           (Standard__integer__rep.to_rep
                                                              Main__B_2__B_4__tokstr.tokstr__first))
                                                          (Standard__integer__rep.to_rep
                                                             Main__B_2__B_4__tokstr.tokstr__last)))))))
                                            else ()));
                                          ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:72]
                                           ());
                                          (if ((Main__B_2__L_3__i.i.int__content)
                                                 = temp___459) then
                                             (raise Main__B_2__L_3.L_3)
                                           else ());
                                          ([#"main.adb" 72 0 0]
                                           [#"main.adb" 72 0 0]
                                           (Main__B_2__L_3__i.i.int__content <-
                                              ((Main__B_2__L_3__i.i.int__content)
                                                 + (1 : int))))));
                                        ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                                         [@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                                         ());
                                        ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                                         ())
                                      done))
                                  with Main__B_2__L_3.L_3 -> ()
                                  end))
                              else ())));
                           ([@GP_Sloc:main.adb:89:63] [#"main.adb" 89 0 0] ());
                           ([@GP_Sloc:main.adb:89:22] [#"main.adb" 89 0 0] ());
                           ([@GP_Sloc:main.adb:89:35] [#"main.adb" 89 0 0] ());
                           ([@GP_Sloc:main.adb:89:15] [#"main.adb" 89 0 0] ());
                           ([@GP_Sloc:main.adb:89:7]
                            [#"main.adb" 89 0 0]
                            (if (([#"main.adb" 89 0 0]
                                  [#"main.adb" 89 0 0]
                                  (([@branch_id=1115] Main.spark__branch).bool__content <-
                                     ((Boolean.andb
                                         ((Main__lines__equal___axiom.equal
                                             { Main__lines__mystring.__split_fields =
                                                 (Main__lines__mystring.__split_fields__content
                                                     Main__command.command__split_fields) })
                                            ([#"main.adb" 89 0 0]
                                             [@GP_Id:12]
                                             [@GP_Reason:VC_PRECONDITION]
                                             [@vc:annotation]
                                             [@GP_Sloc:main.adb:89:35]
                                             [@comment:      if Lines.Equal(COMMAND,Lines.From_String("unlock")) and Current_State = locked then                                   ^ main.adb:89:35:VC_PRECONDITION]
                                             [@GP_Shape:L_1_while__if__and__call_equal__call_from_string]
                                             (Main__lines__from_string___axiom.from_string
                                                (let temp___472 =
                                                   Temp___String_Literal_471.temp___String_Literal_471
                                                     () in
                                                 ((Standard__string.of_array
                                                     temp___472)
                                                    (1 : int))
                                                   (6 : int))))))
                                        ((Main__current_state.current_state.int__content)
                                           = (0 : int)))));
                                 (([@branch_id=1115] Main.spark__branch).bool__content)) then
                               ([@GP_Sloc:main.adb:91:10]
                                [#"main.adb" 91 0 0]
                                (if (([#"main.adb" 91 0 0]
                                      [#"main.adb" 91 0 0]
                                      (([@branch_id=1131] Main.spark__branch).bool__content <-
                                         ((Main__master_pin.master_pin.int__content)
                                            = (Main__enter_pin.enter_pin.int__content))));
                                     (([@branch_id=1131] Main.spark__branch).bool__content)) then
                                   (([@GP_Sloc:main.adb:92:13]
                                     [#"main.adb" 92 0 0] ());
                                    ([@GP_Sloc:main.adb:92:27]
                                     [#"main.adb" 92 0 0]
                                     [#"main.adb" 92 0 0]
                                     (Main__current_state.current_state.int__content <-
                                        (1 : int))))
                                 else (raise Temp___exception_467)))
                             else (raise Temp___exception_470)));
                           ([@GP_Sloc:main.adb:105:38]
                            [#"main.adb" 105 0 0]
                            (([@GNAT-comment:Translation of an Ada loop from main.adb:105]
                              ());
                             (if ((Main__current_state.current_state.int__content)
                                    = (1 : int)) then
                                ([#"main.adb" 105 0 0]
                                 (try
                                    [#"main.adb" 105 0 0]
                                    (try
                                       let temp___loop_entry_542 =
                                         { Main__lines__mystring.__split_fields =
                                             (Main__lines__mystring.__split_fields__content
                                                 Main__p.p__split_fields) } in
                                       let temp___loop_entry_541 =
                                         { Operations__operandstack__stack.__split_fields =
                                             (Operations__operandstack__stack.__split_fields__content
                                                 Main__opstack.opstack__split_fields) } in
                                       let temp___loop_entry_540 =
                                         { Variablestore__variable.__split_fields =
                                             (Variablestore__variable.__split_fields__content
                                                 Main__var.var__split_fields) } in
                                       let temp___loop_entry_539 =
                                         Main__db.db.Variablestore__database.database__content in
                                       let temp___loop_entry_538 =
                                         { Main__lines__mystring.__split_fields =
                                             (Main__lines__mystring.__split_fields__content
                                                 Main__command.command__split_fields) } in
                                       ([@GNAT-comment:While loop translating the Ada loop from main.adb:105]
                                        ());
                                       ([#"main.adb" 105 0 0]
                                        [#"main.adb" 105 0 0]
                                        (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                                          ());
                                         while True do
                                           ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                                            (([@GNAT-comment:Assume implicit invariants from the loop main.adb:105]
                                              ());
                                             ([#"main.adb" 105 0 0]
                                              assume {
                                                [#"main.adb" 105 0 0]
                                                ((Boolean.andb
                                                    ((((((((((((((((((true /\
                                                                    (((((Main__state___axiom.dynamic_invariant
                                                                    (Main__current_state.current_state.int__content))
                                                                    True)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                    (true /\
                                                                    true)) /\
                                                                    (((((Main__lines__mystring___axiom.dynamic_invariant
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    True)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                    (true /\
                                                                    true)) /\
                                                                    (((((Variablestore__database___axiom.dynamic_invariant
                                                                    (Main__db.db.
                                                                    Variablestore__database.database__content))
                                                                    False)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                   (true /\
                                                                    true)) /\
                                                                  (((((Standard__integer___axiom.dynamic_invariant
                                                                    (Main__number.number.int__content))
                                                                    True)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                 (true /\
                                                                    true)) /\
                                                                (((((Variablestore__variable___axiom.dynamic_invariant
                                                                    { Variablestore__variable.__split_fields =
                                                                    (Variablestore__variable.__split_fields__content
                                                                    Main__var.var__split_fields) })
                                                                    True)
                                                                    True)
                                                                    True)
                                                                   True)) /\
                                                               (true /\ true)) /\
                                                              (((((Operations__operandstack__stack___axiom.dynamic_invariant
                                                                    { Operations__operandstack__stack.__split_fields =
                                                                    (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) })
                                                                    False)
                                                                   True)
                                                                  True)
                                                                 True)) /\
                                                             (true /\ true)) /\
                                                            (((((Pin__pin___axiom.dynamic_invariant
                                                                   (Main__master_pin.master_pin.int__content))
                                                                  False)
                                                                 True)
                                                                True)
                                                               True)) /\
                                                           (true /\ true)) /\
                                                          (((((Pin__pin___axiom.dynamic_invariant
                                                                 (Main__enter_pin.enter_pin.int__content))
                                                                False)
                                                               True)
                                                              True)
                                                             True)) /\
                                                         (true /\ true)) /\
                                                        (((((Main__lines__mystring___axiom.dynamic_invariant
                                                               { Main__lines__mystring.__split_fields =
                                                                   (Main__lines__mystring.__split_fields__content
                                                                    Main__p.p__split_fields) })
                                                              False)
                                                             True)
                                                            True)
                                                           True)) /\
                                                       (true /\ true)))
                                                   ((Main__current_state.current_state.int__content)
                                                      = (1 : int))) });
                                             ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                                              ());
                                             ([@GP_Sloc:main.adb:106:10]
                                              [#"main.adb" 106 0 0] ());
                                             ([@GP_Sloc:main.adb:106:10]
                                              [#"main.adb" 106 0 0]
                                              (([#"main.adb" 106 0 0]
                                                (val _f : unit in
                                                 _f));
                                               (Ada___ada__text_io__put__4___axiom.put
                                                  (let temp___474 =
                                                     Temp___String_Literal_473.temp___String_Literal_473
                                                       () in
                                                   ((Standard__string.of_array
                                                       temp___474)
                                                      (1 : int))
                                                     (10 : int)))));
                                             ([@GP_Sloc:main.adb:107:25]
                                              [#"main.adb" 107 0 0] ());
                                             ([@GP_Sloc:main.adb:107:15]
                                              [#"main.adb" 107 0 0] ());
                                             ([@GP_Sloc:main.adb:107:15]
                                              [#"main.adb" 107 0 0]
                                              (let temp___compl_475 =
                                                 { Main__lines__mystring.__split_fields =
                                                     (Main__lines__mystring.__split_fields__content
                                                         Main__p.p__split_fields) } in
                                               ([#"main.adb" 107 0 0]
                                                (val _f : unit in
                                                 _f));
                                               (Main__lines__get_line___axiom.get_line
                                                  Main__p.p__split_fields)));
                                             ([@GP_Sloc:main.adb:109:13]
                                              [#"main.adb" 109 0 0]
                                              [#"main.adb" 109 0 0] ());
                                             ([@GP_Sloc:main.adb:109:13]
                                              [#"main.adb" 109 0 0]
                                              [#"main.adb" 109 0 0]
                                              (([#"main.adb" 109 0 0]
                                                (Main__B_6__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <-
                                                   (let temp___479 =
                                                      Main__B_6__t__aggregate_def.main__B_6__t__aggregate_def
                                                        { Mystringtokeniser__tokenextent.__split_fields =
                                                            { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start =
                                                                (1 :
                                                                   Standard__positive.positive) ;
                                                              Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length =
                                                                (0 :
                                                                   Standard__natural.natural) } } in
                                                    temp___479)));
                                               ([#"main.adb" 109 0 0]
                                                assume {
                                                  [#"main.adb" 109 0 0]
                                                  (((((Main__B_6__TtS___axiom.dynamic_invariant
                                                         (Main__B_6__t.t.
                                                            Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                        True)
                                                       False)
                                                      True)
                                                     True) })));
                                             ([@GP_Sloc:main.adb:110:13]
                                              [#"main.adb" 110 0 0]
                                              [#"main.adb" 110 0 0]
                                              (([#"main.adb" 110 0 0]
                                                assume {
                                                  [#"main.adb" 110 0 0]
                                                  ((Standard__natural___axiom.default_initial_assumption
                                                      (Main__B_6__numtokens.numtokens.int__content))
                                                     False) });
                                               ([#"main.adb" 110 0 0]
                                                assume {
                                                  [#"main.adb" 110 0 0]
                                                  (((((Standard__natural___axiom.dynamic_invariant
                                                         (Main__B_6__numtokens.numtokens.int__content))
                                                        False)
                                                       False)
                                                      True)
                                                     True) })));
                                             ([@GP_Sloc:main.adb:123:16]
                                              [#"main.adb" 123 0 0] ());
                                             ([@GP_Sloc:main.adb:122:35]
                                              [#"main.adb" 122 0 0] ());
                                             ([@GP_Sloc:main.adb:114:56]
                                              [#"main.adb" 114 0 0] ());
                                             ([@GP_Sloc:main.adb:114:45]
                                              [#"main.adb" 114 0 0] ());
                                             ([@GP_Sloc:main.adb:114:59]
                                              [#"main.adb" 114 0 0] ());
                                             ([@GP_Sloc:main.adb:114:61]
                                              [#"main.adb" 114 0 0] ());
                                             ([@GP_Sloc:main.adb:114:30]
                                              [#"main.adb" 114 0 0] ());
                                             ([@GP_Sloc:main.adb:114:30]
                                              [#"main.adb" 114 0 0]
                                              (let temp___compl_481 =
                                                 let temp___480 =
                                                   Main__B_6__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in
                                                 ((Mystringtokeniser__tokenarray.of_array
                                                     temp___480)
                                                    Main__B_6__TTtSP1.first)
                                                   Main__B_6__TTtSP1.last in
                                               [#"main.adb" 114 0 0]
                                               (let tokens =
                                                  { Array__Int__Mystringtokeniser__tokenextent.map__content =
                                                      (Mystringtokeniser__tokenarray.to_array
                                                         temp___compl_481) } in
                                                let temp___compl_484 =
                                                  Main__B_6__numtokens.numtokens.int__content in
                                                ([#"main.adb" 114 0 0]
                                                 (val _f : unit in
                                                  _f));
                                                ([#"main.adb" 114 0 0]
                                                 [@GP_Id:13]
                                                 [@GP_Reason:VC_PRECONDITION]
                                                 [@vc:annotation]
                                                 [@GP_Sloc:main.adb:114:30]
                                                 [@GP_Shape:L_1_while__L_5_while__B_6_declblk__call_tokenise]
                                                 [@comment:            MyStringTokeniser.Tokenise(Lines.To_String(P),T,NumTokens);                              ^ main.adb:114:30:VC_PRECONDITION]
                                                 (((((Mystringtokeniser__tokenise___axiom.tokenise
                                                        (Main__lines__to_string___axiom.to_string
                                                           { Main__lines__mystring.__split_fields =
                                                               (Main__lines__mystring.__split_fields__content
                                                                   Main__p.p__split_fields) }))
                                                       tokens)
                                                      (Standard__integer__rep.of_rep
                                                         (Mystringtokeniser__tokenarray.first
                                                            temp___compl_481)))
                                                     (Standard__integer__rep.of_rep
                                                        (Mystringtokeniser__tokenarray.last
                                                           temp___compl_481)))
                                                    Main__B_6__numtokens.numtokens));
                                                (Main__B_6__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <-
                                                   (let temp___482 =
                                                      ((Mystringtokeniser__tokenarray.of_array
                                                          (tokens.Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                         (Mystringtokeniser__tokenarray.first
                                                            temp___compl_481))
                                                        (Mystringtokeniser__tokenarray.last
                                                           temp___compl_481) in
                                                    let temp___483 =
                                                      ((Array__Int__Mystringtokeniser__tokenextent.slide
                                                          (Mystringtokeniser__tokenarray.to_array
                                                             temp___482))
                                                         (Mystringtokeniser__tokenarray.first
                                                            temp___482))
                                                        Main__B_6__TTtSP1.first in
                                                    temp___483)))));
                                             ([@GP_Sloc:main.adb:116:16]
                                              [#"main.adb" 116 0 0] ());
                                             ([@GP_Sloc:main.adb:116:13]
                                              [#"main.adb" 116 0 0]
                                              (if (([#"main.adb" 116 0 0]
                                                    [#"main.adb" 116 0 0]
                                                    (([@branch_id=1200]
                                                      Main.spark__branch).bool__content <-
                                                       ((Main__B_6__numtokens.numtokens.int__content)
                                                          > (2 : int))));
                                                   (([@branch_id=1200]
                                                     Main.spark__branch).bool__content)) then
                                                 (raise Temp___exception_487)
                                               else ()));
                                             ([@GP_Sloc:main.adb:122:25]
                                              [#"main.adb" 122 0 0] ());
                                             ([@GP_Sloc:main.adb:122:25]
                                              [#"main.adb" 122 0 0]
                                              [#"main.adb" 122 0 0]
                                              ((let main__B_6__L_7__R39b__assume =
                                                  Main__B_6__numtokens.numtokens.int__content in
                                                [#"main.adb" 122 0 0]
                                                assume {
                                                  [#"main.adb" 122 0 0]
                                                  (main__B_6__L_7__R39b__assume
                                                     = Main__B_6__L_7__R39b.r39b) });
                                               ([#"main.adb" 122 0 0]
                                                assume {
                                                  [#"main.adb" 122 0 0]
                                                  (((((Standard__natural___axiom.dynamic_invariant
                                                         Main__B_6__L_7__R39b.r39b)
                                                        True)
                                                       False)
                                                      True)
                                                     True) })));
                                             ([@GP_Sloc:main.adb:122:35]
                                              [#"main.adb" 122 0 0]
                                              (let temp___488 = 1 : int in
                                               let temp___489 =
                                                 Main__B_6__L_7__R39b.r39b in
                                               ([#"main.adb" 122 0 0]
                                                (Main__B_6__L_7__i.i.int__content <-
                                                   temp___488));
                                               ([@GNAT-comment:Translation of an Ada loop from main.adb:122]
                                                ());
                                               (if ((Boolean.andb
                                                       (temp___488
                                                          <= (Main__B_6__L_7__i.i.int__content)))
                                                      ((Main__B_6__L_7__i.i.int__content)
                                                         <= temp___489)) then
                                                  ([#"main.adb" 122 0 0]
                                                   (try
                                                      let temp___loop_entry_497 =
                                                        { Variablestore__variable.__split_fields =
                                                            (Variablestore__variable.__split_fields__content
                                                                Main__var.var__split_fields) } in
                                                      let temp___loop_entry_496 =
                                                        { Main__lines__mystring.__split_fields =
                                                            (Main__lines__mystring.__split_fields__content
                                                                Main__command.command__split_fields) } in
                                                      ([@GNAT-comment:While loop translating the Ada loop from main.adb:122]
                                                       ());
                                                      ([#"main.adb" 122 0 0]
                                                       [#"main.adb" 122 0 0]
                                                       (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                                                         ());
                                                        while True do
                                                          ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                                                           (([@GNAT-comment:Assume implicit invariants from the loop main.adb:122]
                                                             ());
                                                            ([#"main.adb" 122 0 0]
                                                             assume {
                                                               [#"main.adb" 122 0 0]
                                                               ((Boolean.andb
                                                                   ((((((((true /\
                                                                    (((((Main__lines__mystring___axiom.dynamic_invariant
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    True)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                    (true /\
                                                                    true)) /\
                                                                    (((((Standard__integer___axiom.dynamic_invariant
                                                                    (Main__number.number.int__content))
                                                                    True)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                    (true /\
                                                                    true)) /\
                                                                    (((((Variablestore__variable___axiom.dynamic_invariant
                                                                    { Variablestore__variable.__split_fields =
                                                                    (Variablestore__variable.__split_fields__content
                                                                    Main__var.var__split_fields) })
                                                                    True)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                    (true /\
                                                                    true)) /\
                                                                    (((((Pin__pin___axiom.dynamic_invariant
                                                                    (Main__enter_pin.enter_pin.int__content))
                                                                    False)
                                                                    True)
                                                                    True)
                                                                    True)) /\
                                                                    (true /\
                                                                    true)))
                                                                  (((1 : int)
                                                                    <= 
                                                                    (Main__B_6__L_7__i.i.int__content)) /\
                                                                    ((Main__B_6__L_7__i.i.int__content)
                                                                    <= Main__B_6__L_7__R39b.r39b))) });
                                                            ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                                                             ());
                                                            ([@GP_Sloc:main.adb:124:70]
                                                             [#"main.adb" 124 0 0]
                                                             ());
                                                            ([@GP_Sloc:main.adb:124:59]
                                                             [#"main.adb" 124 0 0]
                                                             ());
                                                            ([@GP_Sloc:main.adb:124:43]
                                                             [#"main.adb" 124 0 0]
                                                             ());
                                                            ([@GP_Sloc:main.adb:124:19]
                                                             [#"main.adb" 124 0 0]
                                                             [#"main.adb" 124 0 0]
                                                             ((let main__B_6__B_8__tokstr__assume =
                                                                 Main__lines__to_string___axiom.to_string
                                                                   ([#"main.adb" 124 0 0]
                                                                    [@GP_Sloc:main.adb:124:59]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@GP_Id:19]
                                                                    [@vc:annotation]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring]
                                                                    [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                           ^ main.adb:124:59:VC_PRECONDITION]
                                                                    (((Main__lines__substring___axiom.substring
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__p.p__split_fields) })
                                                                    (Standard__positive__rep.to_rep
                                                                    ((Mystringtokeniser__tokenextent.__split_fields
                                                                    ((Array__Int__Mystringtokeniser__tokenextent.get
                                                                    (Main__B_6__t.t.
                                                                    Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                                    (([#"main.adb" 124 0 0]
                                                                    assert {
                                                                    [#"main.adb" 124 0 0]
                                                                    [#"main.adb" 124 0 0]
                                                                    [@GP_Id:14]
                                                                    [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                          ^ main.adb:124:74:VC_INDEX_CHECK]
                                                                    [@vc:annotation]
                                                                    [@GP_Sloc:main.adb:124:74]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__selectcomp__ixdcomp]
                                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                                    ((Main__B_6__TTtSP1.first
                                                                    <= (Main__B_6__L_7__i.i.int__content)) /\
                                                                    ((Main__B_6__L_7__i.i.int__content)
                                                                    <= Main__B_6__TTtSP1.last)) });
                                                                    (Main__B_6__L_7__i.i.int__content)))).
                                                                    Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)))
                                                                    ([#"main.adb" 124 0 0]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub]
                                                                    [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                         ^ main.adb:124:105:VC_RANGE_CHECK]
                                                                    [@GP_Id:18]
                                                                    [@vc:annotation]
                                                                    [@GP_Reason:VC_RANGE_CHECK]
                                                                    [@GP_Sloc:main.adb:124:105]
                                                                    (Standard__positive.range_check_
                                                                    (([#"main.adb" 124 0 0]
                                                                    [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                             ^ main.adb:124:93:VC_OVERFLOW_CHECK]
                                                                    [@GP_Id:17]
                                                                    [@vc:annotation]
                                                                    [@GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub__add]
                                                                    [@GP_Sloc:main.adb:124:93]
                                                                    (Standard__integer.range_check_
                                                                    ((Standard__positive__rep.to_rep
                                                                    ((Mystringtokeniser__tokenextent.__split_fields
                                                                    ((Array__Int__Mystringtokeniser__tokenextent.get
                                                                    (Main__B_6__t.t.
                                                                    Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                                    (([#"main.adb" 124 0 0]
                                                                    assert {
                                                                    [#"main.adb" 124 0 0]
                                                                    [#"main.adb" 124 0 0]
                                                                    [@GP_Sloc:main.adb:124:85]
                                                                    [@GP_Id:15]
                                                                    [@vc:annotation]
                                                                    [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                     ^ main.adb:124:85:VC_INDEX_CHECK]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                                    ((Main__B_6__TTtSP1.first
                                                                    <= (Main__B_6__L_7__i.i.int__content)) /\
                                                                    ((Main__B_6__L_7__i.i.int__content)
                                                                    <= Main__B_6__TTtSP1.last)) });
                                                                    (Main__B_6__L_7__i.i.int__content)))).
                                                                    Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))
                                                                    + (Standard__natural__rep.to_rep
                                                                    ((Mystringtokeniser__tokenextent.__split_fields
                                                                    ((Array__Int__Mystringtokeniser__tokenextent.get
                                                                    (Main__B_6__t.t.
                                                                    Array__Int__Mystringtokeniser__tokenextent.map__content))
                                                                    (assert {
                                                                    [#"main.adb" 124 0 0]
                                                                    [@GP_Id:16]
                                                                    [@comment:                  TokStr : String := Lines.To_String(Lines.Substring(P,T(I).Start,T(I).Start+T(I).Length-1));                                                                                                ^ main.adb:124:96:VC_INDEX_CHECK]
                                                                    [@vc:annotation]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__tokstr_decl__call_to_string__call_substring__sub__add__selectcomp__ixdcomp]
                                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                                    [@GP_Sloc:main.adb:124:96]
                                                                    ((Main__B_6__TTtSP1.first
                                                                    <= (Main__B_6__L_7__i.i.int__content)) /\
                                                                    ((Main__B_6__L_7__i.i.int__content)
                                                                    <= Main__B_6__TTtSP1.last)) };
                                                                    (Main__B_6__L_7__i.i.int__content)))).
                                                                    Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)))))
                                                                    - (1 :
                                                                    int)))))) in
                                                               (Main__B_6__B_8__tokstr.tokstr.
                                                                  Array__Int__Standard__character.map__content <-
                                                                  (Standard__string.to_array
                                                                    main__B_6__B_8__tokstr__assume));
                                                               assume {
                                                                 ((Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first)
                                                                    = 
                                                                    (Standard__string.first
                                                                    main__B_6__B_8__tokstr__assume)) };
                                                               assume {
                                                                 ((Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last)
                                                                    = 
                                                                    (Standard__string.last
                                                                    main__B_6__B_8__tokstr__assume)) });
                                                              assume {
                                                                ((((Standard__string___axiom.dynamic_invariant
                                                                    (((Standard__string.of_array
                                                                    (Main__B_6__B_8__tokstr.tokstr.
                                                                    Array__Int__Standard__character.map__content))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last)))
                                                                    True)
                                                                    False)
                                                                   True)
                                                                  True }));
                                                            ([@GP_Sloc:main.adb:126:19]
                                                             [#"main.adb" 126 0 0]
                                                             (if (([#"main.adb" 126 0 0]
                                                                   [#"main.adb" 126 0 0]
                                                                   (([@branch_id=1249]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Main__B_6__L_7__i.i.int__content)
                                                                    = (1 :
                                                                    int))));
                                                                  (([@branch_id=1249]
                                                                    Main.spark__branch).bool__content)) then
                                                                (([@GP_Sloc:main.adb:128:22]
                                                                  [#"main.adb" 128 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:128:51]
                                                                  [#"main.adb" 128 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:128:38]
                                                                  [#"main.adb" 128 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:128:30]
                                                                  [#"main.adb" 128 0 0]
                                                                  (let temp___491 =
                                                                    [#"main.adb" 128 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@GP_Sloc:main.adb:128:38]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__if__command_assign__call_from_string]
                                                                    [@vc:annotation]
                                                                    [@GP_Id:20]
                                                                    [@comment:                     COMMAND := Lines.From_String(TokStr);                                      ^ main.adb:128:38:VC_PRECONDITION]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (((Standard__string.of_array
                                                                    (Main__B_6__B_8__tokstr.tokstr.
                                                                    Array__Int__Standard__character.map__content))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))) in
                                                                   Main__command.command__split_fields.
                                                                    Main__lines__mystring.__split_fields__content <-
                                                                    (Main__lines__mystring.__split_fields
                                                                    temp___491))))
                                                              else ()));
                                                            ([@GP_Sloc:main.adb:130:19]
                                                             [#"main.adb" 130 0 0]
                                                             (if (([#"main.adb" 130 0 0]
                                                                   [#"main.adb" 130 0 0]
                                                                   (([@branch_id=1260]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Main__B_6__L_7__i.i.int__content)
                                                                    = (2 :
                                                                    int))));
                                                                  (([@branch_id=1260]
                                                                    Main.spark__branch).bool__content)) then
                                                                (([@GP_Sloc:main.adb:132:22]
                                                                  [#"main.adb" 132 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:132:60]
                                                                  [#"main.adb" 132 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:132:47]
                                                                  [#"main.adb" 132 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:132:29]
                                                                  [#"main.adb" 132 0 0]
                                                                  [#"main.adb" 132 0 0]
                                                                  (Main__number.number.int__content <-
                                                                    (Stringtointeger__from_string___axiom.from_string
                                                                    (((Standard__string.of_array
                                                                    (Main__B_6__B_8__tokstr.tokstr.
                                                                    Array__Int__Standard__character.map__content))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last)))));
                                                                 ([@GP_Sloc:main.adb:133:22]
                                                                  [#"main.adb" 133 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:133:55]
                                                                  [#"main.adb" 133 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:133:42]
                                                                  [#"main.adb" 133 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:133:26]
                                                                  [#"main.adb" 133 0 0]
                                                                  (let temp___494 =
                                                                    [#"main.adb" 133 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@comment:                     VAR := VariableStore.From_String(TokStr); -- will be used when COMMAND is load, store, remove                                          ^ main.adb:133:42:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@GP_Id:21]
                                                                    [@GP_Sloc:main.adb:133:42]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__if__var_assign__call_from_string]
                                                                    (Variablestore__from_string___axiom.from_string
                                                                    (((Standard__string.of_array
                                                                    (Main__B_6__B_8__tokstr.tokstr.
                                                                    Array__Int__Standard__character.map__content))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last))) in
                                                                   Main__var.var__split_fields.
                                                                    Variablestore__variable.__split_fields__content <-
                                                                    (Variablestore__variable.__split_fields
                                                                    temp___494)));
                                                                 ([@GP_Sloc:main.adb:134:22]
                                                                  [#"main.adb" 134 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:134:51]
                                                                  [#"main.adb" 134 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:134:38]
                                                                  [#"main.adb" 134 0 0]
                                                                  ());
                                                                 ([@GP_Sloc:main.adb:134:32]
                                                                  [#"main.adb" 134 0 0]
                                                                  [#"main.adb" 134 0 0]
                                                                  (Main__enter_pin.enter_pin.int__content <-
                                                                    ([#"main.adb" 134 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@GP_Shape:L_1_while__L_5_while__B_6_declblk__L_7_while__B_8_declblk__if__enter_pin_assign__call_from_string]
                                                                    [@vc:annotation]
                                                                    [@GP_Sloc:main.adb:134:38]
                                                                    [@GP_Id:22]
                                                                    [@comment:                     ENTER_PIN := PIN.From_String(TokStr); -- will only be used when the COMMAND is lock                                      ^ main.adb:134:38:VC_PRECONDITION]
                                                                    (Pin__from_string___axiom.from_string
                                                                    (((Standard__string.of_array
                                                                    (Main__B_6__B_8__tokstr.tokstr.
                                                                    Array__Int__Standard__character.map__content))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__first))
                                                                    (Standard__integer__rep.to_rep
                                                                    Main__B_6__B_8__tokstr.tokstr__last)))))))
                                                              else ()));
                                                            ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:122]
                                                             ());
                                                            (if ((Main__B_6__L_7__i.i.int__content)
                                                                   = temp___489) then
                                                               (raise 
                                                                Main__B_6__L_7.L_7)
                                                             else ());
                                                            ([#"main.adb" 122 0 0]
                                                             [#"main.adb" 122 0 0]
                                                             (Main__B_6__L_7__i.i.int__content <-
                                                                ((Main__B_6__L_7__i.i.int__content)
                                                                   + 
                                                                   (1 : int))))));
                                                          ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                                                           [@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                                                           ());
                                                          ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                                                           ())
                                                        done))
                                                    with
                                                      Main__B_6__L_7.L_7 ->
                                                      ()
                                                    end))
                                                else ())));
                                             ([@GP_Sloc:main.adb:142:64]
                                              [#"main.adb" 142 0 0] ());
                                             ([@GP_Sloc:main.adb:142:25]
                                              [#"main.adb" 142 0 0] ());
                                             ([@GP_Sloc:main.adb:142:38]
                                              [#"main.adb" 142 0 0] ());
                                             ([@GP_Sloc:main.adb:142:18]
                                              [#"main.adb" 142 0 0] ());
                                             ([@GP_Sloc:main.adb:142:10]
                                              [#"main.adb" 142 0 0]
                                              (if (([#"main.adb" 142 0 0]
                                                    [#"main.adb" 142 0 0]
                                                    (([@branch_id=1288]
                                                      Main.spark__branch).bool__content <-
                                                       ((Boolean.andb
                                                           ((Main__lines__equal___axiom.equal
                                                               { Main__lines__mystring.__split_fields =
                                                                   (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                              ([#"main.adb" 142 0 0]
                                                               [@GP_Reason:VC_PRECONDITION]
                                                               [@vc:annotation]
                                                               [@GP_Id:33]
                                                               [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                               [@comment:         if Lines.Equal(COMMAND,Lines.From_String("lock")) and Current_State = unlocked then                                      ^ main.adb:142:38:VC_PRECONDITION]
                                                               [@GP_Sloc:main.adb:142:38]
                                                               (Main__lines__from_string___axiom.from_string
                                                                  (let temp___537 =
                                                                    Temp___String_Literal_536.temp___String_Literal_536
                                                                    () in
                                                                   ((Standard__string.of_array
                                                                    temp___537)
                                                                    (1 : int))
                                                                    (4 : int))))))
                                                          ((Main__current_state.current_state.int__content)
                                                             = (1 : int)))));
                                                   (([@branch_id=1288]
                                                     Main.spark__branch).bool__content)) then
                                                 (([@GP_Sloc:main.adb:143:13]
                                                   [#"main.adb" 143 0 0] ());
                                                  ([@GP_Sloc:main.adb:143:27]
                                                   [#"main.adb" 143 0 0] ());
                                                  ([@GP_Sloc:main.adb:143:24]
                                                   [#"main.adb" 143 0 0]
                                                   [#"main.adb" 143 0 0]
                                                   (Main__master_pin.master_pin.int__content <-
                                                      (Main__enter_pin.enter_pin.int__content)));
                                                  ([@GP_Sloc:main.adb:144:13]
                                                   [#"main.adb" 144 0 0] ());
                                                  ([@GP_Sloc:main.adb:144:27]
                                                   [#"main.adb" 144 0 0]
                                                   [#"main.adb" 144 0 0]
                                                   (Main__current_state.current_state.int__content <-
                                                      (0 : int))))
                                               else
                                                 ([@GP_Sloc:main.adb:147:10]
                                                  (if (([#"main.adb" 147 0 0]
                                                        [#"main.adb" 147 0 0]
                                                        (([@branch_id=1310]
                                                          Main.spark__branch).bool__content <-
                                                           ((Boolean.andb
                                                               ((Main__lines__equal___axiom.equal
                                                                   { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                  ([#"main.adb" 147 0 0]
                                                                   [@GP_Reason:VC_PRECONDITION]
                                                                   [@vc:annotation]
                                                                   [@GP_Sloc:main.adb:147:41]
                                                                   [@GP_Id:32]
                                                                   [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                   [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("+")) and Current_State = unlocked then                                         ^ main.adb:147:41:VC_PRECONDITION]
                                                                   (Main__lines__from_string___axiom.from_string
                                                                    (let temp___535 =
                                                                    Temp___String_Literal_534.temp___String_Literal_534
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___535)
                                                                    (1 : int))
                                                                    (1 : int))))))
                                                              ((Main__current_state.current_state.int__content)
                                                                 = (1 : int)))));
                                                       (([@branch_id=1310]
                                                         Main.spark__branch).bool__content)) then
                                                     (([@GP_Sloc:main.adb:148:31]
                                                       [#"main.adb" 148 0 0]
                                                       ());
                                                      ([@GP_Sloc:main.adb:148:25]
                                                       [#"main.adb" 148 0 0]
                                                       ());
                                                      ([@GP_Sloc:main.adb:148:25]
                                                       [#"main.adb" 148 0 0]
                                                       (let temp___compl_533 =
                                                          { Operations__operandstack__stack.__split_fields =
                                                              (Operations__operandstack__stack.__split_fields__content
                                                                  Main__opstack.opstack__split_fields) } in
                                                        ([#"main.adb" 148 0 0]
                                                         (val _f : unit in
                                                          _f));
                                                        (Operations__plus___axiom.plus
                                                           Main__opstack.opstack__split_fields))))
                                                   else
                                                     ([@GP_Sloc:main.adb:149:10]
                                                      (if (([#"main.adb" 149 0 0]
                                                            [#"main.adb" 149 0 0]
                                                            (([@branch_id=1330]
                                                              Main.spark__branch).bool__content <-
                                                               ((Boolean.andb
                                                                   ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 149 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@GP_Sloc:main.adb:149:41]
                                                                    [@vc:annotation]
                                                                    [@GP_Id:31]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("-")) and Current_State = unlocked then                                         ^ main.adb:149:41:VC_PRECONDITION]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___532 =
                                                                    Temp___String_Literal_531.temp___String_Literal_531
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___532)
                                                                    (1 : int))
                                                                    (1 : int))))))
                                                                  ((Main__current_state.current_state.int__content)
                                                                    = 
                                                                    (1 : int)))));
                                                           (([@branch_id=1330]
                                                             Main.spark__branch).bool__content)) then
                                                         (([@GP_Sloc:main.adb:150:32]
                                                           [#"main.adb" 150 0 0]
                                                           ());
                                                          ([@GP_Sloc:main.adb:150:25]
                                                           [#"main.adb" 150 0 0]
                                                           ());
                                                          ([@GP_Sloc:main.adb:150:25]
                                                           [#"main.adb" 150 0 0]
                                                           (let temp___compl_530 =
                                                              { Operations__operandstack__stack.__split_fields =
                                                                  (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) } in
                                                            ([#"main.adb" 150 0 0]
                                                             (val _f : 
                                                                unit in
                                                              _f));
                                                            (Operations__minus___axiom.minus
                                                               Main__opstack.opstack__split_fields))))
                                                       else
                                                         ([@GP_Sloc:main.adb:151:10]
                                                          (if (([#"main.adb" 151 0 0]
                                                                [#"main.adb" 151 0 0]
                                                                (([@branch_id=1350]
                                                                  Main.spark__branch).bool__content <-
                                                                   ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 151 0 0]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("*")) and Current_State = unlocked then                                         ^ main.adb:151:41:VC_PRECONDITION]
                                                                    [@GP_Sloc:main.adb:151:41]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@GP_Id:30]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___529 =
                                                                    Temp___String_Literal_528.temp___String_Literal_528
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___529)
                                                                    (1 : int))
                                                                    (1 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                               (([@branch_id=1350]
                                                                 Main.spark__branch).bool__content)) then
                                                             (([@GP_Sloc:main.adb:152:35]
                                                               [#"main.adb" 152 0 0]
                                                               ());
                                                              ([@GP_Sloc:main.adb:152:25]
                                                               [#"main.adb" 152 0 0]
                                                               ());
                                                              ([@GP_Sloc:main.adb:152:25]
                                                               [#"main.adb" 152 0 0]
                                                               (let temp___compl_527 =
                                                                  { Operations__operandstack__stack.__split_fields =
                                                                    (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) } in
                                                                ([#"main.adb" 152 0 0]
                                                                 (val _f : 
                                                                    unit in
                                                                  _f));
                                                                (Operations__multiply___axiom.multiply
                                                                   Main__opstack.opstack__split_fields))))
                                                           else
                                                             ([@GP_Sloc:main.adb:153:10]
                                                              (if (([#"main.adb" 153 0 0]
                                                                    [#"main.adb" 153 0 0]
                                                                    (([@branch_id=1370]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 153 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@GP_Sloc:main.adb:153:41]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("/")) and Current_State = unlocked then                                         ^ main.adb:153:41:VC_PRECONDITION]
                                                                    [@GP_Id:29]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___526 =
                                                                    Temp___String_Literal_525.temp___String_Literal_525
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___526)
                                                                    (1 : int))
                                                                    (1 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                                   (([@branch_id=1370]
                                                                    Main.spark__branch).bool__content)) then
                                                                 (([@GP_Sloc:main.adb:154:33]
                                                                   [#"main.adb" 154 0 0]
                                                                   ());
                                                                  ([@GP_Sloc:main.adb:154:25]
                                                                   [#"main.adb" 154 0 0]
                                                                   ());
                                                                  ([@GP_Sloc:main.adb:154:25]
                                                                   [#"main.adb" 154 0 0]
                                                                   (let temp___compl_524 =
                                                                    { Operations__operandstack__stack.__split_fields =
                                                                    (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) } in
                                                                    ([#"main.adb" 154 0 0]
                                                                    (val _f : 
                                                                    unit in
                                                                    _f));
                                                                    (Operations__divide___axiom.divide
                                                                    Main__opstack.opstack__split_fields))))
                                                               else
                                                                 ([@GP_Sloc:main.adb:155:10]
                                                                  (if 
                                                                    (([#"main.adb" 155 0 0]
                                                                    [#"main.adb" 155 0 0]
                                                                    (([@branch_id=1390]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 155 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("push")) and Current_State = unlocked then                                         ^ main.adb:155:41:VC_PRECONDITION]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@GP_Sloc:main.adb:155:41]
                                                                    [@GP_Id:28]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___523 =
                                                                    Temp___String_Literal_522.temp___String_Literal_522
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___523)
                                                                    (1 : int))
                                                                    (4 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                                    (([@branch_id=1390]
                                                                    Main.spark__branch).bool__content)) then
                                                                    (([@GP_Sloc:main.adb:156:42]
                                                                    [#"main.adb" 156 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:156:51]
                                                                    [#"main.adb" 156 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:156:26]
                                                                    [#"main.adb" 156 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:156:26]
                                                                    [#"main.adb" 156 0 0]
                                                                    (let temp___compl_521 =
                                                                    { Operations__operandstack__stack.__split_fields =
                                                                    (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) } in
                                                                    ([#"main.adb" 156 0 0]
                                                                    (val _f : 
                                                                    unit in
                                                                    _f));
                                                                    ((Operations__push_operation___axiom.push_operation
                                                                    Main__opstack.opstack__split_fields)
                                                                    (Main__number.number.int__content)))))
                                                                   else
                                                                    ([@GP_Sloc:main.adb:157:10]
                                                                    (if 
                                                                    (([#"main.adb" 157 0 0]
                                                                    [#"main.adb" 157 0 0]
                                                                    (([@branch_id=1411]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 157 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@GP_Sloc:main.adb:157:41]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("pop")) and Current_State = unlocked then                                         ^ main.adb:157:41:VC_PRECONDITION]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@GP_Id:27]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___520 =
                                                                    Temp___String_Literal_519.temp___String_Literal_519
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___520)
                                                                    (1 : int))
                                                                    (3 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                                    (([@branch_id=1411]
                                                                    Main.spark__branch).bool__content)) then
                                                                    (([@GP_Sloc:main.adb:158:40]
                                                                    [#"main.adb" 158 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:158:49]
                                                                    [#"main.adb" 158 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:158:25]
                                                                    [#"main.adb" 158 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:158:25]
                                                                    [#"main.adb" 158 0 0]
                                                                    (let temp___compl_517 =
                                                                    { Operations__operandstack__stack.__split_fields =
                                                                    (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) } in
                                                                    let temp___compl_518 =
                                                                    Main__number.number.int__content in
                                                                    ([#"main.adb" 158 0 0]
                                                                    (val _f : 
                                                                    unit in
                                                                    _f));
                                                                    ((Operations__pop_operation___axiom.pop_operation
                                                                    Main__opstack.opstack__split_fields)
                                                                    Main__number.number))))
                                                                    else
                                                                    ([@GP_Sloc:main.adb:159:10]
                                                                    (if 
                                                                    (([#"main.adb" 159 0 0]
                                                                    [#"main.adb" 159 0 0]
                                                                    (([@branch_id=1432]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 159 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@GP_Sloc:main.adb:159:41]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("load")) and Current_State = unlocked then                                         ^ main.adb:159:41:VC_PRECONDITION]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@GP_Id:26]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___516 =
                                                                    Temp___String_Literal_515.temp___String_Literal_515
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___516)
                                                                    (1 : int))
                                                                    (4 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                                    (([@branch_id=1432]
                                                                    Main.spark__branch).bool__content)) then
                                                                    (([@GP_Sloc:main.adb:160:31]
                                                                    [#"main.adb" 160 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:160:36]
                                                                    [#"main.adb" 160 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:160:40]
                                                                    [#"main.adb" 160 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:160:25]
                                                                    [#"main.adb" 160 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:160:25]
                                                                    [#"main.adb" 160 0 0]
                                                                    (let temp___compl_514 =
                                                                    { Operations__operandstack__stack.__split_fields =
                                                                    (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) } in
                                                                    ([#"main.adb" 160 0 0]
                                                                    (val _f : 
                                                                    unit in
                                                                    _f));
                                                                    (((Operations__load___axiom.load
                                                                    { Variablestore__variable.__split_fields =
                                                                    (Variablestore__variable.__split_fields__content
                                                                    Main__var.var__split_fields) })
                                                                    (Main__db.db.
                                                                    Variablestore__database.database__content))
                                                                    Main__opstack.opstack__split_fields))))
                                                                    else
                                                                    ([@GP_Sloc:main.adb:161:10]
                                                                    (if 
                                                                    (([#"main.adb" 161 0 0]
                                                                    [#"main.adb" 161 0 0]
                                                                    (([@branch_id=1454]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 161 0 0]
                                                                    [@GP_Sloc:main.adb:161:41]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("store")) and Current_State = unlocked then                                         ^ main.adb:161:41:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@GP_Id:25]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___513 =
                                                                    Temp___String_Literal_512.temp___String_Literal_512
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___513)
                                                                    (1 : int))
                                                                    (5 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                                    (([@branch_id=1454]
                                                                    Main.spark__branch).bool__content)) then
                                                                    (([@GP_Sloc:main.adb:162:32]
                                                                    [#"main.adb" 162 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:162:37]
                                                                    [#"main.adb" 162 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:162:41]
                                                                    [#"main.adb" 162 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:162:25]
                                                                    [#"main.adb" 162 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:162:25]
                                                                    [#"main.adb" 162 0 0]
                                                                    (let temp___compl_509 =
                                                                    { Variablestore__variable.__split_fields =
                                                                    (Variablestore__variable.__split_fields__content
                                                                    Main__var.var__split_fields) } in
                                                                    let temp___compl_510 =
                                                                    Main__db.db.
                                                                    Variablestore__database.database__content in
                                                                    let temp___compl_511 =
                                                                    { Operations__operandstack__stack.__split_fields =
                                                                    (Operations__operandstack__stack.__split_fields__content
                                                                    Main__opstack.opstack__split_fields) } in
                                                                    ([#"main.adb" 162 0 0]
                                                                    (val _f : 
                                                                    unit in
                                                                    _f));
                                                                    (((Operations__store___axiom.store
                                                                    Main__var.var__split_fields)
                                                                    Main__db.db)
                                                                    Main__opstack.opstack__split_fields))))
                                                                    else
                                                                    ([@GP_Sloc:main.adb:163:10]
                                                                    (if 
                                                                    (([#"main.adb" 163 0 0]
                                                                    [#"main.adb" 163 0 0]
                                                                    (([@branch_id=1476]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 163 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("remove")) and Current_State = unlocked then                                         ^ main.adb:163:41:VC_PRECONDITION]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@GP_Id:24]
                                                                    [@GP_Sloc:main.adb:163:41]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___508 =
                                                                    Temp___String_Literal_507.temp___String_Literal_507
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___508)
                                                                    (1 : int))
                                                                    (6 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                                    (([@branch_id=1476]
                                                                    Main.spark__branch).bool__content)) then
                                                                    (([@GP_Sloc:main.adb:164:33]
                                                                    [#"main.adb" 164 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:164:38]
                                                                    [#"main.adb" 164 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:164:25]
                                                                    [#"main.adb" 164 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:164:25]
                                                                    [#"main.adb" 164 0 0]
                                                                    (let temp___compl_505 =
                                                                    { Variablestore__variable.__split_fields =
                                                                    (Variablestore__variable.__split_fields__content
                                                                    Main__var.var__split_fields) } in
                                                                    let temp___compl_506 =
                                                                    Main__db.db.
                                                                    Variablestore__database.database__content in
                                                                    ([#"main.adb" 164 0 0]
                                                                    (val _f : 
                                                                    unit in
                                                                    _f));
                                                                    ((Operations__remove___axiom.remove
                                                                    Main__var.var__split_fields)
                                                                    Main__db.db))))
                                                                    else
                                                                    ([@GP_Sloc:main.adb:165:10]
                                                                    (if 
                                                                    (([#"main.adb" 165 0 0]
                                                                    [#"main.adb" 165 0 0]
                                                                    (([@branch_id=1497]
                                                                    Main.spark__branch).bool__content <-
                                                                    ((Boolean.andb
                                                                    ((Main__lines__equal___axiom.equal
                                                                    { Main__lines__mystring.__split_fields =
                                                                    (Main__lines__mystring.__split_fields__content
                                                                    Main__command.command__split_fields) })
                                                                    ([#"main.adb" 165 0 0]
                                                                    [@GP_Reason:VC_PRECONDITION]
                                                                    [@vc:annotation]
                                                                    [@GP_Shape:L_1_while__L_5_while__if__and__call_equal__call_from_string]
                                                                    [@GP_Sloc:main.adb:165:41]
                                                                    [@GP_Id:23]
                                                                    [@comment:         elsif Lines.Equal(COMMAND,Lines.From_String("list")) and Current_State = unlocked then                                         ^ main.adb:165:41:VC_PRECONDITION]
                                                                    (Main__lines__from_string___axiom.from_string
                                                                    (let temp___504 =
                                                                    Temp___String_Literal_503.temp___String_Literal_503
                                                                    () in
                                                                    ((Standard__string.of_array
                                                                    temp___504)
                                                                    (1 : int))
                                                                    (4 : int))))))
                                                                    ((Main__current_state.current_state.int__content)
                                                                    = (1 :
                                                                    int)))));
                                                                    (([@branch_id=1497]
                                                                    Main.spark__branch).bool__content)) then
                                                                    (([@GP_Sloc:main.adb:166:31]
                                                                    [#"main.adb" 166 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:166:25]
                                                                    [#"main.adb" 166 0 0]
                                                                    ());
                                                                    ([@GP_Sloc:main.adb:166:25]
                                                                    [#"main.adb" 166 0 0]
                                                                    (([#"main.adb" 166 0 0]
                                                                    (val _f : 
                                                                    unit in
                                                                    _f));
                                                                    (Operations__list___axiom.list
                                                                    (Main__db.db.
                                                                    Variablestore__database.database__content)))))
                                                                    else
                                                                    (raise Temp___exception_502)))))))))))))))))))))));
                                             ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:105]
                                              ());
                                             (if (not ((Main__current_state.current_state.int__content)
                                                         = (1 : int))) then
                                                (raise Main__L_5.L_5)
                                              else ())));
                                           ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                                            [@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                                            ());
                                           ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                                            ())
                                         done))
                                     with
                                       Temp___exception_487 ->
                                       ([@GP_Sloc:main.adb:117:16]
                                        [#"main.adb" 117 0 0] ());
                                       ([@GP_Sloc:main.adb:117:16]
                                        [#"main.adb" 117 0 0]
                                        (([#"main.adb" 117 0 0]
                                          (val _f : unit in
                                           _f));
                                         (Ada___ada__text_io__put_line__2___axiom.put_line
                                            (let temp___486 =
                                               Temp___String_Literal_485.temp___String_Literal_485
                                                 () in
                                             ((Standard__string.of_array
                                                 temp___486)
                                                (1 : int))
                                               (48 : int)))));
                                       ([@GP_Sloc:main.adb:118:16]
                                        [#"main.adb" 118 0 0]
                                        [#"main.adb" 118 0 0]
                                        ((raise Return__exc) : unit))
                                       | Temp___exception_502 ->
                                       ([@GP_Sloc:main.adb:168:13]
                                        [#"main.adb" 168 0 0] ());
                                       ([@GP_Sloc:main.adb:168:13]
                                        [#"main.adb" 168 0 0]
                                        (([#"main.adb" 168 0 0]
                                          (val _f : unit in
                                           _f));
                                         (Ada___ada__text_io__put_line__2___axiom.put_line
                                            (let temp___501 =
                                               Temp___String_Literal_500.temp___String_Literal_500
                                                 () in
                                             ((Standard__string.of_array
                                                 temp___501)
                                                (1 : int))
                                               (60 : int)))));
                                       ([@GP_Sloc:main.adb:169:13]
                                        [#"main.adb" 169 0 0]
                                        [#"main.adb" 169 0 0]
                                        ((raise Return__exc) : unit))
                                     end)
                                  with Main__L_5.L_5 -> ()
                                  end))
                              else ())));
                           ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:56]
                            ());
                           (if (not (Boolean.of_int (1 : int))) then
                              (raise Main__L_1.L_1)
                            else ())));
                         ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                          [@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                          ());
                         ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                          ())
                       done))
                   with
                     Temp___exception_470 ->
                     ([@GP_Sloc:main.adb:98:10] [#"main.adb" 98 0 0] ());
                     ([@GP_Sloc:main.adb:98:10]
                      [#"main.adb" 98 0 0]
                      (([#"main.adb" 98 0 0] (val _f : unit in
                                              _f));
                       (Ada___ada__text_io__put_line__2___axiom.put_line
                          (let temp___469 =
                             Temp___String_Literal_468.temp___String_Literal_468
                               () in
                           ((Standard__string.of_array temp___469) (1 : int))
                             (58 : int)))));
                     ([@GP_Sloc:main.adb:99:10]
                      [#"main.adb" 99 0 0]
                      [#"main.adb" 99 0 0] ((raise Return__exc) : unit))
                     | Temp___exception_467 ->
                     ([@GP_Sloc:main.adb:94:13] [#"main.adb" 94 0 0] ());
                     ([@GP_Sloc:main.adb:94:13]
                      [#"main.adb" 94 0 0]
                      (([#"main.adb" 94 0 0] (val _f : unit in
                                              _f));
                       (Ada___ada__text_io__put_line__2___axiom.put_line
                          (let temp___466 =
                             Temp___String_Literal_465.temp___String_Literal_465
                               () in
                           ((Standard__string.of_array temp___466) (1 : int))
                             (23 : int)))));
                     ([@GP_Sloc:main.adb:95:13]
                      [#"main.adb" 95 0 0]
                      [#"main.adb" 95 0 0] ((raise Return__exc) : unit))
                     | Temp___exception_457 ->
                     ([@GP_Sloc:main.adb:68:13] [#"main.adb" 68 0 0] ());
                     ([@GP_Sloc:main.adb:68:13]
                      [#"main.adb" 68 0 0]
                      (([#"main.adb" 68 0 0] (val _f : unit in
                                              _f));
                       (Ada___ada__text_io__put_line__2___axiom.put_line
                          (let temp___456 =
                             Temp___String_Literal_455.temp___String_Literal_455
                               () in
                           ((Standard__string.of_array temp___456) (1 : int))
                             (36 : int)))));
                     ([@GP_Sloc:main.adb:69:13]
                      [#"main.adb" 69 0 0]
                      [#"main.adb" 69 0 0] ((raise Return__exc) : unit))
                   end)
                with Main__L_1.L_1 -> ()
                end))
            else ())));
         (raise Return__exc)
       with Return__exc -> ()
       end)))
end
