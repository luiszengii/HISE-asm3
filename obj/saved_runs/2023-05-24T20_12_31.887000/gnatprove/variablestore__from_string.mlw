module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Variablestore__variables__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t13s = <range 0 1024>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1024 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t13s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t13s__ref = { mutable t13s__content : t13s }
  
  function t13s__ref_t13s__content__projection (a: t13s__ref) : t13s =
    a.t13s__content
  
  meta "model_projection" function t13s__ref_t13s__content__projection
  
  meta "inline:no" function t13s__ref_t13s__content__projection
  
  val t13s__havoc (x: t13s__ref) : unit
    writes { x }
end

module Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Variablestore__variables__mystring__T13s.t13s) : int =
    Variablestore__variables__mystring__T13s.t13s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Variablestore__variables__mystring__T13s.t13s,
    predicate in_range = Variablestore__variables__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Variablestore__variables__mystringstr
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type component_type = Standard__character.character
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (1024 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Variablestore__variables__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__mystringstr as Variablestore__variables__mystringstr
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type __split_fields = {
                       rec__variablestore__variables__mystring__length :
                         Variablestore__variables__mystring__T13s.t13s;
                       rec__variablestore__variables__mystring__str :
                         Array__Int__Standard__character.map
                       }
  
  function __split_fields_rec__variablestore__variables__mystring__length__projection (a: __split_fields) : 
    Variablestore__variables__mystring__T13s.t13s =
    a.rec__variablestore__variables__mystring__length
  
  meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  function __split_fields_rec__variablestore__variables__mystring__str__projection (a: __split_fields) : 
    Array__Int__Standard__character.map =
    a.rec__variablestore__variables__mystring__str
  
  meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate variablestore__variables__mystring__length__pred (a: __rep) =
    true
  
  val variablestore__variables__mystring__length__pred (a: __rep) : bool
    ensures { result
                <->
                (variablestore__variables__mystring__length__pred (a : __rep)) }
  
  val rec__variablestore__variables__mystring__length_ (a: __rep) : Variablestore__variables__mystring__T13s.t13s
    requires { variablestore__variables__mystring__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__variablestore__variables__mystring__length)) }
  
  predicate variablestore__variables__mystring__str__pred (a: __rep) = true
  
  val variablestore__variables__mystring__str__pred (a: __rep) : bool
    ensures { result
                <->
                (variablestore__variables__mystring__str__pred (a : __rep)) }
  
  val rec__variablestore__variables__mystring__str_ (a: __rep) : Array__Int__Standard__character.map
    requires { variablestore__variables__mystring__str__pred a }
    ensures { (result
                 = ((__split_fields a).rec__variablestore__variables__mystring__str)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Variablestore__variables__mystring__T13s__rep.to_rep
            ((__split_fields a).rec__variablestore__variables__mystring__length))
           = (Variablestore__variables__mystring__T13s__rep.to_rep
                ((__split_fields b).rec__variablestore__variables__mystring__length))) /\
          ((Variablestore__variables__mystringstr.bool_eq
              ((__split_fields a).rec__variablestore__variables__mystring__str))
             ((__split_fields b).rec__variablestore__variables__mystring__str))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Variablestore__variable
  use export Variablestore__variables__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type variable = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function variablestore__variables__mystring__length__first__bit : 
    int
  
  val function variablestore__variables__mystring__length__last__bit : 
    int
  
  val function variablestore__variables__mystring__length__position : 
    int
  
  axiom variablestore__variables__mystring__length__first__bit_axiom:
    (variablestore__variables__mystring__length__first__bit >= (0 : int))
  
  axiom variablestore__variables__mystring__length__last__bit_axiom:
    (variablestore__variables__mystring__length__last__bit
       > variablestore__variables__mystring__length__first__bit)
  
  axiom variablestore__variables__mystring__length__position_axiom:
    (variablestore__variables__mystring__length__position >= (0 : int))
  
  val function variablestore__variables__mystring__str__first__bit : 
    int
  
  val function variablestore__variables__mystring__str__last__bit : int
  
  val function variablestore__variables__mystring__str__position : int
  
  axiom variablestore__variables__mystring__str__first__bit_axiom:
    (variablestore__variables__mystring__str__first__bit >= (0 : int))
  
  axiom variablestore__variables__mystring__str__last__bit_axiom:
    (variablestore__variables__mystring__str__last__bit
       > variablestore__variables__mystring__str__first__bit)
  
  axiom variablestore__variables__mystring__str__position_axiom:
    (variablestore__variables__mystring__str__position >= (0 : int))
  
  val function user_eq (a: variable) (b: variable) : bool
  
  val function dummy : variable
  
  type variable__ref = { mutable variable__content : variable }
  
  function variable__ref_variable__content__projection (a: variable__ref) : variable =
    a.variable__content
  
  meta "model_projection" function variable__ref_variable__content__projection
  
  meta "inline:no" function variable__ref_variable__content__projection
  
  val variable__havoc (x: variable__ref) : unit
    writes { x }
end

module Variablestore__from_string__s
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function s : Standard__string.string__
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Variablestore__from_string__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Variablestore__variable___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variable as Variablestore__variable
  
  predicate dynamic_invariant (temp___expr_278: Variablestore__variable.variable) (temp___is_init_274: bool) (temp___skip_constant_275: bool) (temp___do_toplevel_276: bool) (temp___do_typ_inv_277: bool) =
    true
  
  val dynamic_invariant (temp___expr_278: Variablestore__variable.variable) (temp___is_init_274: bool) (temp___skip_constant_275: bool) (temp___do_toplevel_276: bool) (temp___do_typ_inv_277: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_278 : Variablestore__variable.variable))
                      (temp___is_init_274 : bool))
                     (temp___skip_constant_275 : bool))
                    (temp___do_toplevel_276 : bool))
                   (temp___do_typ_inv_277 : bool)) }
  
  predicate default_initial_assumption (temp___expr_280: Variablestore__variable.variable) (temp___skip_top_level_281: bool) =
    true
  
  val default_initial_assumption (temp___expr_280: Variablestore__variable.variable) (temp___skip_top_level_281: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_280 : Variablestore__variable.variable))
                   (temp___skip_top_level_281 : bool)) }
end

module Variablestore__from_string__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Variablestore__variable as Variablestore__variable
  use Variablestore__from_string__s as Variablestore__from_string__s
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Variablestore__from_string__s___axiom as Variablestore__from_string__s___axiom
  use Variablestore__variable___axiom as Variablestore__variable___axiom
  
  val variablestore__from_string__result : Variablestore__variable.variable__ref
  
  let def (__void_param : unit)
    requires { [#"variablestore.ads" 30 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram variablestore.ads:30]
      ());
     ([#"variablestore.ads" 30 0 0]
      assume {
        [#"variablestore.ads" 30 0 0]
        (((((Standard__string___axiom.dynamic_invariant
               Variablestore__from_string__s.s)
              True)
             False)
            True)
           True) });
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram variablestore.ads:30]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram variablestore.ads:30]
      ());
     ([#"variablestore.ads" 30 0 0]
      (begin
         ensures { true }
         let _ =
           let _ =
             (([#"variablestore.ads" 31 0 0]
               [@GP_Id:48]
               [@vc:annotation]
               [@GP_Shape:pragargs__cmp__typeconv__length_ref]
               [@GP_Reason:VC_RANGE_CHECK]
               [@comment:     Pre => S'Length <= Max_Variable_Length;              ^ variablestore.ads:31:14:VC_RANGE_CHECK]
               [@GP_Sloc:variablestore.ads:31:14]
               (Standard__integer.range_check_
                  (([#"variablestore.ads" 31 0 0] ());
                   (Standard__string.length Variablestore__from_string__s.s))))
                <= (1024 : int)) in
           () in
         ()
       end));
     ([@GNAT-comment:Assume Pre of the subprogram variablestore.ads:30] ());
     assume {
       [@GP_Pretty_Ada:46492]
       ((Standard__string.length Variablestore__from_string__s.s)
          <= (1024 : int)) })
end
