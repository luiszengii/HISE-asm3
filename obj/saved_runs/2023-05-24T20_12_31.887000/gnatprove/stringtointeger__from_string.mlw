module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Stringtointeger__from_string__s
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function s : Standard__string.string__
end

module Stringtointeger__from_string__result
  use _gnatprove_standard.Main
  use int.Int
  
  val result__ : int__ref
end

module Stringtointeger__from_string__c
  use _gnatprove_standard.Main
  use int.Int
  
  val c : int__ref
end

module Stringtointeger__from_string__negate
  use _gnatprove_standard.Main
  use int.Int
  
  val negate : bool__ref
end

module Stringtointeger__from_string__pos
  use _gnatprove_standard.Main
  use int.Int
  
  val pos : int__ref
end

module Stringtointeger__from_string__L_1
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_1
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Stringtointeger__from_string__result___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Stringtointeger__from_string__c___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Stringtointeger__from_string__negate___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Stringtointeger__from_string__pos___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Stringtointeger__from_string__L_1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Stringtointeger__from_string__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Stringtointeger__from_string__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Stringtointeger__from_string__s as Stringtointeger__from_string__s
  use Stringtointeger__from_string__result as Stringtointeger__from_string__result
  use Stringtointeger__from_string__c as Stringtointeger__from_string__c
  use Stringtointeger__from_string__negate as Stringtointeger__from_string__negate
  use Stringtointeger__from_string__pos as Stringtointeger__from_string__pos
  use Stringtointeger__from_string__L_1 as Stringtointeger__from_string__L_1
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Stringtointeger__from_string__result___axiom as Stringtointeger__from_string__result___axiom
  use Stringtointeger__from_string__c___axiom as Stringtointeger__from_string__c___axiom
  use Stringtointeger__from_string__negate___axiom as Stringtointeger__from_string__negate___axiom
  use Stringtointeger__from_string__pos___axiom as Stringtointeger__from_string__pos___axiom
  use Stringtointeger__from_string__L_1___axiom as Stringtointeger__from_string__L_1___axiom
  use Stringtointeger__from_string__s___axiom as Stringtointeger__from_string__s___axiom
  
  val stringtointeger__from_string__result : int__ref
  
  exception Temp___exception_181
  
  let def (__void_param : unit)
    requires { [#"stringtointeger.ads" 6 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram stringtointeger.ads:6]
      ());
     ([#"stringtointeger.ads" 6 0 0]
      assume {
        [#"stringtointeger.ads" 6 0 0]
        (((((Standard__string___axiom.dynamic_invariant
               Stringtointeger__from_string__s.s)
              True)
             False)
            True)
           True) });
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram stringtointeger.ads:6]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram stringtointeger.ads:6]
      ());
     ([#"stringtointeger.ads" 6 0 0] ());
     ([@GNAT-comment:Assume Pre of the subprogram stringtointeger.ads:6] ());
     ([#"stringtointeger.ads" 6 0 0]
      (try
         ([#"stringtointeger.adb" 3 0 0] ());
         ([#"stringtointeger.adb" 4 0 0]
          (([#"stringtointeger.adb" 4 0 0]
            (Stringtointeger__from_string__result.result__.int__content <-
               (0 : int)));
           ([#"stringtointeger.adb" 4 0 0]
            assume {
              [#"stringtointeger.adb" 4 0 0]
              (((((Standard__integer___axiom.dynamic_invariant
                     (Stringtointeger__from_string__result.result__.int__content))
                    True)
                   False)
                  True)
                 True) })));
         ([#"stringtointeger.adb" 5 0 0]
          (([#"stringtointeger.adb" 5 0 0]
            assume {
              [#"stringtointeger.adb" 5 0 0]
              ((Standard__integer___axiom.default_initial_assumption
                  (Stringtointeger__from_string__c.c.int__content))
                 False) });
           ([#"stringtointeger.adb" 5 0 0]
            assume {
              [#"stringtointeger.adb" 5 0 0]
              (((((Standard__integer___axiom.dynamic_invariant
                     (Stringtointeger__from_string__c.c.int__content))
                    False)
                   False)
                  True)
                 True) })));
         ([#"stringtointeger.adb" 6 0 0]
          [#"stringtointeger.adb" 6 0 0]
          (Stringtointeger__from_string__negate.negate.bool__content <-
             (Boolean.of_int (0 : int))));
         ([#"stringtointeger.adb" 7 0 0]
          (([#"stringtointeger.adb" 7 0 0]
            assume {
              [#"stringtointeger.adb" 7 0 0]
              ((Standard__integer___axiom.default_initial_assumption
                  (Stringtointeger__from_string__pos.pos.int__content))
                 False) });
           ([#"stringtointeger.adb" 7 0 0]
            assume {
              [#"stringtointeger.adb" 7 0 0]
              (((((Standard__integer___axiom.dynamic_invariant
                     (Stringtointeger__from_string__pos.pos.int__content))
                    False)
                   False)
                  True)
                 True) })));
         ([#"stringtointeger.adb" 22 0 0] ());
         ([@GP_Sloc:stringtointeger.adb:9:7]
          [#"stringtointeger.adb" 9 0 0]
          (if (([#"stringtointeger.adb" 9 0 0]
                [#"stringtointeger.adb" 9 0 0]
                (([@branch_id=843] Main.spark__branch).bool__content <-
                   ((([#"stringtointeger.adb" 9 0 0] ());
                     (Standard__string.length
                        Stringtointeger__from_string__s.s))
                      <= (0 : int))));
               (([@branch_id=843] Main.spark__branch).bool__content)) then
             ([@GP_Sloc:stringtointeger.adb:10:10]
              [#"stringtointeger.adb" 10 0 0]
              (([#"stringtointeger.adb" 10 0 0]
                (stringtointeger__from_string__result.int__content <-
                   (0 : int)));
               ([#"stringtointeger.adb" 10 0 0] ((raise Return__exc) : unit))))
           else ()));
         ([@GP_Sloc:stringtointeger.adb:12:7]
          [#"stringtointeger.adb" 12 0 0] ());
         ([@GP_Sloc:stringtointeger.adb:12:11]
          [#"stringtointeger.adb" 12 0 0]
          [#"stringtointeger.adb" 12 0 0]
          (Stringtointeger__from_string__pos.pos.int__content <-
             (([#"stringtointeger.adb" 12 0 0] ());
              (Standard__string.first Stringtointeger__from_string__s.s))));
         ([@GP_Sloc:stringtointeger.adb:13:12]
          [#"stringtointeger.adb" 13 0 0] ());
         ([@GP_Sloc:stringtointeger.adb:13:7]
          [#"stringtointeger.adb" 13 0 0]
          (if (([#"stringtointeger.adb" 13 0 0]
                [#"stringtointeger.adb" 13 0 0]
                (([@branch_id=856] Main.spark__branch).bool__content <-
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (Standard__string.to_array
                              Stringtointeger__from_string__s.s))
                          (([#"stringtointeger.adb" 13 0 0]
                            assert {
                              [#"stringtointeger.adb" 13 0 0]
                              [#"stringtointeger.adb" 13 0 0]
                              [@GP_Sloc:stringtointeger.adb:13:12]
                              [@vc:annotation]
                              [@GP_Shape:if__cmp__ixdcomp]
                              [@GP_Reason:VC_INDEX_CHECK]
                              [@GP_Id:1]
                              [@comment:      if S(Pos) = '-' then            ^ stringtointeger.adb:13:12:VC_INDEX_CHECK]
                              (((Standard__string.first
                                   Stringtointeger__from_string__s.s)
                                  <= (Stringtointeger__from_string__pos.pos.int__content)) /\
                                 ((Stringtointeger__from_string__pos.pos.int__content)
                                    <= (Standard__string.last
                                          Stringtointeger__from_string__s.s))) });
                           (Stringtointeger__from_string__pos.pos.int__content))))
                      = (45 : int))));
               (([@branch_id=856] Main.spark__branch).bool__content)) then
             (([@GP_Sloc:stringtointeger.adb:14:10]
               [#"stringtointeger.adb" 14 0 0] ());
              ([@GP_Sloc:stringtointeger.adb:14:17]
               [#"stringtointeger.adb" 14 0 0]
               [#"stringtointeger.adb" 14 0 0]
               (Stringtointeger__from_string__negate.negate.bool__content <-
                  (Boolean.of_int (1 : int))));
              ([@GP_Sloc:stringtointeger.adb:15:10]
               [#"stringtointeger.adb" 15 0 0]
               (if (([#"stringtointeger.adb" 15 0 0]
                     [#"stringtointeger.adb" 15 0 0]
                     (([@branch_id=865] Main.spark__branch).bool__content <-
                        ((([#"stringtointeger.adb" 15 0 0] ());
                          (Standard__string.length
                             Stringtointeger__from_string__s.s))
                           <= (1 : int))));
                    (([@branch_id=865] Main.spark__branch).bool__content)) then
                  ([@GP_Sloc:stringtointeger.adb:16:13]
                   [#"stringtointeger.adb" 16 0 0]
                   (([#"stringtointeger.adb" 16 0 0]
                     (stringtointeger__from_string__result.int__content <-
                        (0 : int)));
                    ([#"stringtointeger.adb" 16 0 0]
                     ((raise Return__exc) : unit))))
                else ()));
              ([@GP_Sloc:stringtointeger.adb:18:10]
               [#"stringtointeger.adb" 18 0 0] ());
              ([@GP_Sloc:stringtointeger.adb:18:14]
               [#"stringtointeger.adb" 18 0 0]
               [#"stringtointeger.adb" 18 0 0]
               (Stringtointeger__from_string__pos.pos.int__content <-
                  ([#"stringtointeger.adb" 18 0 0]
                   [@GP_Shape:if__pos_assign__add]
                   [@vc:annotation]
                   [@GP_Reason:VC_OVERFLOW_CHECK]
                   [@GP_Id:0]
                   [@GP_Sloc:stringtointeger.adb:18:25]
                   [@comment:         Pos := S'First + 1;                         ^ stringtointeger.adb:18:25:VC_OVERFLOW_CHECK]
                   (Standard__integer.range_check_
                      ((([#"stringtointeger.adb" 18 0 0] ());
                        (Standard__string.first
                           Stringtointeger__from_string__s.s))
                         + (1 : int)))))))
           else ()));
         ([@GP_Sloc:stringtointeger.adb:22:27]
          [#"stringtointeger.adb" 22 0 0]
          (([@GNAT-comment:Translation of an Ada loop from stringtointeger.adb:22]
            ());
           (if ((Stringtointeger__from_string__pos.pos.int__content)
                  <= (([#"stringtointeger.adb" 22 0 0] ());
                      (Standard__string.last
                         Stringtointeger__from_string__s.s))) then
              ([#"stringtointeger.adb" 22 0 0]
               (try
                  [#"stringtointeger.adb" 22 0 0]
                  (try
                     ([@GNAT-comment:While loop translating the Ada loop from stringtointeger.adb:22]
                      ());
                     ([#"'@Loop 888@'stringtointeger.adb" 23 0 0]
                      [#"'@Loop 888@'stringtointeger.adb" 23 0 0]
                      ((([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                         ());
                        (let temp___inv_182 =
                           (Boolean.andb
                              ((Boolean.andb
                                  ((Stringtointeger__from_string__pos.pos.int__content)
                                     >= (Standard__string.first
                                           Stringtointeger__from_string__s.s)))
                                 ((Stringtointeger__from_string__pos.pos.int__content)
                                    <= (Standard__string.last
                                          Stringtointeger__from_string__s.s))))
                             (if (Stringtointeger__from_string__negate.negate.bool__content) then
                                ((Stringtointeger__from_string__result.result__.int__content)
                                   <= (0 : int))
                              else
                                ((Stringtointeger__from_string__result.result__.int__content)
                                   >= (0 : int))) in
                         ()));
                       while True do
                         invariant LoopInvariant {
                           [#"stringtointeger.adb" 23 0 0]
                           [@GP_Id:11]
                           [@GP_Reason:VC_LOOP_INVARIANT]
                           [@GP_Shape:L_1_while__pragargs__and]
                           [@vc:annotation]
                           [@GP_Sloc:stringtointeger.adb:23:33]
                           [@comment:         pragma Loop_Invariant (Pos >= S'First and Pos <= S'Last and                                  ^ stringtointeger.adb:23:33:VC_LOOP_INVARIANT]
                           ((([@GP_Sloc:stringtointeger.adb:23:33]
                              [@GP_Pretty_Ada:893]
                              ((Stringtointeger__from_string__pos.pos.int__content)
                                 >= (Standard__string.first
                                       Stringtointeger__from_string__s.s))) /\
                               ([@GP_Pretty_Ada:899]
                                [@GP_Sloc:stringtointeger.adb:23:52]
                                ((Stringtointeger__from_string__pos.pos.int__content)
                                   <= (Standard__string.last
                                         Stringtointeger__from_string__s.s)))) /\
                              (if ((Stringtointeger__from_string__negate.negate.bool__content)
                                     = True) then
                                 ([@GP_Pretty_Ada:906]
                                  [@GP_Sloc:stringtointeger.adb:24:49]
                                  ((Stringtointeger__from_string__result.result__.int__content)
                                     <= (0 : int)))
                               else
                                 ([@GP_Sloc:stringtointeger.adb:24:66]
                                  [@GP_Pretty_Ada:909]
                                  ((Stringtointeger__from_string__result.result__.int__content)
                                     >= (0 : int))))) }
                         ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                          (([@GNAT-comment:Assume implicit invariants from the loop stringtointeger.adb:22]
                            ());
                           assume {
                             (Boolean.andb
                                ((((((true /\
                                        (((((Standard__integer___axiom.dynamic_invariant
                                               (Stringtointeger__from_string__result.result__.int__content))
                                              True)
                                             True)
                                            True)
                                           True)) /\
                                       (true /\ true)) /\
                                      (((((Standard__integer___axiom.dynamic_invariant
                                             (Stringtointeger__from_string__c.c.int__content))
                                            False)
                                           True)
                                          True)
                                         True)) /\
                                     (true /\ true)) /\
                                    (((((Standard__integer___axiom.dynamic_invariant
                                           (Stringtointeger__from_string__pos.pos.int__content))
                                          False)
                                         True)
                                        True)
                                       True)) /\
                                   (true /\ true)))
                               ((Stringtointeger__from_string__pos.pos.int__content)
                                  <= (Standard__string.last
                                        Stringtointeger__from_string__s.s)) };
                           ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                            ());
                           ([@GP_Sloc:stringtointeger.adb:26:33]
                            [#"stringtointeger.adb" 26 0 0] ());
                           ([@GP_Sloc:stringtointeger.adb:26:10]
                            [#"stringtointeger.adb" 26 0 0]
                            (if (([#"stringtointeger.adb" 26 0 0]
                                  [#"stringtointeger.adb" 26 0 0]
                                  (([@branch_id=911] Main.spark__branch).bool__content <-
                                     ((214748364 : int)
                                        < (Stringtointeger__from_string__result.result__.int__content))));
                                 (([@branch_id=911] Main.spark__branch).bool__content)) then
                               ([@GP_Sloc:stringtointeger.adb:27:13]
                                [#"stringtointeger.adb" 27 0 0]
                                (([#"stringtointeger.adb" 27 0 0]
                                  (stringtointeger__from_string__result.int__content <-
                                     (0 : int)));
                                 ([#"stringtointeger.adb" 27 0 0]
                                  ((raise Return__exc) : unit))))
                             else ()));
                           ([@GP_Sloc:stringtointeger.adb:29:34]
                            [#"stringtointeger.adb" 29 0 0] ());
                           ([@GP_Sloc:stringtointeger.adb:29:10]
                            [#"stringtointeger.adb" 29 0 0]
                            (if (([#"stringtointeger.adb" 29 0 0]
                                  [#"stringtointeger.adb" 29 0 0]
                                  (([@branch_id=921] Main.spark__branch).bool__content <-
                                     (((- 214748364) : int)
                                        > (Stringtointeger__from_string__result.result__.int__content))));
                                 (([@branch_id=921] Main.spark__branch).bool__content)) then
                               ([@GP_Sloc:stringtointeger.adb:30:13]
                                [#"stringtointeger.adb" 30 0 0]
                                (([#"stringtointeger.adb" 30 0 0]
                                  (stringtointeger__from_string__result.int__content <-
                                     (0 : int)));
                                 ([#"stringtointeger.adb" 30 0 0]
                                  ((raise Return__exc) : unit))))
                             else ()));
                           ([@GP_Sloc:stringtointeger.adb:32:10]
                            [#"stringtointeger.adb" 32 0 0] ());
                           ([@GP_Sloc:stringtointeger.adb:32:20]
                            [#"stringtointeger.adb" 32 0 0] ());
                           ([@GP_Sloc:stringtointeger.adb:32:17]
                            [#"stringtointeger.adb" 32 0 0]
                            [#"stringtointeger.adb" 32 0 0]
                            (Stringtointeger__from_string__result.result__.int__content <-
                               ([#"stringtointeger.adb" 32 0 0]
                                [@comment:         Result := Result * 10;                           ^ stringtointeger.adb:32:27:VC_OVERFLOW_CHECK]
                                [@vc:annotation]
                                [@GP_Shape:L_1_while__result_assign__mult]
                                [@GP_Reason:VC_OVERFLOW_CHECK]
                                [@GP_Sloc:stringtointeger.adb:32:27]
                                [@GP_Id:2]
                                (Standard__integer.range_check_
                                   ((Stringtointeger__from_string__result.result__.int__content)
                                      * (10 : int))))));
                           ([@GP_Sloc:stringtointeger.adb:33:15]
                            [#"stringtointeger.adb" 33 0 0] ());
                           ([@GP_Sloc:stringtointeger.adb:33:33]
                            [#"stringtointeger.adb" 33 0 0] ());
                           ([@GP_Sloc:stringtointeger.adb:33:10]
                            [#"stringtointeger.adb" 33 0 0]
                            (if (([#"stringtointeger.adb" 33 0 0]
                                  [#"stringtointeger.adb" 33 0 0]
                                  (([@branch_id=936] Main.spark__branch).bool__content <-
                                     ((Boolean.andb
                                         ((Standard__character__rep.to_rep
                                             ((Array__Int__Standard__character.get
                                                 (Standard__string.to_array
                                                    Stringtointeger__from_string__s.s))
                                                (([#"stringtointeger.adb" 33 0 0]
                                                  assert {
                                                    [#"stringtointeger.adb" 33 0 0]
                                                    [#"stringtointeger.adb" 33 0 0]
                                                    [@GP_Shape:L_1_while__if__and__cmp__ixdcomp]
                                                    [@comment:         if S(Pos) >= '0' and S(Pos) <= '9' then               ^ stringtointeger.adb:33:15:VC_INDEX_CHECK]
                                                    [@GP_Sloc:stringtointeger.adb:33:15]
                                                    [@vc:annotation]
                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                    [@GP_Id:8]
                                                    (((Standard__string.first
                                                         Stringtointeger__from_string__s.s)
                                                        <= (Stringtointeger__from_string__pos.pos.int__content)) /\
                                                       ((Stringtointeger__from_string__pos.pos.int__content)
                                                          <= (Standard__string.last
                                                                Stringtointeger__from_string__s.s))) });
                                                 (Stringtointeger__from_string__pos.pos.int__content))))
                                            >= (48 : int)))
                                        ((Standard__character__rep.to_rep
                                            ((Array__Int__Standard__character.get
                                                (Standard__string.to_array
                                                   Stringtointeger__from_string__s.s))
                                               (assert {
                                                  [#"stringtointeger.adb" 33 0 0]
                                                  [@GP_Shape:L_1_while__if__and__cmp__ixdcomp]
                                                  [@vc:annotation]
                                                  [@GP_Sloc:stringtointeger.adb:33:33]
                                                  [@comment:         if S(Pos) >= '0' and S(Pos) <= '9' then                                 ^ stringtointeger.adb:33:33:VC_INDEX_CHECK]
                                                  [@GP_Reason:VC_INDEX_CHECK]
                                                  [@GP_Id:9]
                                                  (((Standard__string.first
                                                       Stringtointeger__from_string__s.s)
                                                      <= (Stringtointeger__from_string__pos.pos.int__content)) /\
                                                     ((Stringtointeger__from_string__pos.pos.int__content)
                                                        <= (Standard__string.last
                                                              Stringtointeger__from_string__s.s))) };
                                                (Stringtointeger__from_string__pos.pos.int__content))))
                                           <= (57 : int)))));
                                 (([@branch_id=936] Main.spark__branch).bool__content)) then
                               (([@GP_Sloc:stringtointeger.adb:34:13]
                                 [#"stringtointeger.adb" 34 0 0] ());
                                ([@GP_Sloc:stringtointeger.adb:34:34]
                                 [#"stringtointeger.adb" 34 0 0] ());
                                ([@GP_Sloc:stringtointeger.adb:34:15]
                                 [#"stringtointeger.adb" 34 0 0]
                                 [#"stringtointeger.adb" 34 0 0]
                                 (Stringtointeger__from_string__c.c.int__content <-
                                    ((Standard__character__rep.to_rep
                                        ((Array__Int__Standard__character.get
                                            (Standard__string.to_array
                                               Stringtointeger__from_string__s.s))
                                           (([#"stringtointeger.adb" 34 0 0]
                                             assert {
                                               [#"stringtointeger.adb" 34 0 0]
                                               [#"stringtointeger.adb" 34 0 0]
                                               [@comment:            C := Character'Pos(S(Pos)) - Character'Pos('0');                                  ^ stringtointeger.adb:34:34:VC_INDEX_CHECK]
                                               [@vc:annotation]
                                               [@GP_Reason:VC_INDEX_CHECK]
                                               [@GP_Id:3]
                                               [@GP_Sloc:stringtointeger.adb:34:34]
                                               [@GP_Shape:L_1_while__if__c_assign__sub__typeconv__pos_ref__ixdcomp]
                                               (((Standard__string.first
                                                    Stringtointeger__from_string__s.s)
                                                   <= (Stringtointeger__from_string__pos.pos.int__content)) /\
                                                  ((Stringtointeger__from_string__pos.pos.int__content)
                                                     <= (Standard__string.last
                                                           Stringtointeger__from_string__s.s))) });
                                            (Stringtointeger__from_string__pos.pos.int__content))))
                                       - (48 : int))));
                                ([@GP_Sloc:stringtointeger.adb:35:16]
                                 [#"stringtointeger.adb" 35 0 0] ());
                                ([@GP_Sloc:stringtointeger.adb:35:13]
                                 [#"stringtointeger.adb" 35 0 0]
                                 (if (([#"stringtointeger.adb" 35 0 0]
                                       [#"stringtointeger.adb" 35 0 0]
                                       (([@branch_id=961] Main.spark__branch).bool__content <-
                                          (Stringtointeger__from_string__negate.negate.bool__content)));
                                      (([@branch_id=961] Main.spark__branch).bool__content)) then
                                    (([@GP_Sloc:stringtointeger.adb:36:35]
                                      [#"stringtointeger.adb" 36 0 0] ());
                                     ([@GP_Sloc:stringtointeger.adb:36:39]
                                      [#"stringtointeger.adb" 36 0 0] ());
                                     ([@GP_Sloc:stringtointeger.adb:36:16]
                                      [#"stringtointeger.adb" 36 0 0]
                                      (if (([#"stringtointeger.adb" 36 0 0]
                                            [#"stringtointeger.adb" 36 0 0]
                                            (([@branch_id=963]
                                              Main.spark__branch).bool__content <-
                                               (([#"stringtointeger.adb" 36 0 0]
                                                 [@comment:               if Integer'First + C > Result then                                 ^ stringtointeger.adb:36:33:VC_OVERFLOW_CHECK]
                                                 [@vc:annotation]
                                                 [@GP_Reason:VC_OVERFLOW_CHECK]
                                                 [@GP_Shape:L_1_while__if__if__if__cmp__add]
                                                 [@GP_Sloc:stringtointeger.adb:36:33]
                                                 [@GP_Id:5]
                                                 (Standard__integer.range_check_
                                                    (((- 2147483648) : int)
                                                       + (Stringtointeger__from_string__c.c.int__content))))
                                                  > (Stringtointeger__from_string__result.result__.int__content))));
                                           (([@branch_id=963]
                                             Main.spark__branch).bool__content)) then
                                         ([@GP_Sloc:stringtointeger.adb:37:19]
                                          [#"stringtointeger.adb" 37 0 0]
                                          (([#"stringtointeger.adb" 37 0 0]
                                            (stringtointeger__from_string__result.int__content <-
                                               (0 : int)));
                                           ([#"stringtointeger.adb" 37 0 0]
                                            ((raise Return__exc) : unit))))
                                       else
                                         (([@GP_Sloc:stringtointeger.adb:39:19]
                                           [#"stringtointeger.adb" 39 0 0] ());
                                          ([@GP_Sloc:stringtointeger.adb:39:29]
                                           [#"stringtointeger.adb" 39 0 0] ());
                                          ([@GP_Sloc:stringtointeger.adb:39:38]
                                           [#"stringtointeger.adb" 39 0 0] ());
                                          ([@GP_Sloc:stringtointeger.adb:39:26]
                                           [#"stringtointeger.adb" 39 0 0]
                                           [#"stringtointeger.adb" 39 0 0]
                                           (Stringtointeger__from_string__result.result__.int__content <-
                                              ([#"stringtointeger.adb" 39 0 0]
                                               [@GP_Shape:L_1_while__if__if__if__result_assign__sub]
                                               [@vc:annotation]
                                               [@comment:                  Result := Result - C;                                    ^ stringtointeger.adb:39:36:VC_OVERFLOW_CHECK]
                                               [@GP_Reason:VC_OVERFLOW_CHECK]
                                               [@GP_Id:4]
                                               [@GP_Sloc:stringtointeger.adb:39:36]
                                               (Standard__integer.range_check_
                                                  ((Stringtointeger__from_string__result.result__.int__content)
                                                     - (Stringtointeger__from_string__c.c.int__content))))))))))
                                  else
                                    (([@GP_Sloc:stringtointeger.adb:42:34]
                                      [#"stringtointeger.adb" 42 0 0] ());
                                     ([@GP_Sloc:stringtointeger.adb:42:38]
                                      [#"stringtointeger.adb" 42 0 0] ());
                                     ([@GP_Sloc:stringtointeger.adb:42:16]
                                      [#"stringtointeger.adb" 42 0 0]
                                      (if (([#"stringtointeger.adb" 42 0 0]
                                            [#"stringtointeger.adb" 42 0 0]
                                            (([@branch_id=978]
                                              Main.spark__branch).bool__content <-
                                               (([#"stringtointeger.adb" 42 0 0]
                                                 [@GP_Sloc:stringtointeger.adb:42:32]
                                                 [@comment:               if Integer'Last - C < Result then                                ^ stringtointeger.adb:42:32:VC_OVERFLOW_CHECK]
                                                 [@vc:annotation]
                                                 [@GP_Reason:VC_OVERFLOW_CHECK]
                                                 [@GP_Shape:L_1_while__if__if__if__cmp__sub]
                                                 [@GP_Id:7]
                                                 (Standard__integer.range_check_
                                                    ((2147483647 : int)
                                                       - (Stringtointeger__from_string__c.c.int__content))))
                                                  < (Stringtointeger__from_string__result.result__.int__content))));
                                           (([@branch_id=978]
                                             Main.spark__branch).bool__content)) then
                                         ([@GP_Sloc:stringtointeger.adb:43:19]
                                          [#"stringtointeger.adb" 43 0 0]
                                          (([#"stringtointeger.adb" 43 0 0]
                                            (stringtointeger__from_string__result.int__content <-
                                               (0 : int)));
                                           ([#"stringtointeger.adb" 43 0 0]
                                            ((raise Return__exc) : unit))))
                                       else
                                         (([@GP_Sloc:stringtointeger.adb:45:19]
                                           [#"stringtointeger.adb" 45 0 0] ());
                                          ([@GP_Sloc:stringtointeger.adb:45:29]
                                           [#"stringtointeger.adb" 45 0 0] ());
                                          ([@GP_Sloc:stringtointeger.adb:45:38]
                                           [#"stringtointeger.adb" 45 0 0] ());
                                          ([@GP_Sloc:stringtointeger.adb:45:26]
                                           [#"stringtointeger.adb" 45 0 0]
                                           [#"stringtointeger.adb" 45 0 0]
                                           (Stringtointeger__from_string__result.result__.int__content <-
                                              ([#"stringtointeger.adb" 45 0 0]
                                               [@vc:annotation]
                                               [@comment:                  Result := Result + C;                                    ^ stringtointeger.adb:45:36:VC_OVERFLOW_CHECK]
                                               [@GP_Reason:VC_OVERFLOW_CHECK]
                                               [@GP_Sloc:stringtointeger.adb:45:36]
                                               [@GP_Shape:L_1_while__if__if__if__result_assign__add]
                                               [@GP_Id:6]
                                               (Standard__integer.range_check_
                                                  ((Stringtointeger__from_string__result.result__.int__content)
                                                     + (Stringtointeger__from_string__c.c.int__content)))))))))))))
                             else
                               ([@GP_Sloc:stringtointeger.adb:49:13]
                                [#"stringtointeger.adb" 49 0 0]
                                (([#"stringtointeger.adb" 49 0 0]
                                  (stringtointeger__from_string__result.int__content <-
                                     (0 : int)));
                                 ([#"stringtointeger.adb" 49 0 0]
                                  ((raise Return__exc) : unit))))));
                           ([@GP_Sloc:stringtointeger.adb:51:14]
                            [#"stringtointeger.adb" 51 0 0] ());
                           ([@GP_Sloc:stringtointeger.adb:51:10]
                            [#"stringtointeger.adb" 51 0 0]
                            (if (([#"stringtointeger.adb" 51 0 0]
                                  [#"stringtointeger.adb" 51 0 0]
                                  (([@branch_id=995] Main.spark__branch).bool__content <-
                                     ((Stringtointeger__from_string__pos.pos.int__content)
                                        < (([#"stringtointeger.adb" 51 0 0]
                                            ());
                                           (Standard__string.last
                                              Stringtointeger__from_string__s.s)))));
                                 (([@branch_id=995] Main.spark__branch).bool__content)) then
                               (([@GP_Sloc:stringtointeger.adb:52:13]
                                 [#"stringtointeger.adb" 52 0 0] ());
                                ([@GP_Sloc:stringtointeger.adb:52:20]
                                 [#"stringtointeger.adb" 52 0 0] ());
                                ([@GP_Sloc:stringtointeger.adb:52:17]
                                 [#"stringtointeger.adb" 52 0 0]
                                 [#"stringtointeger.adb" 52 0 0]
                                 (Stringtointeger__from_string__pos.pos.int__content <-
                                    ([#"stringtointeger.adb" 52 0 0]
                                     [@GP_Id:10]
                                     [@comment:            Pos := Pos + 1;                        ^ stringtointeger.adb:52:24:VC_OVERFLOW_CHECK]
                                     [@GP_Shape:L_1_while__if__pos_assign__add]
                                     [@vc:annotation]
                                     [@GP_Reason:VC_OVERFLOW_CHECK]
                                     [@GP_Sloc:stringtointeger.adb:52:24]
                                     (Standard__integer.range_check_
                                        ((Stringtointeger__from_string__pos.pos.int__content)
                                           + (1 : int)))))))
                             else (raise Temp___exception_181)));
                           ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop stringtointeger.adb:22]
                            ());
                           (if (not ((Stringtointeger__from_string__pos.pos.int__content)
                                       <= (Standard__string.last
                                             Stringtointeger__from_string__s.s))) then
                              (raise Stringtointeger__from_string__L_1.L_1)
                            else ())));
                         ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                          (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                            ());
                           (let temp___inv_182 =
                              (Boolean.andb
                                 ((Boolean.andb
                                     ((Stringtointeger__from_string__pos.pos.int__content)
                                        >= (Standard__string.first
                                              Stringtointeger__from_string__s.s)))
                                    ((Stringtointeger__from_string__pos.pos.int__content)
                                       <= (Standard__string.last
                                             Stringtointeger__from_string__s.s))))
                                (if (Stringtointeger__from_string__negate.negate.bool__content) then
                                   ((Stringtointeger__from_string__result.result__.int__content)
                                      <= (0 : int))
                                 else
                                   ((Stringtointeger__from_string__result.result__.int__content)
                                      >= (0 : int))) in
                            ())));
                         ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                          ())
                       done))
                   with
                     Temp___exception_181 ->
                     ([@GP_Sloc:stringtointeger.adb:54:20]
                      [#"stringtointeger.adb" 54 0 0] ());
                     ([@GP_Sloc:stringtointeger.adb:54:13]
                      [#"stringtointeger.adb" 54 0 0]
                      (([#"stringtointeger.adb" 54 0 0]
                        (stringtointeger__from_string__result.int__content <-
                           (Stringtointeger__from_string__result.result__.int__content)));
                       ([#"stringtointeger.adb" 54 0 0]
                        ((raise Return__exc) : unit))))
                   end)
                with Stringtointeger__from_string__L_1.L_1 -> ()
                end))
            else ())));
         ([@GP_Sloc:stringtointeger.adb:58:14]
          [#"stringtointeger.adb" 58 0 0] ());
         ([@GP_Sloc:stringtointeger.adb:58:7]
          [#"stringtointeger.adb" 58 0 0]
          (([#"stringtointeger.adb" 58 0 0]
            (stringtointeger__from_string__result.int__content <-
               (Stringtointeger__from_string__result.result__.int__content)));
           ([#"stringtointeger.adb" 58 0 0] ((raise Return__exc) : unit))));
         (raise Return__exc)
       with Return__exc -> ()
       end));
     (stringtointeger__from_string__result.int__content))
end
