(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "T16b" defined at mystring.ads:38 instantiated at main.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T16b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t16b  = <range 0 2048>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2048
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t16b,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t16b__ref  = { mutable t16b__content : t16b }
  
  function   t16b__ref_t16b__content__projection (a : t16b__ref) requires
    {  } ensures  {  } returns t16b = a.t16b__content
  
  meta model_projection function t16b__ref_t16b__content__projection
  
  meta inline:no function t16b__ref_t16b__content__projection
  
  function   t16b__havoc (x : t16b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T16b" defined at mystring.ads:38 instantiated at main.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T16b__rep
  
  use        Main__lines__mystring__T16b
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Main__lines__mystring__T16b.t16b) requires { True }
    ensures  { True } returns int = (Main__lines__mystring__T16b.t16b'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Main__lines__mystring__T16b.t16b,
    predicate in_range = Main__lines__mystring__T16b.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 2048
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at main.adb:26, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring__T16b
  use        Main__lines__mystring__T16b__rep
  use        Main__lines__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [name:Length]
                           [model_trace:.69126]rec__main__lines__mystring__length : Main__lines__mystring__T16b.t16b;
                           [model_trace:.69130]
                           [name:Str]rec__main__lines__mystring__str : Array__Int__Standard__character.map }
  
  function [name:Length] [model_trace:.69126] 
    __split_fields_rec__main__lines__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Main__lines__mystring__T16b.t16b = a.rec__main__lines__mystring__length
  
  meta model_projection function __split_fields_rec__main__lines__mystring__length__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__length__projection
  
  function [model_trace:.69130] [name:Str] 
    __split_fields_rec__main__lines__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__main__lines__mystring__str
  
  meta model_projection function __split_fields_rec__main__lines__mystring__str__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   main__lines__mystring__length__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__length_ (a : __rep) requires
    { (main__lines__mystring__length__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__length) }
    returns Main__lines__mystring__T16b.t16b
  
  function   main__lines__mystring__str__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__str_ (a : __rep) requires
    { (main__lines__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__str) } returns
    Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Main__lines__mystring__T16b__rep.to_rep
                a.__split_fields.rec__main__lines__mystring__length)
               = (Main__lines__mystring__T16b__rep.to_rep
                    b.__split_fields.rec__main__lines__mystring__length)) /\
              (Main__lines__mystringstr.bool_eq
                 a.__split_fields.rec__main__lines__mystring__str
                 b.__split_fields.rec__main__lines__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at main.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
  
  use export Main__lines__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type mystring  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   main__lines__mystring__length__first__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__last__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__position () requires {  }
    ensures  {  } returns int
  
  axiom main__lines__mystring__length__first__bit_axiom : ((main__lines__mystring__length__first__bit
                                                              ) >= 0)
  
  axiom main__lines__mystring__length__last__bit_axiom : ((main__lines__mystring__length__last__bit
                                                             )
                                                            > (main__lines__mystring__length__first__bit
                                                                 ))
  
  axiom main__lines__mystring__length__position_axiom : ((main__lines__mystring__length__position
                                                            ) >= 0)
  
  function   main__lines__mystring__str__first__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__last__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__position () requires {  } ensures 
    {  } returns int
  
  axiom main__lines__mystring__str__first__bit_axiom : ((main__lines__mystring__str__first__bit
                                                           ) >= 0)
  
  axiom main__lines__mystring__str__last__bit_axiom : ((main__lines__mystring__str__last__bit
                                                          )
                                                         > (main__lines__mystring__str__first__bit
                                                              ))
  
  axiom main__lines__mystring__str__position_axiom : ((main__lines__mystring__str__position
                                                         ) >= 0)
  
  function   user_eq (a : mystring b : mystring) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns mystring
  
  type mystring__ref  = { mutable mystring__content : mystring }
  
  function   mystring__ref_mystring__content__2__projection
    (a : mystring__ref) requires {  } ensures  {  } returns
    mystring = a.mystring__content
  
  meta model_projection function mystring__ref_mystring__content__2__projection
  
  meta inline:no function mystring__ref_mystring__content__2__projection
  
  function   mystring__havoc (x : mystring__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at main.adb:26, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__length
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   length (m : Main__lines__mystring.mystring) requires { True }
    ensures  { True } returns int
  
  function   length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_165) : int
    m : Main__lines__mystring.mystring) requires { True } ensures  { True }
    returns bool

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at main.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_270) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___is_init_266) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_267) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_268) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_269) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_272) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_273) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at main.adb:26, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__length___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural___axiom
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__mystring___axiom
  use        Main__lines__mystring__T16b
  use        Main__lines__mystring__T16b__rep
  
  function   length (m : Main__lines__mystring.mystring) requires { True }
    ensures 
    { ((result = (Main__lines__length.length m)) /\
         (Main__lines__length.length__function_guard result m) /\
         ((Standard__natural___axiom.dynamic_invariant result True False True
             True) /\
            ((result
                = ( (Main__lines__mystring__T16b__rep.to_rep
                       ( m).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)))
               /\ ([GP_Pretty_Ada:69448] (result <= 2048))))) } returns int
  
  axiom length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom length__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining the constant "m" defined at mystring.ads:26 instantiated at main.adb:26, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__m
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function [model_projected] [name:M] [model_trace:69304]
    [sloc:mystring.ads:26] m () requires {  } ensures  {  } returns
    Main__lines__mystring.mystring

end

(* Module for defining the constant "from" defined at mystring.ads:26 instantiated at main.adb:26, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__from
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:69307] [name:From] [sloc:mystring.ads:26] from 
    () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "to" defined at mystring.ads:26 instantiated at main.adb:26, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__to
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:69310] [name:To] [sloc:mystring.ads:26] to__ 
    () requires {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at main.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__r
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  val r__split_fields [model_trace:71726] [model_projected]
  [name:R] [sloc:mystring.adb:72]: Main__lines__mystring.__split_fields

end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at main.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__j
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val j [model_projected] [model_trace:71743]
  [name:J] [sloc:mystring.adb:73]: int

end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at main.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__L_4__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [model_trace:71793] [model_projected]
  [name:I] [sloc:mystring.adb:75]: int

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tmystringstrD1  = <range 1 2048>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 2048
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = tmystringstrD1,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tmystringstrD1__ref  = { mutable tmystringstrD1__content : tmystringstrD1 }
  
  function   tmystringstrD1__ref_tmystringstrD1__content__2__projection
    (a : tmystringstrD1__ref) requires {  } ensures  {  } returns
    tmystringstrD1 = a.tmystringstrD1__content
  
  meta model_projection function tmystringstrD1__ref_tmystringstrD1__content__2__projection
  
  meta inline:no function tmystringstrD1__ref_tmystringstrD1__content__2__projection
  
  function   tmystringstrD1__havoc (x : tmystringstrD1__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at main.adb:26, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__substring__L_4
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "T78b" defined at mystring.adb:75 instantiated at main.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__L_4__T78b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t78b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t78b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t78b__ref  = { mutable t78b__content : t78b }
  
  function   t78b__ref_t78b__content__projection (a : t78b__ref) requires
    {  } ensures  {  } returns t78b = a.t78b__content
  
  meta model_projection function t78b__ref_t78b__content__projection
  
  meta inline:no function t78b__ref_t78b__content__projection
  
  function   t78b__havoc (x : t78b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at main.adb:26, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_614
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp_____aggregate_def_614
    (([mlw:proxy_symbol] [introduced] temp___616) : int) requires { True }
    ensures  { True } returns Array__Int__Standard__character.map

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_260) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_256) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_257) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_258) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_259) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_262) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_263) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:26 instantiated at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__m___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:26 instantiated at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__from___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:26 instantiated at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__to___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrD1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T16b" defined at mystring.ads:38 instantiated at main.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T16b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__r___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__j___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at main.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at main.adb:26, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_614___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__character
  use        Standard__character___axiom
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Temp_____aggregate_def_614
  use        Array__Int__Standard__character
  
  axiom def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "T78b" defined at mystring.adb:75 instantiated at main.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__L_4__T78b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:26 instantiated at main.adb:26, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__substring__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__positive___axiom
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Main__lines__mystring
  use        Main__lines__length
  use        Main__lines__length___axiom
  use        Main__lines__substring__m
  use        Main__lines__substring__from
  use        Main__lines__substring__to
  use        Main__lines__mystring___axiom
  use        Main__lines__substring__r
  use        Main__lines__substring__j
  use        Main__lines__substring__L_4__i
  use        Main__lines__mystring__T16b
  use        Main__lines__mystring__T16b__rep
  use        Main__lines__TmystringstrD1
  use        Main__lines__substring__L_4
  use        Main__lines__substring__L_4__T78b
  use        Array__Int__Standard__character
  use        Temp_____aggregate_def_614
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__integer___axiom
  use        Main__lines__mystringstr___axiom
  use        Main__lines__mystring___axiom
  use        Main__lines__length___axiom
  use        Main__lines__substring__m___axiom
  use        Main__lines__substring__from___axiom
  use        Main__lines__substring__to___axiom
  use        Main__lines__TmystringstrD1___axiom
  use        Main__lines__mystring__T16b___axiom
  use        Main__lines__substring__r___axiom
  use        Main__lines__substring__j___axiom
  use        Main__lines__substring__L_4___axiom
  use        Main__lines__substring__L_4__i___axiom
  use        Temp_____aggregate_def_614___axiom
  use        Main__lines__substring__L_4__T78b___axiom
  
  val main__lines__substring__result [model_projected]
  [model_trace:69302@result]
  [name:Substring] : Main__lines__mystring.mystring
  
  function [GP_Subp:mystring.ads:26] [sloc:mystring.ads:26] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:mystring.ads:28] ([GP_Reason:VC_POSTCONDITION] [GP_Id:81]
                              [GP_Shape:pragargs__cmp]
                              [comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:28:14:instantiated:main.adb:26:4:VC_POSTCONDITION]
                              [model_vc_post]
                              [GP_Sloc:mystring.ads:28:14:instantiated:main.adb:26:4] 
                              ([GP_Pretty_Ada:69483]
                              [GP_Sloc:mystring.ads:28:14:instantiated:main.adb:26:4] (
                              (epsilon ([mlw:proxy_symbol]
                              [introduced] temp___result_631) : int {
                              ((([mlw:proxy_symbol]
                                  [introduced] temp___result_631)
                                  = (Main__lines__length.length
                                       ( !main__lines__substring__result)))
                                 /\
                                 (Main__lines__length.length__function_guard
                                    ([mlw:proxy_symbol]
                                    [introduced] temp___result_631)
                                    ( !main__lines__substring__result)))})
                                = ((Main__lines__substring__to.to__
                                      - Main__lines__substring__from.from)
                                     + 1))))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram mystring.ads:26 instantiated at main.adb:26 *);
        assume
        { (Main__lines__mystring___axiom.dynamic_invariant
             Main__lines__substring__m.m True False True True) };
        assume
        { (Standard__positive___axiom.dynamic_invariant
             Main__lines__substring__from.from True False True True) };
        assume
        { (Standard__positive___axiom.dynamic_invariant
             Main__lines__substring__to.to__ True False True True) };
        (* Assume moved pointers in outputs of the subprogram mystring.ads:26 instantiated at main.adb:26 *);
        (* Check for RTE in the Pre of the subprogram mystring.ads:26 instantiated at main.adb:26 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (Main__lines__substring__from.from
                             <= Main__lines__substring__to.to__)
                          (Main__lines__substring__to.to__
                             <= (Main__lines__length___axiom.length
                                   ( Main__lines__substring__m.m))))
                       in ())  end;
        (* Assume Pre of the subprogram mystring.ads:26 instantiated at main.adb:26 *);
        assume
        { (([GP_Pretty_Ada:69280] (Main__lines__substring__from.from
                                     <= Main__lines__substring__to.to__)) /\
             ([GP_Pretty_Ada:69283] (Main__lines__substring__to.to__
                                       <= (epsilon ([mlw:proxy_symbol]
                                          [introduced] temp___result_630) : int {
                                          ((([mlw:proxy_symbol]
                                              [introduced] temp___result_630)
                                              = (Main__lines__length.length
                                                   ( Main__lines__substring__m.m)))
                                             /\
                                             (Main__lines__length.length__function_guard
                                                ([mlw:proxy_symbol]
                                                [introduced] temp___result_630)
                                                ( Main__lines__substring__m.m)))})))) };
        (try
        ();
          ([sloc:mystring.adb:72] (let main__lines__substring__r__assume =
          ( --pp_record_aggregate NOT IMPLEMENTED) in (
          Main__lines__substring__r.r__split_fields :=
          main__lines__substring__r__assume.Main__lines__mystring.__split_fields));
          assume
          { (Main__lines__mystring___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:mystring.adb:73] ());
          ([sloc:mystring.adb:73] ( Main__lines__substring__j.j :=
          ( 1));
          assume
          { (Standard__positive___axiom.dynamic_invariant
               !Main__lines__substring__j.j True False True True) });
          ([sloc:mystring.adb:75] ());
          ();
          ([GP_Sloc:mystring.adb:75:25:instantiated:main.adb:26:4] ([sloc:mystring.adb:75] (let ([mlw:proxy_symbol]
                                                                   [introduced] temp___619)
                                                                   =
                                                                   Main__lines__substring__from.from
                                                                   in
                                                                   (let ([mlw:proxy_symbol]
                                                                   [introduced] temp___620)
                                                                   =
                                                                   Main__lines__substring__to.to__
                                                                   in (
                                                                   Main__lines__substring__L_4__i.i
                                                                   :=
                                                                   ([mlw:proxy_symbol]
                                                                    [introduced] temp___619));
                                                                   (* Translation of an Ada loop from mystring.adb:75 instantiated at main.adb:26 *);
                                                                   (if
                                                                   (_gnatprove_standard.Boolean.andb
                                                                    (([mlw:proxy_symbol]
                                                                    [introduced] temp___619)
                                                                    <= !Main__lines__substring__L_4__i.i)
                                                                    (!Main__lines__substring__L_4__i.i
                                                                    <= ([mlw:proxy_symbol]
                                                                    [introduced] temp___620)))
                                                                   then
                                                                   (try
                                                                   (let temp___loop_entry_627
                                                                    =
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    in
                                                                    (* While loop translating the Ada loop from mystring.adb:75 instantiated at main.adb:26 *);
                                                                    ([sloc:mystring.adb:76] 
                                                                    loop
                                                                    (* Check for absence of RTE in the loop invariant and variant *);
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___inv_629)
                                                                    =
                                                                    (!Main__lines__substring__j.j
                                                                    = ([sloc:mystring.adb:76] 
                                                                    ([GP_Shape:L_4_while__pragargs__cmp__add]
                                                                    [comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:26:4:VC_OVERFLOW_CHECK]
                                                                    [vc:annotation]
                                                                    [GP_Sloc:mystring.adb:76:46:instantiated:main.adb:26:4]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [GP_Id:78] (
                                                                    Standard__integer.range_check_
                                                                    (([sloc:mystring.adb:76] 
                                                                    ([comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:26:4:VC_OVERFLOW_CHECK]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [GP_Id:77]
                                                                    [GP_Shape:L_4_while__pragargs__cmp__add__sub]
                                                                    [GP_Sloc:mystring.adb:76:39:instantiated:main.adb:26:4] (
                                                                    Standard__integer.range_check_
                                                                    (!Main__lines__substring__L_4__i.i
                                                                    - Main__lines__substring__from.from))))
                                                                    + 1)))))
                                                                    in
                                                                    abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    () in
                                                                    ())  end)
                                                                    invariant
                                                                    {([sloc:mystring.adb:76] 
                                                                    ([comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:main.adb:26:4:VC_LOOP_INVARIANT]
                                                                    [GP_Reason:VC_LOOP_INVARIANT]
                                                                    [vc:annotation]
                                                                    [GP_Shape:L_4_while__pragargs__cmp]
                                                                    [GP_Id:79]
                                                                    [GP_Sloc:mystring.adb:76:33:instantiated:main.adb:26:4] 
                                                                    ([GP_Pretty_Ada:71799]
                                                                    [GP_Sloc:mystring.adb:76:33:instantiated:main.adb:26:4] (
                                                                    !Main__lines__substring__j.j
                                                                    = (
                                                                    (!Main__lines__substring__L_4__i.i
                                                                    - Main__lines__substring__from.from)
                                                                    + 1)))))}
                                                                    
                                                                    (* Assume implicit invariants from the loop mystring.adb:75 instantiated at main.adb:26 *);
                                                                    assume
                                                                    { (
                                                                    _gnatprove_standard.Boolean.andb
                                                                    (((True
                                                                    /\
                                                                    (Main__lines__mystring___axiom.dynamic_invariant
                                                                    --pp_record_aggregate NOT IMPLEMENTED
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\
                                                                    (--pp_record_aggregate NOT IMPLEMENTED.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length
                                                                    = temp___loop_entry_627.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))
                                                                    /\
                                                                    (if
                                                                    (
                                                                    (True
                                                                    = True)
                                                                    \/
                                                                    (Main__lines__substring__from.from
                                                                    <= Main__lines__substring__to.to__))
                                                                    then
                                                                    (
                                                                    Main__lines__substring__L_4__T78b.dynamic_property
                                                                    Main__lines__substring__from.from
                                                                    Main__lines__substring__to.to__
                                                                    !Main__lines__substring__L_4__i.i)
                                                                    ) /\ True
                                                                    /\ True)
                                                                    /\
                                                                    (Standard__positive___axiom.dynamic_invariant
                                                                    !Main__lines__substring__j.j
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    ((Main__lines__substring__from.from
                                                                    <= !Main__lines__substring__L_4__i.i)
                                                                    /\
                                                                    (!Main__lines__substring__L_4__i.i
                                                                    <= Main__lines__substring__to.to__))) };
                                                                    (* Continuation of loop after loop invariant and variant *);
                                                                    ();
                                                                    ([GP_Sloc:mystring.adb:77:10:instantiated:main.adb:26:4] 
                                                                    ([sloc:mystring.adb:77] ()));
                                                                    ([GP_Sloc:mystring.adb:77:16:instantiated:main.adb:26:4] 
                                                                    ([sloc:mystring.adb:77] ()));
                                                                    ([GP_Sloc:mystring.adb:77:19:instantiated:main.adb:26:4] 
                                                                    ([sloc:mystring.adb:77] (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___625)
                                                                    =
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___624)
                                                                    =
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED)
                                                                    in
                                                                    abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___624).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str
                                                                    in ())  end;
                                                                    --pp_record_update NOT IMPLEMENTED)
                                                                    in (
                                                                    Main__lines__substring__r.r__split_fields
                                                                    :=
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___625).Main__lines__mystring.__split_fields))));
                                                                    ([GP_Sloc:mystring.adb:78:10:instantiated:main.adb:26:4] 
                                                                    ([sloc:mystring.adb:78] ()));
                                                                    ([GP_Sloc:mystring.adb:78:15:instantiated:main.adb:26:4] 
                                                                    ([sloc:mystring.adb:78] ()));
                                                                    ([GP_Sloc:mystring.adb:78:12:instantiated:main.adb:26:4] 
                                                                    ([sloc:mystring.adb:78] (
                                                                    Main__lines__substring__j.j
                                                                    :=
                                                                    ( 
                                                                    ([sloc:mystring.adb:78] 
                                                                    ([GP_Sloc:mystring.adb:78:17:instantiated:main.adb:26:4]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [GP_Id:76]
                                                                    [comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:main.adb:26:4:VC_OVERFLOW_CHECK]
                                                                    [GP_Shape:L_4_while__j_assign__add] (
                                                                    Standard__integer.range_check_
                                                                    (!Main__lines__substring__j.j
                                                                    + 1))))))));
                                                                    (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:26 *);
                                                                    (if
                                                                    (
                                                                    !Main__lines__substring__L_4__i.i
                                                                    = ([mlw:proxy_symbol]
                                                                    [introduced] temp___620))
                                                                    then
                                                                    raise Main__lines__substring__L_4.L_4
                                                                    );
                                                                    ([sloc:mystring.adb:75] (
                                                                    Main__lines__substring__L_4__i.i
                                                                    :=
                                                                    (!Main__lines__substring__L_4__i.i
                                                                    + 1)))
                                                                     end loop)) with
                                                                   | Main__lines__substring__L_4.L_4 
                                                                   -> 
                                                                   ()) )))));
          ([GP_Sloc:mystring.adb:80:14:instantiated:main.adb:26:4] ([sloc:mystring.adb:80] ()));
          ([GP_Sloc:mystring.adb:80:7:instantiated:main.adb:26:4] ([sloc:mystring.adb:80] (
                                                                  main__lines__substring__result
                                                                  :=
                                                                  ( --pp_record_aggregate NOT IMPLEMENTED));
                                                                  raise Return__exc));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Main__lines__length___axiom.length
                           ( !main__lines__substring__result))
                          = ([sloc:mystring.ads:28] ([GP_Id:80]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Shape:pragargs__cmp__add]
                                                    [GP_Sloc:mystring.ads:28:51:instantiated:main.adb:26:4]
                                                    [comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:28:51:instantiated:main.adb:26:4:VC_OVERFLOW_CHECK] (
                                                    Standard__integer.range_check_
                                                      ((Main__lines__substring__to.to__
                                                          - Main__lines__substring__from.from)
                                                         + 1)))))
                       in ())  end;
        !main__lines__substring__result

end
