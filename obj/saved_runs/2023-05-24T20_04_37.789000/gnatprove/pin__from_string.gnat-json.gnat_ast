(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function [model_trace:933] [model_projected] [name:S] [sloc:pin.ads:5] s 
    () requires {  } ensures  {  } returns Standard__string.string__

end

(* Module for defining a ref holding the value of variable "result" defined at pin.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Pin__from_string__result
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val result__ [model_trace:827] [model_projected]
  [name:Result] [sloc:pin.adb:4]: int

end

(* Module for defining a ref holding the value of variable "count" defined at pin.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Pin__from_string__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val count [model_projected] [model_trace:832]
  [name:Count] [sloc:pin.adb:5]: int

end

(* Module for defining a ref holding the value of variable "i" defined at pin.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Pin__from_string__L_1__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [model_projected] [name:I] [model_trace:837] [sloc:pin.adb:7]: int

end

(* Module for defining a ref holding the value of variable "ch" defined at pin.adb:9, created in Gnat2Why.Decls.Translate_Variable *)
module Pin__from_string__B_2__ch
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val ch [model_projected] [name:Ch] [model_trace:845] [sloc:pin.adb:9]: int

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type pin  = <range 0 9999>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 9999
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = pin,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type pin__ref  = { mutable pin__content : pin }
  
  function   pin__ref_pin__content__projection (a : pin__ref) requires {  }
    ensures  {  } returns pin = a.pin__content
  
  meta model_projection function pin__ref_pin__content__projection
  
  meta inline:no function pin__ref_pin__content__projection
  
  function   pin__havoc (x : pin__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining the loop exit exception for the loop "L_1" defined at pin.adb:7, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pin__from_string__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for axiomatizing type "T2b" defined at pin.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L_1__T2b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t2b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t2b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t2b__ref  = { mutable t2b__content : t2b }
  
  function   t2b__ref_t2b__content__projection (a : t2b__ref) requires {  }
    ensures  {  } returns t2b = a.t2b__content
  
  meta model_projection function t2b__ref_t2b__content__projection
  
  meta inline:no function t2b__ref_t2b__content__projection
  
  function   t2b__havoc (x : t2b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "result" defined at pin.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "count" defined at pin.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at pin.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__L_1__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "ch" defined at pin.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__B_2__ch___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at pin.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pin__pin
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_166) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_165) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_162) = True) \/
          (Pin__pin.first <= Pin__pin.last))
       then
       (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last
          ([mlw:proxy_symbol] [introduced] temp___expr_166))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_168) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "T2b" defined at pin.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L_1__T2b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pin__from_string__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Int_Power
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__natural
  use        Standard__natural___axiom
  use        Standard__character
  use        Standard__character___axiom
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__string___axiom
  use        Pin__from_string__s
  use        Pin__from_string__result
  use        Pin__from_string__count
  use        Pin__from_string__L_1__i
  use        Pin__from_string__B_2__ch
  use        Pin__pin
  use        Pin__from_string__L_1
  use        Pin__from_string__L_1__T2b
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Pin__from_string__result___axiom
  use        Pin__from_string__count___axiom
  use        Pin__from_string__L_1__i___axiom
  use        Pin__from_string__B_2__ch___axiom
  use        Pin__from_string__L_1___axiom
  use        Pin__from_string__s___axiom
  use        Pin__pin___axiom
  use        Pin__from_string__L_1__T2b___axiom
  
  val pin__from_string__result [name:From_String] [model_projected]
  [model_trace:932@result] : int
  
  function [GP_Subp:pin.ads:5] [sloc:pin.ads:5] def (__void_param : unit)
    requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram pin.ads:5 *);
        assume
        { (Standard__string___axiom.dynamic_invariant Pin__from_string__s.s
             True False True True) };
        (* Assume moved pointers in outputs of the subprogram pin.ads:5 *);
        (* Check for RTE in the Pre of the subprogram pin.ads:5 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (abstract ensures
                             { True } begin  (let _ = Pin__from_string__s.s
                                            in ())  end;
                             (Standard__string.length Pin__from_string__s.s)
                             = 4) (let i = ( any  pre {} post {} return int)
                         in
                         (if
                         (_gnatprove_standard.Boolean.andb
                            (abstract ensures
                               { True } begin  (let _ = Pin__from_string__s.s
                                              in ())  end;
                               (Standard__string.first Pin__from_string__s.s)
                               <= i)
                            (i <= abstract ensures
                               { True } begin  (let _ = Pin__from_string__s.s
                                              in ())  end;
                               (Standard__string.last Pin__from_string__s.s)))
                         then
                         abstract ensures
                         { True } begin  (let _ =
                                        (_gnatprove_standard.Boolean.andb
                                           ((Standard__character__rep.to_rep
                                               (Array__Int__Standard__character.get
                                                  (Standard__string.to_array
                                                     Pin__from_string__s.s)
                                                  assert
                                                  { ([sloc:pin.ads:7] 
                                                    ([GP_Sloc:pin.ads:7:43]
                                                    [GP_Shape:pragargs__and__forall__and__cmp__ixdcomp]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_INDEX_CHECK]
                                                    [comment:               (for all I in S'Range => S(I) >= '0' and S(I) <= '9'));                                           ^ pin.ads:7:43:VC_INDEX_CHECK]
                                                    [GP_Id:8] (((Standard__string.first
                                                                   Pin__from_string__s.s)
                                                                  <= i) /\
                                                                 (i
                                                                    <= (
                                                                    Standard__string.last
                                                                    Pin__from_string__s.s))))) };
                                                  i)) >= 48)
                                           ((Standard__character__rep.to_rep
                                               (Array__Int__Standard__character.get
                                                  (Standard__string.to_array
                                                     Pin__from_string__s.s)
                                                  assert
                                                  { ([sloc:pin.ads:7] 
                                                    ([GP_Sloc:pin.ads:7:59]
                                                    [comment:               (for all I in S'Range => S(I) >= '0' and S(I) <= '9'));                                                           ^ pin.ads:7:59:VC_INDEX_CHECK]
                                                    [GP_Shape:pragargs__and__forall__and__cmp__ixdcomp]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_INDEX_CHECK]
                                                    [GP_Id:9] (((Standard__string.first
                                                                   Pin__from_string__s.s)
                                                                  <= i) /\
                                                                 (i
                                                                    <= (
                                                                    Standard__string.last
                                                                    Pin__from_string__s.s))))) };
                                                  i)) <= 57))
                                        in ())  end
                         ));
                         ( any  pre {} post
                         {((result = True) <->
                             --pp_universal_quantif NOT IMPLEMENTED)} return
                         bool)) in ())  end;
  (* Assume Pre of the subprogram pin.ads:5 *);
  assume
  { (([GP_Pretty_Ada:947] ((Standard__string.length Pin__from_string__s.s)
                             = 4)) /\ --pp_universal_quantif NOT IMPLEMENTED) };
  (try
  ();
    ([sloc:pin.adb:3] ());
    ([sloc:pin.adb:4] ( Pin__from_string__result.result__ := ( 0));
    assume
    { (Standard__natural___axiom.dynamic_invariant
         !Pin__from_string__result.result__ True False True True) });
    ([sloc:pin.adb:5] ( Pin__from_string__count.count := ( 0));
    assume
    { (Standard__natural___axiom.dynamic_invariant
         !Pin__from_string__count.count True False True True) });
    ([sloc:pin.adb:8] ());
    ([sloc:pin.adb:7] ());
    ();
    ([GP_Sloc:pin.adb:7:24] ([sloc:pin.adb:7] (let ([mlw:proxy_symbol]
                            [introduced] temp___181) =
                            abstract ensures
                              { True } begin  (let _ = Pin__from_string__s.s
                                             in ())  end;
                              (Standard__string.first Pin__from_string__s.s)
                            in (let ([mlw:proxy_symbol]
                            [introduced] temp___182) =
                            abstract ensures
                              { True } begin  (let _ = Pin__from_string__s.s
                                             in ())  end;
                              (Standard__string.last Pin__from_string__s.s)
                            in ( Pin__from_string__L_1__i.i :=
                            ([mlw:proxy_symbol] [introduced] temp___181));
                            (* Translation of an Ada loop from pin.adb:7 *);
                            (if
                            (_gnatprove_standard.Boolean.andb
                               (([mlw:proxy_symbol] [introduced] temp___181)
                                  <= !Pin__from_string__L_1__i.i)
                               (!Pin__from_string__L_1__i.i
                                  <= ([mlw:proxy_symbol]
                                  [introduced] temp___182)))
                            then
                            (try
                            (* While loop translating the Ada loop from pin.adb:7 *);
                              ([sloc:pin.adb:12] loop
                                                   ();
                                                   ([GP_Sloc:pin.adb:9:13] 
                                                   ([sloc:pin.adb:9] 
                                                   ([sloc:pin.adb:9] (
                                                   Pin__from_string__B_2__ch.ch
                                                   :=
                                                   ( (Standard__character__rep.to_rep
                                                        (Array__Int__Standard__character.get
                                                           (Standard__string.to_array
                                                              Pin__from_string__s.s)
                                                           !Pin__from_string__L_1__i.i))));
                                                   assume
                                                   { (Standard__character___axiom.dynamic_invariant
                                                        !Pin__from_string__B_2__ch.ch
                                                        True False True True) })));
                                                   (* Check for absence of RTE in the loop invariant and variant *);
                                                   (let ([mlw:proxy_symbol]
                                                   [introduced] temp___inv_186)
                                                   =
                                                   (_gnatprove_standard.Boolean.andb
                                                      (_gnatprove_standard.Boolean.andb
                                                         (_gnatprove_standard.Boolean.andb
                                                            (_gnatprove_standard.Boolean.andb
                                                               (!Pin__from_string__B_2__ch.ch
                                                                  >= 48)
                                                               (!Pin__from_string__B_2__ch.ch
                                                                  <= 57))
                                                            (!Pin__from_string__count.count
                                                               = ([sloc:pin.adb:12] 
                                                                 ([vc:annotation]
                                                                 [comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                                                         ^ pin.adb:12:73:VC_OVERFLOW_CHECK]
                                                                 [GP_Reason:VC_OVERFLOW_CHECK]
                                                                 [GP_Shape:L_1_while__B_2_declblk__pragargs__and__and__and__cmp__sub]
                                                                 [GP_Sloc:pin.adb:12:73]
                                                                 [GP_Id:4] (
                                                                 Standard__integer.range_check_
                                                                   (!Pin__from_string__L_1__i.i
                                                                    - abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    Pin__from_string__s.s
                                                                    in ())  end;
                                                                    (Standard__string.first
                                                                    Pin__from_string__s.s)))))))
                                                         (!Pin__from_string__count.count
                                                            <= 4))
                                                      (!Pin__from_string__result.result__
                                                         < ([sloc:pin.adb:12] 
                                                           ([GP_Shape:L_1_while__B_2_declblk__pragargs__and__cmp__exp]
                                                           [vc:annotation]
                                                           [GP_Reason:VC_OVERFLOW_CHECK]
                                                           [GP_Sloc:pin.adb:12:114]
                                                           [GP_Id:5]
                                                           [comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                                                                                                  ^ pin.adb:12:114:VC_OVERFLOW_CHECK] (
                                                           Standard__integer.range_check_
                                                             (let ([mlw:proxy_symbol]
                                                             [introduced] temp___187)
                                                             = 10 in
                                                             (_gnatprove_standard.Int_Power.power
                                                                ([mlw:proxy_symbol]
                                                                [introduced] temp___187)
                                                                !Pin__from_string__count.count)))))))
                                                   in abstract ensures
                                                   { True } begin  (let _ =
                                                                  () in ())  end)
                                                   invariant
                                                   {([sloc:pin.adb:12] 
                                                    ([GP_Reason:VC_LOOP_INVARIANT]
                                                    [comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                    ^ pin.adb:12:36:VC_LOOP_INVARIANT]
                                                    [vc:annotation]
                                                    [GP_Shape:L_1_while__B_2_declblk__pragargs__and]
                                                    [GP_Sloc:pin.adb:12:36]
                                                    [GP_Id:6] ((((([GP_Sloc:pin.adb:12:36]
                                                                  [GP_Pretty_Ada:858] (
                                                                  !Pin__from_string__B_2__ch.ch
                                                                    >= 48))
                                                                    /\
                                                                    ([GP_Sloc:pin.adb:12:50]
                                                                    [GP_Pretty_Ada:862] (
                                                                    !Pin__from_string__B_2__ch.ch
                                                                    <= 57)))
                                                                   /\
                                                                   ([GP_Pretty_Ada:866]
                                                                   [GP_Sloc:pin.adb:12:64] (
                                                                   !Pin__from_string__count.count
                                                                    = (
                                                                    !Pin__from_string__L_1__i.i
                                                                    - (
                                                                    Standard__string.first
                                                                    Pin__from_string__s.s)))))
                                                                  /\
                                                                  ([GP_Pretty_Ada:874]
                                                                  [GP_Sloc:pin.adb:12:86] (
                                                                  !Pin__from_string__count.count
                                                                    <= 4)))
                                                                 /\
                                                                 ([GP_Pretty_Ada:878]
                                                                 [GP_Sloc:pin.adb:12:102] (
                                                                 !Pin__from_string__result.result__
                                                                   < (let ([mlw:proxy_symbol]
                                                                   [introduced] temp___188)
                                                                   = 
                                                                   10 in
                                                                   (_gnatprove_standard.Int_Power.power
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___188)
                                                                    !Pin__from_string__count.count)))))))}
                                                   
                                                   (* Assume implicit invariants from the loop pin.adb:7 *);
                                                   assume
                                                   { (_gnatprove_standard.Boolean.andb
                                                        ((((True /\
                                                              (Standard__natural___axiom.dynamic_invariant
                                                                 !Pin__from_string__result.result__
                                                                 True True
                                                                 True True)
                                                              /\ True /\ True)
                                                             /\
                                                             (Standard__natural___axiom.dynamic_invariant
                                                                !Pin__from_string__count.count
                                                                True True
                                                                True True) /\
                                                             True /\ True) /\
                                                            (if
                                                            ((True = True) \/
                                                               ((Standard__string.first
                                                                   Pin__from_string__s.s)
                                                                  <= (
                                                                  Standard__string.last
                                                                    Pin__from_string__s.s)))
                                                            then
                                                            (Pin__from_string__L_1__T2b.dynamic_property
                                                               (Standard__string.first
                                                                  Pin__from_string__s.s)
                                                               (Standard__string.last
                                                                  Pin__from_string__s.s)
                                                               !Pin__from_string__L_1__i.i)
                                                            ) /\ True /\ True)
                                                           /\
                                                           (Standard__character___axiom.dynamic_invariant
                                                              !Pin__from_string__B_2__ch.ch
                                                              True True True
                                                              True) /\ True
                                                           /\ True)
                                                        (((Standard__string.first
                                                             Pin__from_string__s.s)
                                                            <= !Pin__from_string__L_1__i.i)
                                                           /\
                                                           (!Pin__from_string__L_1__i.i
                                                              <= (Standard__string.last
                                                                    Pin__from_string__s.s)))) };
                                                   (* Continuation of loop after loop invariant and variant *);
                                                   ();
                                                   ([GP_Sloc:pin.adb:13:13] 
                                                   ([sloc:pin.adb:13] ()));
                                                   ([GP_Sloc:pin.adb:13:22] 
                                                   ([sloc:pin.adb:13] ()));
                                                   ([GP_Sloc:pin.adb:13:19] 
                                                   ([sloc:pin.adb:13] (
                                                   Pin__from_string__count.count
                                                   :=
                                                   ( ([sloc:pin.adb:13] 
                                                     ([GP_Shape:L_1_while__B_2_declblk__count_assign__add]
                                                     [vc:annotation]
                                                     [GP_Reason:VC_OVERFLOW_CHECK]
                                                     [GP_Sloc:pin.adb:13:28]
                                                     [GP_Id:0]
                                                     [comment:            Count := Count + 1;                            ^ pin.adb:13:28:VC_OVERFLOW_CHECK] (
                                                     Standard__integer.range_check_
                                                       (!Pin__from_string__count.count
                                                          + 1))))))));
                                                   ([GP_Sloc:pin.adb:14:13] 
                                                   ([sloc:pin.adb:14] ()));
                                                   ([GP_Sloc:pin.adb:14:23] 
                                                   ([sloc:pin.adb:14] ()));
                                                   ([GP_Sloc:pin.adb:14:20] 
                                                   ([sloc:pin.adb:14] (
                                                   Pin__from_string__result.result__
                                                   :=
                                                   ( ([sloc:pin.adb:14] 
                                                     ([comment:            Result := Result * 10;                              ^ pin.adb:14:30:VC_OVERFLOW_CHECK]
                                                     [vc:annotation]
                                                     [GP_Reason:VC_OVERFLOW_CHECK]
                                                     [GP_Shape:L_1_while__B_2_declblk__result_assign__mult]
                                                     [GP_Sloc:pin.adb:14:30]
                                                     [GP_Id:1] (Standard__integer.range_check_
                                                                  (!Pin__from_string__result.result__
                                                                    * 10))))))));
                                                   ([GP_Sloc:pin.adb:15:13] 
                                                   ([sloc:pin.adb:15] ()));
                                                   ([GP_Sloc:pin.adb:15:23] 
                                                   ([sloc:pin.adb:15] ()));
                                                   ([GP_Sloc:pin.adb:15:47] 
                                                   ([sloc:pin.adb:15] ()));
                                                   ([GP_Sloc:pin.adb:15:20] 
                                                   ([sloc:pin.adb:15] (
                                                   Pin__from_string__result.result__
                                                   :=
                                                   ( ([sloc:pin.adb:15] 
                                                     ([vc:annotation]
                                                     [GP_Shape:L_1_while__B_2_declblk__result_assign__add]
                                                     [comment:            Result := Result + (Character'Pos(Ch) - Character'Pos('0'));                              ^ pin.adb:15:30:VC_RANGE_CHECK]
                                                     [GP_Reason:VC_RANGE_CHECK]
                                                     [GP_Id:3]
                                                     [GP_Sloc:pin.adb:15:30] (
                                                     Standard__natural.range_check_
                                                       ([sloc:pin.adb:15] 
                                                       ([vc:annotation]
                                                       [comment:            Result := Result + (Character'Pos(Ch) - Character'Pos('0'));                              ^ pin.adb:15:30:VC_OVERFLOW_CHECK]
                                                       [GP_Shape:L_1_while__B_2_declblk__result_assign__add]
                                                       [GP_Reason:VC_OVERFLOW_CHECK]
                                                       [GP_Id:2]
                                                       [GP_Sloc:pin.adb:15:30] (
                                                       Standard__integer.range_check_
                                                         (!Pin__from_string__result.result__
                                                            + (!Pin__from_string__B_2__ch.ch
                                                                 - 48))))))))))));
                                                   (* Check for the exit condition and loop statements appearing before the loop invariant of loop pin.adb:7 *);
                                                   (if
                                                   (!Pin__from_string__L_1__i.i
                                                      = ([mlw:proxy_symbol]
                                                      [introduced] temp___182))
                                                   then
                                                   raise Pin__from_string__L_1.L_1
                                                   );
                                                   ([sloc:pin.adb:7] (
                                                   Pin__from_string__L_1__i.i
                                                   :=
                                                   (!Pin__from_string__L_1__i.i
                                                      + 1)))
                                                    end loop) with
                            | Pin__from_string__L_1.L_1  -> ()) )))));
    ([GP_Sloc:pin.adb:18:18] ([sloc:pin.adb:18] ()));
    ([GP_Sloc:pin.adb:18:7] ([sloc:pin.adb:18] ( pin__from_string__result :=
                            ( ([sloc:pin.adb:18] ([comment:      return PIN(Result);                  ^ pin.adb:18:18:VC_RANGE_CHECK]
                                                 [GP_Shape:return__typeconv]
                                                 [vc:annotation]
                                                 [GP_Reason:VC_RANGE_CHECK]
                                                 [GP_Sloc:pin.adb:18:18]
                                                 [GP_Id:7] (Pin__pin.range_check_
                                                              !Pin__from_string__result.result__)))));
                            raise Return__exc));
    raise Return__exc with | Return__exc  -> ());
  abstract ensures
  { True } begin  (let _ = True in ())  end;
  !pin__from_string__result

end
