(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t13s  = <range 0 1024>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1024
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t13s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t13s__ref  = { mutable t13s__content : t13s }
  
  function   t13s__ref_t13s__content__projection (a : t13s__ref) requires
    {  } ensures  {  } returns t13s = a.t13s__content
  
  meta model_projection function t13s__ref_t13s__content__projection
  
  meta inline:no function t13s__ref_t13s__content__projection
  
  function   t13s__havoc (x : t13s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s__rep
  
  use        Variablestore__variables__mystring__T13s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Variablestore__variables__mystring__T13s.t13s)
    requires { True } ensures  { True } returns
    int = (Variablestore__variables__mystring__T13s.t13s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Variablestore__variables__mystring__T13s.t13s,
    predicate in_range = Variablestore__variables__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 1024
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__variables__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  use        Variablestore__variables__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [model_trace:.45913]
                           [name:Length]rec__variablestore__variables__mystring__length : Variablestore__variables__mystring__T13s.t13s;
                           [model_trace:.45917]
                           [name:Str]rec__variablestore__variables__mystring__str : Array__Int__Standard__character.map }
  
  function [model_trace:.45913] [name:Length] 
    __split_fields_rec__variablestore__variables__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Variablestore__variables__mystring__T13s.t13s = a.rec__variablestore__variables__mystring__length
  
  meta model_projection function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  meta inline:no function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  function [model_trace:.45917] [name:Str] 
    __split_fields_rec__variablestore__variables__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__variablestore__variables__mystring__str
  
  meta model_projection function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  meta inline:no function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   variablestore__variables__mystring__length__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__variablestore__variables__mystring__length_ (a : __rep)
    requires { (variablestore__variables__mystring__length__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__variablestore__variables__mystring__length) }
    returns Variablestore__variables__mystring__T13s.t13s
  
  function   variablestore__variables__mystring__str__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__variablestore__variables__mystring__str_ (a : __rep)
    requires { (variablestore__variables__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__variablestore__variables__mystring__str) }
    returns Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Variablestore__variables__mystring__T13s__rep.to_rep
                a.__split_fields.rec__variablestore__variables__mystring__length)
               = (Variablestore__variables__mystring__T13s__rep.to_rep
                    b.__split_fields.rec__variablestore__variables__mystring__length))
              /\
              (Variablestore__variables__mystringstr.bool_eq
                 a.__split_fields.rec__variablestore__variables__mystring__str
                 b.__split_fields.rec__variablestore__variables__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring
  
  use export Variablestore__variables__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type mystring  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   variablestore__variables__mystring__length__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__length__last__bit ()
    requires {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__length__position () requires
    {  } ensures  {  } returns int
  
  axiom variablestore__variables__mystring__length__first__bit_axiom : 
  ((variablestore__variables__mystring__length__first__bit ) >= 0)
  
  axiom variablestore__variables__mystring__length__last__bit_axiom : 
  ((variablestore__variables__mystring__length__last__bit )
     > (variablestore__variables__mystring__length__first__bit ))
  
  axiom variablestore__variables__mystring__length__position_axiom : 
  ((variablestore__variables__mystring__length__position ) >= 0)
  
  function   variablestore__variables__mystring__str__first__bit () requires
    {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__str__last__bit () requires
    {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__str__position () requires
    {  } ensures  {  } returns int
  
  axiom variablestore__variables__mystring__str__first__bit_axiom : ((variablestore__variables__mystring__str__first__bit
                                                                    ) >= 0)
  
  axiom variablestore__variables__mystring__str__last__bit_axiom : ((variablestore__variables__mystring__str__last__bit
                                                                    )
                                                                    > (
                                                                    variablestore__variables__mystring__str__first__bit
                                                                    ))
  
  axiom variablestore__variables__mystring__str__position_axiom : ((variablestore__variables__mystring__str__position
                                                                    ) >= 0)
  
  function   user_eq (a : mystring b : mystring) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns mystring
  
  type mystring__ref  = { mutable mystring__content : mystring }
  
  function   mystring__ref_mystring__content__projection (a : mystring__ref)
    requires {  } ensures  {  } returns mystring = a.mystring__content
  
  meta model_projection function mystring__ref_mystring__content__projection
  
  meta inline:no function mystring__ref_mystring__content__projection
  
  function   mystring__havoc (x : mystring__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__length
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring
  
  function   length (m : Variablestore__variables__mystring.mystring)
    requires { True } ensures  { True } returns int
  
  function   length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_163) : int
    m : Variablestore__variables__mystring.mystring) requires { True }
    ensures  { True } returns bool

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_205) : Variablestore__variables__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___is_init_201) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_202) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_203) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_204) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_207) : Variablestore__variables__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_208) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Variablestore__variables__length___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural___axiom
  use        Variablestore__variables__mystring
  use        Variablestore__variables__length
  use        Variablestore__variables__mystring___axiom
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  
  function   length (m : Variablestore__variables__mystring.mystring)
    requires { True } ensures 
    { ((result = (Variablestore__variables__length.length m)) /\
         (Variablestore__variables__length.length__function_guard result m)
         /\
         ((Standard__natural___axiom.dynamic_invariant result True False True
             True) /\
            ((result
                = ( (Variablestore__variables__mystring__T13s__rep.to_rep
                       ( m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)))
               /\ ([GP_Pretty_Ada:46235] (result <= 1024))))) } returns int
  
  axiom length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom length__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining the constant "s" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__from_string__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function [model_projected] [model_trace:45998] [name:S]
    [sloc:mystring.ads:12] s () requires {  } ensures  {  } returns
    Standard__string.string__

end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__from_string__m
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring
  
  val m__split_fields [model_projected] [model_trace:65776]
  [name:M] [sloc:mystring.adb:13]: Variablestore__variables__mystring.__split_fields

end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__from_string__j
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val j [model_trace:65789] [model_projected]
  [name:J] [sloc:mystring.adb:14]: int

end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__from_string__L_1__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [model_trace:65850] [model_projected]
  [name:I] [sloc:mystring.adb:20]: int

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tmystringstrD1  = <range 1 1024>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 1024
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = tmystringstrD1,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tmystringstrD1__ref  = { mutable tmystringstrD1__content : tmystringstrD1 }
  
  function   tmystringstrD1__ref_tmystringstrD1__content__projection
    (a : tmystringstrD1__ref) requires {  } ensures  {  } returns
    tmystringstrD1 = a.tmystringstrD1__content
  
  meta model_projection function tmystringstrD1__ref_tmystringstrD1__content__projection
  
  meta inline:no function tmystringstrD1__ref_tmystringstrD1__content__projection
  
  function   tmystringstrD1__havoc (x : tmystringstrD1__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Variablestore__variables__from_string__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for axiomatizing type "T316s" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__from_string__L_1__T316s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  type t316s  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   dynamic_property (first_int : int last_int : int x : int)
    requires { True } ensures  { True } returns
     = ((first_int <= x) /\ (x <= last_int))
  
  clone export ada__model.Dynamic_Discrete with axiom . type t = t316s,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t316s__ref  = { mutable t316s__content : t316s }
  
  function   t316s__ref_t316s__content__projection (a : t316s__ref) requires
    {  } ensures  {  } returns t316s = a.t316s__content
  
  meta model_projection function t316s__ref_t316s__content__projection
  
  meta inline:no function t316s__ref_t316s__content__projection
  
  function   t316s__havoc (x : t316s__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_330
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  
  function   temp_____aggregate_def_330
    (([mlw:proxy_symbol] [introduced] temp___332) : int) requires { True }
    ensures  { True } returns Array__Int__Standard__character.map

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystringstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_195) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_194) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_197) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_198) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrD1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring__T13s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__m___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__j___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__L_1__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_330___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__character
  use        Standard__character___axiom
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Temp_____aggregate_def_330
  use        Array__Int__Standard__character
  
  axiom def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "T316s" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__from_string__L_1__T316s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__from_string__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__string___axiom
  use        Variablestore__variables__mystring
  use        Variablestore__variables__length
  use        Variablestore__variables__length___axiom
  use        Variablestore__variables__from_string__s
  use        Variablestore__variables__mystring___axiom
  use        Variablestore__variables__from_string__m
  use        Variablestore__variables__from_string__j
  use        Variablestore__variables__from_string__L_1__i
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  use        Variablestore__variables__TmystringstrD1
  use        Variablestore__variables__from_string__L_1
  use        Variablestore__variables__from_string__L_1__T316s
  use        Array__Int__Standard__character
  use        Temp_____aggregate_def_330
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Variablestore__variables__mystringstr___axiom
  use        Variablestore__variables__mystring___axiom
  use        Variablestore__variables__from_string__s___axiom
  use        Variablestore__variables__length___axiom
  use        Variablestore__variables__TmystringstrD1___axiom
  use        Variablestore__variables__mystring__T13s___axiom
  use        Variablestore__variables__from_string__m___axiom
  use        Variablestore__variables__from_string__j___axiom
  use        Variablestore__variables__from_string__L_1___axiom
  use        Variablestore__variables__from_string__L_1__i___axiom
  use        Temp_____aggregate_def_330___axiom
  use        Variablestore__variables__from_string__L_1__T316s___axiom
  
  val variablestore__variables__from_string__result [name:From_String]
  [model_projected]
  [model_trace:45996@result] : Variablestore__variables__mystring.mystring
  
  function [GP_Subp:mystring.ads:12] [sloc:mystring.ads:12] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:mystring.ads:14] ([GP_Reason:VC_POSTCONDITION]
                              [GP_Sloc:mystring.ads:14:15:instantiated:variablestore.ads:11:4]
                              [GP_Id:18] [GP_Shape:pragargs__cmp]
                              [model_vc_post]
                              [comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:14:15:instantiated:variablestore.ads:11:4:VC_POSTCONDITION] 
                              ([GP_Sloc:mystring.ads:14:15:instantiated:variablestore.ads:11:4]
                              [GP_Pretty_Ada:46185] ((epsilon ([mlw:proxy_symbol]
                                                     [introduced] temp___result_350) : int {
                                                     ((([mlw:proxy_symbol]
                                                         [introduced] temp___result_350)
                                                         = (Variablestore__variables__length.length
                                                              ( !variablestore__variables__from_string__result)))
                                                        /\
                                                        (Variablestore__variables__length.length__function_guard
                                                           ([mlw:proxy_symbol]
                                                           [introduced] temp___result_350)
                                                           ( !variablestore__variables__from_string__result)))})
                                                       = (Standard__string.length
                                                            Variablestore__variables__from_string__s.s))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *);
        assume
        { (Standard__string___axiom.dynamic_invariant
             Variablestore__variables__from_string__s.s True False True True) };
        (* Assume moved pointers in outputs of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *);
        (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *);
        abstract ensures
        { True } begin  (let _ =
                       (([sloc:mystring.ads:13] ([GP_Id:17]
                                                [GP_Sloc:mystring.ads:13:15:instantiated:variablestore.ads:11:4]
                                                [vc:annotation]
                                                [GP_Shape:pragargs__cmp__typeconv__length_ref]
                                                [GP_Reason:VC_RANGE_CHECK]
                                                [comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:13:15:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] (
                                                Standard__integer.range_check_
                                                  abstract ensures
                                                  { True } begin  (let _ =
                                                                 Variablestore__variables__from_string__s.s
                                                                 in ())  end;
                                                  (Standard__string.length
                                                     Variablestore__variables__from_string__s.s))))
                          <= 1024)
                       in ())  end;
        (* Assume Pre of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *);
        assume
        { ([GP_Pretty_Ada:46171] ((Standard__string.length
                                     Variablestore__variables__from_string__s.s)
                                    <= 1024)) };
        (try
        ();
          ([sloc:mystring.adb:12] ());
          ([sloc:mystring.adb:13] (let variablestore__variables__from_string__m__assume
          = ( --pp_record_aggregate NOT IMPLEMENTED) in (
          Variablestore__variables__from_string__m.m__split_fields :=
          variablestore__variables__from_string__m__assume.Variablestore__variables__mystring.__split_fields));
          assume
          { (Variablestore__variables__mystring___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:mystring.adb:14] ());
          ([sloc:mystring.adb:14] (
          Variablestore__variables__from_string__j.j := ( 1));
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Variablestore__variables__from_string__j.j True False True
               True) });
          ([sloc:mystring.adb:20] ());
          ();
          ([GP_Sloc:mystring.adb:16:7:instantiated:variablestore.ads:11:4] 
          ([sloc:mystring.adb:16] (if
                                  ([sloc:mystring.adb:16] ([branch_id=65832]
                                  _gnatprove_standard.Main.spark__branch :=
                                  (([sloc:mystring.adb:16] ([vc:annotation]
                                                           [GP_Reason:VC_RANGE_CHECK]
                                                           [GP_Shape:if__cmp__typeconv__length_ref]
                                                           [comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                                                           [GP_Sloc:mystring.adb:16:11:instantiated:variablestore.ads:11:4]
                                                           [GP_Id:9] (
                                                           Standard__integer.range_check_
                                                             abstract ensures
                                                             { True } begin 
                                                              (let _ =
                                                             Variablestore__variables__from_string__s.s
                                                             in ())  end;
                                                             (Standard__string.length
                                                                Variablestore__variables__from_string__s.s))))
                                     > 1024)));
                                  ([branch_id=65832] _gnatprove_standard.Main.spark__branch).bool__content
                                  then
                                  ();
                                  ([GP_Sloc:mystring.adb:17:10:instantiated:variablestore.ads:11:4] 
                                  ([sloc:mystring.adb:17] ([sloc:mystring.adb:17] 
                                                          ([comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:variablestore.ads:11:4:VC_RAISE]
                                                          [GP_Reason:VC_RAISE]
                                                          [vc:annotation]
                                                          [GP_Shape:if__raise_constraint_error]
                                                          [GP_Sloc:mystring.adb:17:10:instantiated:variablestore.ads:11:4]
                                                          [GP_Id:8] absurd))))
                                   else ())));
          ([GP_Sloc:mystring.adb:19:7:instantiated:variablestore.ads:11:4] 
          ([sloc:mystring.adb:19] ()));
          ([GP_Sloc:mystring.adb:19:16:instantiated:variablestore.ads:11:4] 
          ([sloc:mystring.adb:19] (let ([mlw:proxy_symbol]
          [introduced] temp___337) =
          (let ([mlw:proxy_symbol] [introduced] temp___336) =
            ( --pp_record_aggregate NOT IMPLEMENTED) in abstract ensures
            { True } begin  (let _ =
                           ([mlw:proxy_symbol]
                             [introduced] temp___336).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length
                           in ())  end;
            --pp_record_update NOT IMPLEMENTED)
          in ( Variablestore__variables__from_string__m.m__split_fields :=
          ([mlw:proxy_symbol]
            [introduced] temp___337).Variablestore__variables__mystring.__split_fields))));
          ([GP_Sloc:mystring.adb:20:24:instantiated:variablestore.ads:11:4] 
          ([sloc:mystring.adb:20] (let ([mlw:proxy_symbol]
          [introduced] temp___338) =
          abstract ensures
            { True } begin  (let _ =
                           Variablestore__variables__from_string__s.s in ())  end;
            (Standard__string.first
               Variablestore__variables__from_string__s.s)
          in (let ([mlw:proxy_symbol] [introduced] temp___339) =
          abstract ensures
            { True } begin  (let _ =
                           Variablestore__variables__from_string__s.s in ())  end;
            (Standard__string.last Variablestore__variables__from_string__s.s)
          in ( Variablestore__variables__from_string__L_1__i.i :=
          ([mlw:proxy_symbol] [introduced] temp___338));
          (* Translation of an Ada loop from mystring.adb:20 instantiated at variablestore.ads:11 *);
          (if
          (_gnatprove_standard.Boolean.andb
             (([mlw:proxy_symbol] [introduced] temp___338)
                <= !Variablestore__variables__from_string__L_1__i.i)
             (!Variablestore__variables__from_string__L_1__i.i
                <= ([mlw:proxy_symbol] [introduced] temp___339)))
          then
          (try
          (let temp___loop_entry_345 = --pp_record_aggregate NOT IMPLEMENTED
            in
            (* While loop translating the Ada loop from mystring.adb:20 instantiated at variablestore.ads:11 *);
            ([sloc:mystring.adb:21] loop
                                      (* Check for absence of RTE in the loop invariant and variant *);
                                      (let ([mlw:proxy_symbol]
                                      [introduced] temp___inv_347) =
                                      (!Variablestore__variables__from_string__j.j
                                         = ([sloc:mystring.adb:21] ([GP_Id:14]
                                                                   [GP_Shape:L_1_while__pragargs__cmp__add]
                                                                   [GP_Sloc:mystring.adb:21:49:instantiated:variablestore.ads:11:4]
                                                                   [vc:annotation]
                                                                   [GP_Reason:VC_OVERFLOW_CHECK]
                                                                   [comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] (
                                                                   Standard__integer.range_check_
                                                                    (([sloc:mystring.adb:21] 
                                                                    ([comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK]
                                                                    [GP_Sloc:mystring.adb:21:39:instantiated:variablestore.ads:11:4]
                                                                    [GP_Id:13]
                                                                    [GP_Shape:L_1_while__pragargs__cmp__add__sub]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK] (
                                                                    Standard__integer.range_check_
                                                                    (!Variablestore__variables__from_string__L_1__i.i
                                                                    - abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    Variablestore__variables__from_string__s.s
                                                                    in ())  end;
                                                                    (Standard__string.first
                                                                    Variablestore__variables__from_string__s.s)))))
                                                                    + 1)))))
                                      in abstract ensures
                                      { True } begin  (let _ = () in ())  end)
                                      invariant
                                      {([sloc:mystring.adb:21] ([GP_Reason:VC_LOOP_INVARIANT]
                                                               [GP_Id:15]
                                                               [vc:annotation]
                                                               [GP_Shape:L_1_while__pragargs__cmp]
                                                               [GP_Sloc:mystring.adb:21:33:instantiated:variablestore.ads:11:4]
                                                               [comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:variablestore.ads:11:4:VC_LOOP_INVARIANT] 
                                                               ([GP_Pretty_Ada:65855]
                                                               [GP_Sloc:mystring.adb:21:33:instantiated:variablestore.ads:11:4] (
                                                               !Variablestore__variables__from_string__j.j
                                                                 = ((!Variablestore__variables__from_string__L_1__i.i
                                                                    - (Standard__string.first
                                                                    Variablestore__variables__from_string__s.s))
                                                                    + 1)))))}
                                      
                                      (* Assume implicit invariants from the loop mystring.adb:20 instantiated at variablestore.ads:11 *);
                                      assume
                                      { (_gnatprove_standard.Boolean.andb
                                           (((True /\
                                                (Variablestore__variables__mystring___axiom.dynamic_invariant
                                                   --pp_record_aggregate NOT IMPLEMENTED
                                                   True True True True) /\
                                                True /\
                                                (--pp_record_aggregate NOT IMPLEMENTED.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length
                                                   = temp___loop_entry_345.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))
                                               /\
                                               (Standard__integer___axiom.dynamic_invariant
                                                  !Variablestore__variables__from_string__j.j
                                                  True True True True) /\
                                               True /\ True) /\
                                              (if
                                              ((True = True) \/
                                                 ((Standard__string.first
                                                     Variablestore__variables__from_string__s.s)
                                                    <= (Standard__string.last
                                                          Variablestore__variables__from_string__s.s)))
                                              then
                                              (Variablestore__variables__from_string__L_1__T316s.dynamic_property
                                                 (Standard__string.first
                                                    Variablestore__variables__from_string__s.s)
                                                 (Standard__string.last
                                                    Variablestore__variables__from_string__s.s)
                                                 !Variablestore__variables__from_string__L_1__i.i)
                                              ) /\ True /\ True)
                                           (((Standard__string.first
                                                Variablestore__variables__from_string__s.s)
                                               <= !Variablestore__variables__from_string__L_1__i.i)
                                              /\
                                              (!Variablestore__variables__from_string__L_1__i.i
                                                 <= (Standard__string.last
                                                       Variablestore__variables__from_string__s.s)))) };
                                      (* Continuation of loop after loop invariant and variant *);
                                      ();
                                      ([GP_Sloc:mystring.adb:22:10:instantiated:variablestore.ads:11:4] 
                                      ([sloc:mystring.adb:22] ()));
                                      ([GP_Sloc:mystring.adb:22:16:instantiated:variablestore.ads:11:4] 
                                      ([sloc:mystring.adb:22] ()));
                                      ([GP_Sloc:mystring.adb:22:19:instantiated:variablestore.ads:11:4] 
                                      ([sloc:mystring.adb:22] (let ([mlw:proxy_symbol]
                                      [introduced] temp___343) =
                                      (let ([mlw:proxy_symbol]
                                        [introduced] temp___342) =
                                        ( --pp_record_aggregate NOT IMPLEMENTED)
                                        in abstract ensures
                                        { True } begin  (let _ =
                                                       ([mlw:proxy_symbol]
                                                         [introduced] temp___342).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str
                                                       in ())  end;
                                        --pp_record_update NOT IMPLEMENTED)
                                      in (
                                      Variablestore__variables__from_string__m.m__split_fields
                                      :=
                                      ([mlw:proxy_symbol]
                                        [introduced] temp___343).Variablestore__variables__mystring.__split_fields))));
                                      ([GP_Sloc:mystring.adb:23:10:instantiated:variablestore.ads:11:4] 
                                      ([sloc:mystring.adb:23] ()));
                                      ([GP_Sloc:mystring.adb:23:15:instantiated:variablestore.ads:11:4] 
                                      ([sloc:mystring.adb:23] ()));
                                      ([GP_Sloc:mystring.adb:23:12:instantiated:variablestore.ads:11:4] 
                                      ([sloc:mystring.adb:23] (
                                      Variablestore__variables__from_string__j.j
                                      :=
                                      ( ([sloc:mystring.adb:23] ([GP_Shape:L_1_while__j_assign__add]
                                                                [GP_Id:12]
                                                                [vc:annotation]
                                                                [GP_Reason:VC_OVERFLOW_CHECK]
                                                                [GP_Sloc:mystring.adb:23:17:instantiated:variablestore.ads:11:4]
                                                                [comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] (
                                                                Standard__integer.range_check_
                                                                  (!Variablestore__variables__from_string__j.j
                                                                    + 1))))))));
                                      (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at variablestore.ads:11 *);
                                      (if
                                      (!Variablestore__variables__from_string__L_1__i.i
                                         = ([mlw:proxy_symbol]
                                         [introduced] temp___339))
                                      then
                                      raise Variablestore__variables__from_string__L_1.L_1
                                      );
                                      ([sloc:mystring.adb:20] (
                                      Variablestore__variables__from_string__L_1__i.i
                                      :=
                                      (!Variablestore__variables__from_string__L_1__i.i
                                         + 1)))
                                       end loop)) with
          | Variablestore__variables__from_string__L_1.L_1  -> ()) )))));
          ([GP_Sloc:mystring.adb:25:14:instantiated:variablestore.ads:11:4] 
          ([sloc:mystring.adb:25] ()));
          ([GP_Sloc:mystring.adb:25:7:instantiated:variablestore.ads:11:4] 
          ([sloc:mystring.adb:25] (
          variablestore__variables__from_string__result :=
          ( --pp_record_aggregate NOT IMPLEMENTED));
          raise Return__exc));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Variablestore__variables__length___axiom.length
                           ( !variablestore__variables__from_string__result))
                          = ([sloc:mystring.ads:14] ([comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:14:45:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                                                    [GP_Id:16]
                                                    [vc:annotation]
                                                    [GP_Sloc:mystring.ads:14:45:instantiated:variablestore.ads:11:4]
                                                    [GP_Shape:pragargs__cmp__typeconv__length_ref]
                                                    [GP_Reason:VC_RANGE_CHECK] (
                                                    Standard__integer.range_check_
                                                      abstract ensures
                                                      { True } begin 
                                                       (let _ =
                                                      Variablestore__variables__from_string__s.s
                                                      in ())  end;
                                                      (Standard__string.length
                                                         Variablestore__variables__from_string__s.s)))))
                       in ())  end;
        !variablestore__variables__from_string__result

end
