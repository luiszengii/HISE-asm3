(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t13s  = <range 0 1024>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1024
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t13s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t13s__ref  = { mutable t13s__content : t13s }
  
  function   t13s__ref_t13s__content__projection (a : t13s__ref) requires
    {  } ensures  {  } returns t13s = a.t13s__content
  
  meta model_projection function t13s__ref_t13s__content__projection
  
  meta inline:no function t13s__ref_t13s__content__projection
  
  function   t13s__havoc (x : t13s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s__rep
  
  use        Variablestore__variables__mystring__T13s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Variablestore__variables__mystring__T13s.t13s)
    requires { True } ensures  { True } returns
    int = (Variablestore__variables__mystring__T13s.t13s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Variablestore__variables__mystring__T13s.t13s,
    predicate in_range = Variablestore__variables__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 1024
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__variables__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  use        Variablestore__variables__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [model_trace:.45913]
                           [name:Length]rec__variablestore__variables__mystring__length : Variablestore__variables__mystring__T13s.t13s;
                           [model_trace:.45917]
                           [name:Str]rec__variablestore__variables__mystring__str : Array__Int__Standard__character.map }
  
  function [model_trace:.45913] [name:Length] 
    __split_fields_rec__variablestore__variables__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Variablestore__variables__mystring__T13s.t13s = a.rec__variablestore__variables__mystring__length
  
  meta model_projection function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  meta inline:no function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  function [model_trace:.45917] [name:Str] 
    __split_fields_rec__variablestore__variables__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__variablestore__variables__mystring__str
  
  meta model_projection function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  meta inline:no function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   variablestore__variables__mystring__length__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__variablestore__variables__mystring__length_ (a : __rep)
    requires { (variablestore__variables__mystring__length__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__variablestore__variables__mystring__length) }
    returns Variablestore__variables__mystring__T13s.t13s
  
  function   variablestore__variables__mystring__str__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__variablestore__variables__mystring__str_ (a : __rep)
    requires { (variablestore__variables__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__variablestore__variables__mystring__str) }
    returns Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Variablestore__variables__mystring__T13s__rep.to_rep
                a.__split_fields.rec__variablestore__variables__mystring__length)
               = (Variablestore__variables__mystring__T13s__rep.to_rep
                    b.__split_fields.rec__variablestore__variables__mystring__length))
              /\
              (Variablestore__variables__mystringstr.bool_eq
                 a.__split_fields.rec__variablestore__variables__mystring__str
                 b.__split_fields.rec__variablestore__variables__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring
  
  use export Variablestore__variables__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type mystring  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   variablestore__variables__mystring__length__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__length__last__bit ()
    requires {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__length__position () requires
    {  } ensures  {  } returns int
  
  axiom variablestore__variables__mystring__length__first__bit_axiom : 
  ((variablestore__variables__mystring__length__first__bit ) >= 0)
  
  axiom variablestore__variables__mystring__length__last__bit_axiom : 
  ((variablestore__variables__mystring__length__last__bit )
     > (variablestore__variables__mystring__length__first__bit ))
  
  axiom variablestore__variables__mystring__length__position_axiom : 
  ((variablestore__variables__mystring__length__position ) >= 0)
  
  function   variablestore__variables__mystring__str__first__bit () requires
    {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__str__last__bit () requires
    {  } ensures  {  } returns int
  
  function   variablestore__variables__mystring__str__position () requires
    {  } ensures  {  } returns int
  
  axiom variablestore__variables__mystring__str__first__bit_axiom : ((variablestore__variables__mystring__str__first__bit
                                                                    ) >= 0)
  
  axiom variablestore__variables__mystring__str__last__bit_axiom : ((variablestore__variables__mystring__str__last__bit
                                                                    )
                                                                    > (
                                                                    variablestore__variables__mystring__str__first__bit
                                                                    ))
  
  axiom variablestore__variables__mystring__str__position_axiom : ((variablestore__variables__mystring__str__position
                                                                    ) >= 0)
  
  function   user_eq (a : mystring b : mystring) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns mystring
  
  type mystring__ref  = { mutable mystring__content : mystring }
  
  function   mystring__ref_mystring__content__projection (a : mystring__ref)
    requires {  } ensures  {  } returns mystring = a.mystring__content
  
  meta model_projection function mystring__ref_mystring__content__projection
  
  meta inline:no function mystring__ref_mystring__content__projection
  
  function   mystring__havoc (x : mystring__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining the constant "m" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__to_string__m
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring
  
  function [model_trace:45976] [model_projected] [name:M]
    [sloc:mystring.ads:8] m () requires {  } ensures  {  } returns
    Variablestore__variables__mystring.mystring

end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__length
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring
  
  function   length (m : Variablestore__variables__mystring.mystring)
    requires { True } ensures  { True } returns int
  
  function   length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_163) : int
    m : Variablestore__variables__mystring.mystring) requires { True }
    ensures  { True } returns bool

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Variablestore__variables__mystring
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_205) : Variablestore__variables__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___is_init_201) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_202) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_203) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_204) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_207) : Variablestore__variables__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_208) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Variablestore__variables__length___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural___axiom
  use        Variablestore__variables__mystring
  use        Variablestore__variables__length
  use        Variablestore__variables__mystring___axiom
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  
  function   length (m : Variablestore__variables__mystring.mystring)
    requires { True } ensures 
    { ((result = (Variablestore__variables__length.length m)) /\
         (Variablestore__variables__length.length__function_guard result m)
         /\
         ((Standard__natural___axiom.dynamic_invariant result True False True
             True) /\
            ((result
                = ( (Variablestore__variables__mystring__T13s__rep.to_rep
                       ( m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)))
               /\ ([GP_Pretty_Ada:46235] (result <= 1024))))) } returns int
  
  axiom length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom length__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__to_string__result
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  use        Array__Int__Standard__character
  
  val result__ [model_projected] [model_trace:65739]
  [name:Result] [sloc:mystring.adb:6]: Array__Int__Standard__character.map
  
  function [model_projected] [model_trace:65739'First] [name:Result]
    [sloc:mystring.adb:6] result____first () requires {  } ensures  {  }
    returns Standard__integer.integer
  
  function [model_projected] [name:Result] [model_trace:65739'Last]
    [sloc:mystring.adb:6] result____last () requires {  } ensures  {  }
    returns Standard__integer.integer

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tmystringstrD1  = <range 1 1024>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 1024
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = tmystringstrD1,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tmystringstrD1__ref  = { mutable tmystringstrD1__content : tmystringstrD1 }
  
  function   tmystringstrD1__ref_tmystringstrD1__content__projection
    (a : tmystringstrD1__ref) requires {  } ensures  {  } returns
    tmystringstrD1 = a.tmystringstrD1__content
  
  meta model_projection function tmystringstrD1__ref_tmystringstrD1__content__projection
  
  meta inline:no function tmystringstrD1__ref_tmystringstrD1__content__projection
  
  function   tmystringstrD1__havoc (x : tmystringstrD1__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__to_string__TresultS
  
  use export Standard__string
  use import _gnatprove_standard.Main
  use import int.Int
  
  type tresultS  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  type tresultS__ref  = { mutable tresultS__content : tresultS }
  
  function   tresultS__ref_tresultS__content__projection (a : tresultS__ref)
    requires {  } ensures  {  } returns tresultS = a.tresultS__content
  
  meta model_projection function tresultS__ref_tresultS__content__projection
  
  meta inline:no function tresultS__ref_tresultS__content__projection
  
  function   tresultS__havoc (x : tresultS__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrB
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  use        Variablestore__variables__TmystringstrD1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Variablestore__variables__TmystringstrD1.dynamic_property,
    predicate index_rep_le = <=
  
  type tmystringstrB  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type tmystringstrB__ref  = { mutable tmystringstrB__content : tmystringstrB }
  
  function   tmystringstrB__ref_tmystringstrB__content__projection
    (a : tmystringstrB__ref) requires {  } ensures  {  } returns
    tmystringstrB = a.tmystringstrB__content
  
  meta model_projection function tmystringstrB__ref_tmystringstrB__content__projection
  
  meta inline:no function tmystringstrB__ref_tmystringstrB__content__projection
  
  function   tmystringstrB__havoc (x : tmystringstrB__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for axiomatizing type "T311s" defined at mystring.adb:8 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__to_string__T311s
  
  use export Variablestore__variables__TmystringstrB
  use import _gnatprove_standard.Main
  use import int.Int
  
  type t311s  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  type t311s__ref  = { mutable t311s__content : t311s }
  
  function   t311s__ref_t311s__content__projection (a : t311s__ref) requires
    {  } ensures  {  } returns t311s = a.t311s__content
  
  meta model_projection function t311s__ref_t311s__content__projection
  
  meta inline:no function t311s__ref_t311s__content__projection
  
  function   t311s__havoc (x : t311s__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__to_string__TresultS___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Variablestore__variables__mystring
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  use        Variablestore__variables__to_string__TresultS
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_257) : Variablestore__variables__to_string__TresultS.tresultS
    ([mlw:proxy_symbol] [introduced] temp___is_init_253) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_254) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_255) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_256) : bool
    Variablestore__variables__to_string__m___m___ : Variablestore__variables__mystring.mystring)
    requires { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_254) then
       True  else
       (((Variablestore__variables__to_string__TresultS.dynamic_property 1
            (Variablestore__variables__mystring__T13s__rep.to_rep
               ( Variablestore__variables__to_string__m___m___).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)
            (Variablestore__variables__to_string__TresultS.first
               ([mlw:proxy_symbol] [introduced] temp___expr_257))
            (Variablestore__variables__to_string__TresultS.last
               ([mlw:proxy_symbol] [introduced] temp___expr_257))) /\
           ((Variablestore__variables__to_string__TresultS.first
               ([mlw:proxy_symbol] [introduced] temp___expr_257)) = 1)) /\
          ((Variablestore__variables__to_string__TresultS.last
              ([mlw:proxy_symbol] [introduced] temp___expr_257))
             = (Variablestore__variables__mystring__T13s__rep.to_rep
                  ( Variablestore__variables__to_string__m___m___).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))))
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_259) : Variablestore__variables__to_string__TresultS.tresultS
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_260) : bool
    Variablestore__variables__to_string__m___m___ : Variablestore__variables__mystring.mystring)
    requires { True } ensures  { True } returns
     = (True /\
          ((Variablestore__variables__to_string__TresultS.first
              ([mlw:proxy_symbol] [introduced] temp___expr_259)) = 1) /\
          ((Variablestore__variables__to_string__TresultS.last
              ([mlw:proxy_symbol] [introduced] temp___expr_259))
             = (Variablestore__variables__mystring__T13s__rep.to_rep
                  ( Variablestore__variables__to_string__m___m___).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)))

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystringstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_195) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_194) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_197) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_198) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__to_string__m___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrD1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring__T13s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__to_string__result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T311s" defined at mystring.adb:8 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__to_string__T311s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__to_string__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__positive
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__integer__rep
  use        Variablestore__variables__mystring
  use        Variablestore__variables__to_string__m
  use        Variablestore__variables__length
  use        Variablestore__variables__length___axiom
  use        Variablestore__variables__mystring___axiom
  use        Array__Int__Standard__character
  use        Variablestore__variables__to_string__result
  use        Variablestore__variables__mystring__T13s
  use        Variablestore__variables__mystring__T13s__rep
  use        Variablestore__variables__TmystringstrD1
  use        Variablestore__variables__to_string__TresultS
  use        Variablestore__variables__to_string__T311s
  use        Variablestore__variables__to_string__TresultS___axiom
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Variablestore__variables__mystringstr___axiom
  use        Variablestore__variables__mystring___axiom
  use        Variablestore__variables__to_string__m___axiom
  use        Variablestore__variables__length___axiom
  use        Variablestore__variables__TmystringstrD1___axiom
  use        Variablestore__variables__mystring__T13s___axiom
  use        Variablestore__variables__to_string__result___axiom
  use        Variablestore__variables__to_string__TresultS___axiom
  use        Variablestore__variables__to_string__T311s___axiom
  
  val variablestore__variables__to_string__result [name:To_String]
  [model_projected]
  [model_trace:45974@result] : Standard__string.string__
  
  function [GP_Subp:mystring.ads:8] [sloc:mystring.ads:8] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:mystring.ads:9] ([comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:variablestore.ads:11:4:VC_POSTCONDITION]
                             [GP_Reason:VC_POSTCONDITION]
                             [GP_Sloc:mystring.ads:9:14:instantiated:variablestore.ads:11:4]
                             [model_vc_post] [GP_Shape:pragargs__and]
                             [GP_Id:7] ((([GP_Sloc:mystring.ads:9:14:instantiated:variablestore.ads:11:4]
                                         [GP_Pretty_Ada:45953] ((Standard__string.length
                                                                   !variablestore__variables__to_string__result)
                                                                  = (epsilon ([mlw:proxy_symbol]
                                                                    [introduced] temp___result_328) : int {
                                                                    (
                                                                    (([mlw:proxy_symbol]
                                                                    [introduced] temp___result_328)
                                                                    = (Variablestore__variables__length.length
                                                                    ( Variablestore__variables__to_string__m.m)))
                                                                    /\
                                                                    (Variablestore__variables__length.length__function_guard
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___result_328)
                                                                    ( Variablestore__variables__to_string__m.m)))})))
                                           /\
                                           ([GP_Sloc:mystring.ads:10:14:instantiated:variablestore.ads:11:4]
                                           [GP_Pretty_Ada:45960] ((Standard__string.first
                                                                    !variablestore__variables__to_string__result)
                                                                    = 1))) /\
                                          ([GP_Sloc:mystring.ads:10:45:instantiated:variablestore.ads:11:4]
                                          [GP_Pretty_Ada:45965] ((Standard__string.last
                                                                    !variablestore__variables__to_string__result)
                                                                   = 
                                                                   (epsilon ([mlw:proxy_symbol]
                                                                   [introduced] temp___result_329) : int {
                                                                   ((([mlw:proxy_symbol]
                                                                    [introduced] temp___result_329)
                                                                    = (Variablestore__variables__length.length
                                                                    ( Variablestore__variables__to_string__m.m)))
                                                                    /\
                                                                    (Variablestore__variables__length.length__function_guard
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___result_329)
                                                                    ( Variablestore__variables__to_string__m.m)))})))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *);
        assume
        { (Variablestore__variables__mystring___axiom.dynamic_invariant
             Variablestore__variables__to_string__m.m True False True True) };
        (* Assume moved pointers in outputs of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *);
        (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *);
        (try
        ();
          ([sloc:mystring.adb:6] abstract ensures
          { True } begin  (let _ =
                         (Variablestore__variables__mystring__T13s__rep.to_rep
                            ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)
                         in ())  end;
          ([sloc:mystring.adb:6] ([comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                                    [vc:annotation]
                                    [GP_Sloc:mystring.adb:6:7:instantiated:variablestore.ads:11:4]
                                    [GP_Reason:VC_RANGE_CHECK] [GP_Id:1] any 
                                    pre
                                    {((1
                                         <= (Variablestore__variables__mystring__T13s__rep.to_rep
                                               ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))
                                        ->
                                        ((1 >= Standard__positive.first) /\
                                           ((Variablestore__variables__mystring__T13s__rep.to_rep
                                               ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)
                                              <= Standard__positive.last)))}
          post {True} return unit)));
        ([sloc:mystring.adb:6] assume
        { (Variablestore__variables__to_string__TresultS___axiom.default_initial_assumption
             (Variablestore__variables__to_string__TresultS.of_array
                !Variablestore__variables__to_string__result.result__
                (Standard__integer__rep.to_rep
                   Variablestore__variables__to_string__result.result____first)
                (Standard__integer__rep.to_rep
                   Variablestore__variables__to_string__result.result____last))
             False Variablestore__variables__to_string__m.m) };
        assume
        { (Variablestore__variables__to_string__TresultS___axiom.dynamic_invariant
             (Variablestore__variables__to_string__TresultS.of_array
                !Variablestore__variables__to_string__result.result__
                (Standard__integer__rep.to_rep
                   Variablestore__variables__to_string__result.result____first)
                (Standard__integer__rep.to_rep
                   Variablestore__variables__to_string__result.result____last))
             False False True True Variablestore__variables__to_string__m.m) });
        ();
        ([GP_Sloc:mystring.adb:8:7:instantiated:variablestore.ads:11:4] 
        ([sloc:mystring.adb:8] ()));
        ([GP_Sloc:mystring.adb:8:14:instantiated:variablestore.ads:11:4] 
        ([sloc:mystring.adb:8] (
        Variablestore__variables__to_string__result.result__ :=
        (Variablestore__variables__to_string__TresultS.to_array
           (let ([mlw:proxy_symbol] [introduced] temp___322) =
           (let ([mlw:proxy_symbol] [introduced] temp___320) =
             (let ([mlw:proxy_symbol] [introduced] temp___318) =
               (let ([mlw:proxy_symbol] [introduced] temp___316) =
                 (Variablestore__variables__mystring__T13s__rep.to_rep
                    ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)
                 in (let ([mlw:proxy_symbol] [introduced] temp___315) = 
                 1 in (let ([mlw:proxy_symbol] [introduced] temp___317) =
                 ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str
                 in
                 (Variablestore__variables__to_string__T311s.of_array assert
                    { ([sloc:mystring.adb:8] ([vc:annotation]
                                             [GP_Reason:VC_RANGE_CHECK]
                                             [GP_Shape:result_assign__typeconv__slice]
                                             [GP_Sloc:mystring.adb:8:25:instantiated:variablestore.ads:11:4]
                                             [comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                                             [GP_Id:2] ((([mlw:proxy_symbol]
                                                           [introduced] temp___315)
                                                           <= ([mlw:proxy_symbol]
                                                           [introduced] temp___316))
                                                          ->
                                                          (((Variablestore__variables__TmystringstrD1.first
                                                               <= ([mlw:proxy_symbol]
                                                               [introduced] temp___315))
                                                              /\
                                                              (([mlw:proxy_symbol]
                                                                 [introduced] temp___315)
                                                                 <= Variablestore__variables__TmystringstrD1.last))
                                                             /\
                                                             ((Variablestore__variables__TmystringstrD1.first
                                                                 <= ([mlw:proxy_symbol]
                                                                 [introduced] temp___316))
                                                                /\
                                                                (([mlw:proxy_symbol]
                                                                   [introduced] temp___316)
                                                                   <= Variablestore__variables__TmystringstrD1.last)))))) };
                    ([mlw:proxy_symbol] [introduced] temp___317)
                    ([mlw:proxy_symbol] [introduced] temp___315)
                    ([mlw:proxy_symbol] [introduced] temp___316))))) in
               (let ([mlw:proxy_symbol] [introduced] temp___319) =
               ( (Variablestore__variables__to_string__T311s.to_array
                    ([mlw:proxy_symbol] [introduced] temp___318))) in assert
               { ([sloc:mystring.adb:8] ([vc:annotation]
                                        [GP_Reason:VC_RANGE_CHECK]
                                        [GP_Shape:result_assign__typeconv__slice]
                                        [GP_Sloc:mystring.adb:8:25:instantiated:variablestore.ads:11:4]
                                        [comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                                        [GP_Id:3] (Standard__string.dynamic_property
                                                     Standard__positive.first
                                                     Standard__positive.last
                                                     (Variablestore__variables__to_string__T311s.first
                                                        ([mlw:proxy_symbol]
                                                        [introduced] temp___318))
                                                     (Variablestore__variables__to_string__T311s.last
                                                        ([mlw:proxy_symbol]
                                                        [introduced] temp___318))))) };
               (Standard__string.of_array ([mlw:proxy_symbol]
                  [introduced] temp___319)
                  (Variablestore__variables__to_string__T311s.first
                     ([mlw:proxy_symbol] [introduced] temp___318))
                  (Variablestore__variables__to_string__T311s.last
                     ([mlw:proxy_symbol] [introduced] temp___318))))) in
             (let ([mlw:proxy_symbol] [introduced] temp___321) =
             ( (Array__Int__Standard__character.slide
                  (Standard__string.to_array ([mlw:proxy_symbol]
                     [introduced] temp___320))
                  (Standard__string.first ([mlw:proxy_symbol]
                     [introduced] temp___320)) 1)) in assert
             { ([sloc:mystring.adb:8] ([GP_Sloc:mystring.adb:8:17:instantiated:variablestore.ads:11:4]
                                      [vc:annotation]
                                      [GP_Shape:result_assign__typeconv]
                                      [comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:variablestore.ads:11:4:VC_LENGTH_CHECK]
                                      [GP_Id:4]
                                      [GP_Reason:VC_LENGTH_CHECK] (True /\
                                                                    (if
                                                                    (
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___320))
                                                                    <= (
                                                                    Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___320)))
                                                                    then
                                                                    (
                                                                    (1
                                                                    <= (
                                                                    Variablestore__variables__mystring__T13s__rep.to_rep
                                                                    ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))
                                                                    /\
                                                                    (((Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___320))
                                                                    - (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___320)))
                                                                    = ((Variablestore__variables__mystring__T13s__rep.to_rep
                                                                    ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)
                                                                    - 1))) 
                                                                    else
                                                                    (
                                                                    (Variablestore__variables__mystring__T13s__rep.to_rep
                                                                    ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)
                                                                    < 1))))) };
             (Variablestore__variables__to_string__TresultS.of_array
                ([mlw:proxy_symbol] [introduced] temp___321) 1
                (Variablestore__variables__mystring__T13s__rep.to_rep
                   ( Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))))
           in (let ([mlw:proxy_symbol] [introduced] temp___323) =
           (Variablestore__variables__to_string__TresultS.of_array
              !Variablestore__variables__to_string__result.result__
              (Standard__integer__rep.to_rep
                 Variablestore__variables__to_string__result.result____first)
              (Standard__integer__rep.to_rep
                 Variablestore__variables__to_string__result.result____last))
           in assert
           { ([sloc:mystring.adb:8] ([comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:variablestore.ads:11:4:VC_LENGTH_CHECK]
                                    [vc:annotation] [GP_Shape:result_assign]
                                    [GP_Sloc:mystring.adb:8:14:instantiated:variablestore.ads:11:4]
                                    [GP_Id:5]
                                    [GP_Reason:VC_LENGTH_CHECK] (True /\
                                                                   (if
                                                                   ((Variablestore__variables__to_string__TresultS.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___322))
                                                                    <= (
                                                                    Variablestore__variables__to_string__TresultS.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___322)))
                                                                   then
                                                                   (((Variablestore__variables__to_string__TresultS.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___323))
                                                                    <= (
                                                                    Variablestore__variables__to_string__TresultS.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___323)))
                                                                    /\
                                                                    (((Variablestore__variables__to_string__TresultS.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___322))
                                                                    - (Variablestore__variables__to_string__TresultS.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___322)))
                                                                    = ((Variablestore__variables__to_string__TresultS.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___323))
                                                                    - (Variablestore__variables__to_string__TresultS.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___323)))))
                                                                    else
                                                                   ((Variablestore__variables__to_string__TresultS.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___323))
                                                                    < (
                                                                    Variablestore__variables__to_string__TresultS.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___323))))))) };
           ([mlw:proxy_symbol] [introduced] temp___322)))))));
        ([GP_Sloc:mystring.adb:9:14:instantiated:variablestore.ads:11:4] 
        ([sloc:mystring.adb:9] ()));
        ([GP_Sloc:mystring.adb:9:7:instantiated:variablestore.ads:11:4] 
        ([sloc:mystring.adb:9] ( variablestore__variables__to_string__result
        :=
        (let ([mlw:proxy_symbol] [introduced] temp___324) =
          (Variablestore__variables__to_string__TresultS.of_array
             !Variablestore__variables__to_string__result.result__
             (Standard__integer__rep.to_rep
                Variablestore__variables__to_string__result.result____first)
             (Standard__integer__rep.to_rep
                Variablestore__variables__to_string__result.result____last))
          in (let ([mlw:proxy_symbol] [introduced] temp___325) =
          ( (Variablestore__variables__to_string__TresultS.to_array
               ([mlw:proxy_symbol] [introduced] temp___324))) in
          (Standard__string.of_array ([mlw:proxy_symbol]
             [introduced] temp___325)
             (Variablestore__variables__to_string__TresultS.first
                ([mlw:proxy_symbol] [introduced] temp___324))
             (Variablestore__variables__to_string__TresultS.last
                ([mlw:proxy_symbol] [introduced] temp___324))))));
        raise Return__exc));
        raise Return__exc with | Return__exc  -> ());
    abstract ensures
    { True } begin  (let _ =
                   (_gnatprove_standard.Boolean.andb
                      (_gnatprove_standard.Boolean.andb
                         (([sloc:mystring.ads:9] ([GP_Shape:pragargs__and__and__cmp__typeconv__length_ref]
                                                 [GP_Sloc:mystring.ads:9:30:instantiated:variablestore.ads:11:4]
                                                 [vc:annotation]
                                                 [GP_Reason:VC_RANGE_CHECK]
                                                 [comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                                                 [GP_Id:6] (Standard__integer.range_check_
                                                              abstract
                                                              ensures
                                                              { True } begin 
                                                               (let _ =
                                                              !variablestore__variables__to_string__result
                                                              in ())  end;
                                                              (Standard__string.length
                                                                 !variablestore__variables__to_string__result))))
                            = (Variablestore__variables__length___axiom.length
                                 ( Variablestore__variables__to_string__m.m)))
                         (abstract ensures
                            { True } begin  (let _ =
                                           !variablestore__variables__to_string__result
                                           in ())  end;
                            (Standard__string.first
                               !variablestore__variables__to_string__result)
                            = 1))
                      (abstract ensures
                         { True } begin  (let _ =
                                        !variablestore__variables__to_string__result
                                        in ())  end;
                         (Standard__string.last
                            !variablestore__variables__to_string__result)
                         = (Variablestore__variables__length___axiom.length
                              ( Variablestore__variables__to_string__m.m))))
                   in ())  end;
    !variablestore__variables__to_string__result

end
