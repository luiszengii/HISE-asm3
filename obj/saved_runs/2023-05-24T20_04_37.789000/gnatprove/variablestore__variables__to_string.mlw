module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Variablestore__variables__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t13s = <range 0 1024>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1024 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t13s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t13s__ref = { mutable t13s__content : t13s }
  
  function t13s__ref_t13s__content__projection (a: t13s__ref) : t13s =
    a.t13s__content
  
  meta "model_projection" function t13s__ref_t13s__content__projection
  
  meta "inline:no" function t13s__ref_t13s__content__projection
  
  val t13s__havoc (x: t13s__ref) : unit
    writes { x }
end

module Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Variablestore__variables__mystring__T13s.t13s) : int =
    Variablestore__variables__mystring__T13s.t13s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Variablestore__variables__mystring__T13s.t13s,
    predicate in_range = Variablestore__variables__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Variablestore__variables__mystringstr
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type component_type = Standard__character.character
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (1024 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Variablestore__variables__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__mystringstr as Variablestore__variables__mystringstr
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type __split_fields = {
                       rec__variablestore__variables__mystring__length :
                         Variablestore__variables__mystring__T13s.t13s;
                       rec__variablestore__variables__mystring__str :
                         Array__Int__Standard__character.map
                       }
  
  function __split_fields_rec__variablestore__variables__mystring__length__projection (a: __split_fields) : 
    Variablestore__variables__mystring__T13s.t13s =
    a.rec__variablestore__variables__mystring__length
  
  meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__length__projection
  
  function __split_fields_rec__variablestore__variables__mystring__str__projection (a: __split_fields) : 
    Array__Int__Standard__character.map =
    a.rec__variablestore__variables__mystring__str
  
  meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__str__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate variablestore__variables__mystring__length__pred (a: __rep) =
    true
  
  val variablestore__variables__mystring__length__pred (a: __rep) : bool
    ensures { result
                <->
                (variablestore__variables__mystring__length__pred (a : __rep)) }
  
  val rec__variablestore__variables__mystring__length_ (a: __rep) : Variablestore__variables__mystring__T13s.t13s
    requires { variablestore__variables__mystring__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__variablestore__variables__mystring__length)) }
  
  predicate variablestore__variables__mystring__str__pred (a: __rep) = true
  
  val variablestore__variables__mystring__str__pred (a: __rep) : bool
    ensures { result
                <->
                (variablestore__variables__mystring__str__pred (a : __rep)) }
  
  val rec__variablestore__variables__mystring__str_ (a: __rep) : Array__Int__Standard__character.map
    requires { variablestore__variables__mystring__str__pred a }
    ensures { (result
                 = ((__split_fields a).rec__variablestore__variables__mystring__str)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Variablestore__variables__mystring__T13s__rep.to_rep
            ((__split_fields a).rec__variablestore__variables__mystring__length))
           = (Variablestore__variables__mystring__T13s__rep.to_rep
                ((__split_fields b).rec__variablestore__variables__mystring__length))) /\
          ((Variablestore__variables__mystringstr.bool_eq
              ((__split_fields a).rec__variablestore__variables__mystring__str))
             ((__split_fields b).rec__variablestore__variables__mystring__str))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Variablestore__variables__mystring
  use export Variablestore__variables__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type mystring = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function variablestore__variables__mystring__length__first__bit : 
    int
  
  val function variablestore__variables__mystring__length__last__bit : 
    int
  
  val function variablestore__variables__mystring__length__position : 
    int
  
  axiom variablestore__variables__mystring__length__first__bit_axiom:
    (variablestore__variables__mystring__length__first__bit >= (0 : int))
  
  axiom variablestore__variables__mystring__length__last__bit_axiom:
    (variablestore__variables__mystring__length__last__bit
       > variablestore__variables__mystring__length__first__bit)
  
  axiom variablestore__variables__mystring__length__position_axiom:
    (variablestore__variables__mystring__length__position >= (0 : int))
  
  val function variablestore__variables__mystring__str__first__bit : 
    int
  
  val function variablestore__variables__mystring__str__last__bit : int
  
  val function variablestore__variables__mystring__str__position : int
  
  axiom variablestore__variables__mystring__str__first__bit_axiom:
    (variablestore__variables__mystring__str__first__bit >= (0 : int))
  
  axiom variablestore__variables__mystring__str__last__bit_axiom:
    (variablestore__variables__mystring__str__last__bit
       > variablestore__variables__mystring__str__first__bit)
  
  axiom variablestore__variables__mystring__str__position_axiom:
    (variablestore__variables__mystring__str__position >= (0 : int))
  
  val function user_eq (a: mystring) (b: mystring) : bool
  
  val function dummy : mystring
  
  type mystring__ref = { mutable mystring__content : mystring }
  
  function mystring__ref_mystring__content__projection (a: mystring__ref) : mystring =
    a.mystring__content
  
  meta "model_projection" function mystring__ref_mystring__content__projection
  
  meta "inline:no" function mystring__ref_mystring__content__projection
  
  val mystring__havoc (x: mystring__ref) : unit
    writes { x }
end

module Variablestore__variables__to_string__m
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variables__mystring as Variablestore__variables__mystring
  
  val function m : Variablestore__variables__mystring.mystring
end

module Variablestore__variables__length
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variables__mystring as Variablestore__variables__mystring
  
  val function length (m: Variablestore__variables__mystring.mystring) : 
    int
  
  val predicate length__function_guard (temp___result_163: int) (m: Variablestore__variables__mystring.mystring)
end

module Standard__natural
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type natural = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = natural,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type natural__ref = { mutable natural__content : natural }
  
  function natural__ref_natural__content__projection (a: natural__ref) : natural =
    a.natural__content
  
  meta "model_projection" function natural__ref_natural__content__projection
  
  meta "inline:no" function natural__ref_natural__content__projection
  
  val natural__havoc (x: natural__ref) : unit
    writes { x }
end

module Standard__natural___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural as Standard__natural
  
  predicate dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) =
    if ((temp___is_init_42 = True) \/
          (Standard__natural.first <= Standard__natural.last)) then
      (((Standard__natural.dynamic_property Standard__natural.first)
          Standard__natural.last)
         temp___expr_46)
    else true
  
  val dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_46 : int))
                      (temp___is_init_42 : bool))
                     (temp___skip_constant_43 : bool))
                    (temp___do_toplevel_44 : bool))
                   (temp___do_typ_inv_45 : bool)) }
  
  predicate default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) =
    true
  
  val default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_47 : int))
                   (temp___skip_top_level_48 : bool)) }
end

module Variablestore__variables__mystring___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Variablestore__variables__mystring as Variablestore__variables__mystring
  
  predicate dynamic_invariant (temp___expr_205: Variablestore__variables__mystring.mystring) (temp___is_init_201: bool) (temp___skip_constant_202: bool) (temp___do_toplevel_203: bool) (temp___do_typ_inv_204: bool) =
    true
  
  val dynamic_invariant (temp___expr_205: Variablestore__variables__mystring.mystring) (temp___is_init_201: bool) (temp___skip_constant_202: bool) (temp___do_toplevel_203: bool) (temp___do_typ_inv_204: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_205 :
                          Variablestore__variables__mystring.mystring))
                      (temp___is_init_201 : bool))
                     (temp___skip_constant_202 : bool))
                    (temp___do_toplevel_203 : bool))
                   (temp___do_typ_inv_204 : bool)) }
  
  predicate default_initial_assumption (temp___expr_207: Variablestore__variables__mystring.mystring) (temp___skip_top_level_208: bool) =
    true
  
  val default_initial_assumption (temp___expr_207: Variablestore__variables__mystring.mystring) (temp___skip_top_level_208: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_207 :
                       Variablestore__variables__mystring.mystring))
                   (temp___skip_top_level_208 : bool)) }
end

module Variablestore__variables__length___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural___axiom as Standard__natural___axiom
  use Variablestore__variables__mystring as Variablestore__variables__mystring
  use Variablestore__variables__length as Variablestore__variables__length
  use Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
  
  val length (m: Variablestore__variables__mystring.mystring) : int
    requires { true }
    ensures { (((result = (Variablestore__variables__length.length m)) /\
                  ((Variablestore__variables__length.length__function_guard
                      result)
                     m)) /\
                 ((((((Standard__natural___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    ((result
                        = (Variablestore__variables__mystring__T13s__rep.to_rep
                             ((Variablestore__variables__mystring.__split_fields
                                  m).Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) /\
                       ([@GP_Pretty_Ada:46235] (result <= (1024 : int)))))) }
  
  axiom length__post_axiom:
    forall m : Variablestore__variables__mystring.mystring
          [Variablestore__variables__length.length m].
      ((((((Variablestore__variables__mystring___axiom.dynamic_invariant m)
             True)
            True)
           True)
          True) ->
         (let result = Variablestore__variables__length.length m in
          if ((Variablestore__variables__length.length__function_guard result)
                m) then
            ((([@GP_Pretty_Ada:46235] (result <= (1024 : int))) /\
                (((((Standard__natural___axiom.dynamic_invariant result) True)
                     False)
                    True)
                   True)) /\
               true)
          else true))
  
  axiom length__def_axiom:
    forall m : Variablestore__variables__mystring.mystring
          [Variablestore__variables__length.length m].
      ((((((Variablestore__variables__mystring___axiom.dynamic_invariant m)
             True)
            True)
           True)
          True) ->
         ((Variablestore__variables__length.length m)
            = (Variablestore__variables__mystring__T13s__rep.to_rep
                 ((Variablestore__variables__mystring.__split_fields m).
                    Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))))
end

module Variablestore__variables__to_string__result
  use _gnatprove_standard.Main
  use int.Int
  use Standard__integer as Standard__integer
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val result__ : Array__Int__Standard__character.map__ref
  
  val function result____first : Standard__integer.integer
  
  val function result____last : Standard__integer.integer
end

module Variablestore__variables__TmystringstrD1
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tmystringstrD1 = <range 1 1024>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (1024 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = tmystringstrD1,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type tmystringstrD1__ref = {
                            mutable tmystringstrD1__content : tmystringstrD1
                            }
  
  function tmystringstrD1__ref_tmystringstrD1__content__projection (a: tmystringstrD1__ref) : tmystringstrD1 =
    a.tmystringstrD1__content
  
  meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
  
  meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
  
  val tmystringstrD1__havoc (x: tmystringstrD1__ref) : unit
    writes { x }
end

module Variablestore__variables__to_string__TresultS
  use export Standard__string
  use _gnatprove_standard.Main
  use int.Int
  
  type tresultS = string__
  
  type tresultS__ref = { mutable tresultS__content : tresultS }
  
  function tresultS__ref_tresultS__content__projection (a: tresultS__ref) : tresultS =
    a.tresultS__content
  
  meta "model_projection" function tresultS__ref_tresultS__content__projection
  
  meta "inline:no" function tresultS__ref_tresultS__content__projection
  
  val tresultS__havoc (x: tresultS__ref) : unit
    writes { x }
end

module Variablestore__variables__TmystringstrB
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  use Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Variablestore__variables__TmystringstrD1.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type tmystringstrB = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type tmystringstrB__ref = {
                           mutable tmystringstrB__content : tmystringstrB
                           }
  
  function tmystringstrB__ref_tmystringstrB__content__projection (a: tmystringstrB__ref) : tmystringstrB =
    a.tmystringstrB__content
  
  meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
  
  meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
  
  val tmystringstrB__havoc (x: tmystringstrB__ref) : unit
    writes { x }
end

module Variablestore__variables__to_string__T311s
  use export Variablestore__variables__TmystringstrB
  use _gnatprove_standard.Main
  use int.Int
  
  type t311s = tmystringstrB
  
  type t311s__ref = { mutable t311s__content : t311s }
  
  function t311s__ref_t311s__content__projection (a: t311s__ref) : t311s =
    a.t311s__content
  
  meta "model_projection" function t311s__ref_t311s__content__projection
  
  meta "inline:no" function t311s__ref_t311s__content__projection
  
  val t311s__havoc (x: t311s__ref) : unit
    writes { x }
end

module Variablestore__variables__to_string__TresultS___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Variablestore__variables__mystring as Variablestore__variables__mystring
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__to_string__TresultS as Variablestore__variables__to_string__TresultS
  
  predicate dynamic_invariant (temp___expr_257: Variablestore__variables__to_string__TresultS.tresultS) (temp___is_init_253: bool) (temp___skip_constant_254: bool) (temp___do_toplevel_255: bool) (temp___do_typ_inv_256: bool) (Variablestore__variables__to_string__m___m___: 
    Variablestore__variables__mystring.mystring) =
    if temp___skip_constant_254 then true
    else
      ((((((Variablestore__variables__to_string__TresultS.dynamic_property
              (1 : int))
             (Variablestore__variables__mystring__T13s__rep.to_rep
                ((Variablestore__variables__mystring.__split_fields
                     Variablestore__variables__to_string__m___m___).Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)))
            (Variablestore__variables__to_string__TresultS.first
               temp___expr_257))
           (Variablestore__variables__to_string__TresultS.last
              temp___expr_257)) /\
          ((Variablestore__variables__to_string__TresultS.first
              temp___expr_257)
             = (1 : int))) /\
         ((Variablestore__variables__to_string__TresultS.last temp___expr_257)
            = (Variablestore__variables__mystring__T13s__rep.to_rep
                 ((Variablestore__variables__mystring.__split_fields
                      Variablestore__variables__to_string__m___m___).
                    Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))))
  
  val dynamic_invariant (temp___expr_257: Variablestore__variables__to_string__TresultS.tresultS) (temp___is_init_253: bool) (temp___skip_constant_254: bool) (temp___do_toplevel_255: bool) (temp___do_typ_inv_256: bool) (Variablestore__variables__to_string__m___m___: 
    Variablestore__variables__mystring.mystring) : bool
    ensures { result
                <->
                ((((((dynamic_invariant
                        (temp___expr_257 :
                           Variablestore__variables__to_string__TresultS.tresultS))
                       (temp___is_init_253 : bool))
                      (temp___skip_constant_254 : bool))
                     (temp___do_toplevel_255 : bool))
                    (temp___do_typ_inv_256 : bool))
                   (Variablestore__variables__to_string__m___m___ :
                      Variablestore__variables__mystring.mystring)) }
  
  predicate default_initial_assumption (temp___expr_259: Variablestore__variables__to_string__TresultS.tresultS) (temp___skip_top_level_260: bool) (Variablestore__variables__to_string__m___m___: 
    Variablestore__variables__mystring.mystring) =
    ((true /\
        ((Variablestore__variables__to_string__TresultS.first temp___expr_259)
           = (1 : int))) /\
       ((Variablestore__variables__to_string__TresultS.last temp___expr_259)
          = (Variablestore__variables__mystring__T13s__rep.to_rep
               ((Variablestore__variables__mystring.__split_fields
                    Variablestore__variables__to_string__m___m___).Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))))
  
  val default_initial_assumption (temp___expr_259: Variablestore__variables__to_string__TresultS.tresultS) (temp___skip_top_level_260: bool) (Variablestore__variables__to_string__m___m___: 
    Variablestore__variables__mystring.mystring) : bool
    ensures { result
                <->
                (((default_initial_assumption
                     (temp___expr_259 :
                        Variablestore__variables__to_string__TresultS.tresultS))
                    (temp___skip_top_level_260 : bool))
                   (Variablestore__variables__to_string__m___m___ :
                      Variablestore__variables__mystring.mystring)) }
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Variablestore__variables__mystringstr___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  predicate dynamic_invariant (temp___expr_195: Array__Int__Standard__character.map) (temp___is_init_191: bool) (temp___skip_constant_192: bool) (temp___do_toplevel_193: bool) (temp___do_typ_inv_194: bool) =
    true
  
  val dynamic_invariant (temp___expr_195: Array__Int__Standard__character.map) (temp___is_init_191: bool) (temp___skip_constant_192: bool) (temp___do_toplevel_193: bool) (temp___do_typ_inv_194: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_195 : Array__Int__Standard__character.map))
                      (temp___is_init_191 : bool))
                     (temp___skip_constant_192 : bool))
                    (temp___do_toplevel_193 : bool))
                   (temp___do_typ_inv_194 : bool)) }
  
  predicate default_initial_assumption (temp___expr_197: Array__Int__Standard__character.map) (temp___skip_top_level_198: bool) =
    true
  
  val default_initial_assumption (temp___expr_197: Array__Int__Standard__character.map) (temp___skip_top_level_198: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_197 : Array__Int__Standard__character.map))
                   (temp___skip_top_level_198 : bool)) }
end

module Variablestore__variables__to_string__m___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Variablestore__variables__TmystringstrD1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Variablestore__variables__mystring__T13s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Variablestore__variables__to_string__result___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Variablestore__variables__to_string__T311s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Variablestore__variables__to_string__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__integer__rep as Standard__integer__rep
  use Variablestore__variables__mystring as Variablestore__variables__mystring
  use Variablestore__variables__to_string__m as Variablestore__variables__to_string__m
  use Variablestore__variables__length as Variablestore__variables__length
  use Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
  use Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Variablestore__variables__to_string__result as Variablestore__variables__to_string__result
  use Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
  use Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
  use Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
  use Variablestore__variables__to_string__TresultS as Variablestore__variables__to_string__TresultS
  use Variablestore__variables__to_string__T311s as Variablestore__variables__to_string__T311s
  use Variablestore__variables__to_string__TresultS___axiom as Variablestore__variables__to_string__TresultS___axiom
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
  use Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
  use Variablestore__variables__to_string__m___axiom as Variablestore__variables__to_string__m___axiom
  use Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
  use Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
  use Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom
  use Variablestore__variables__to_string__result___axiom as Variablestore__variables__to_string__result___axiom
  use Variablestore__variables__to_string__TresultS___axiom as Variablestore__variables__to_string__TresultS___axiom
  use Variablestore__variables__to_string__T311s___axiom as Variablestore__variables__to_string__T311s___axiom
  
  val variablestore__variables__to_string__result : Standard__string.string____ref
  
  let def (__void_param : unit)
    requires { [#"mystring.ads" 8 0 0] true }
    ensures { [#"mystring.ads" 8 0 0]
              [#"mystring.ads" 9 0 0]
              [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:variablestore.ads:11:4:VC_POSTCONDITION]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:mystring.ads:9:14:instantiated:variablestore.ads:11:4]
              [@model_vc_post]
              [@GP_Shape:pragargs__and]
              [@GP_Id:7]
              ((([@GP_Sloc:mystring.ads:9:14:instantiated:variablestore.ads:11:4]
                 [@GP_Pretty_Ada:45953]
                 ((Standard__string.length
                     (variablestore__variables__to_string__result.Standard__string.string____content))
                    = (epsilon temp___result_328: int.
                         ((temp___result_328
                             = (Variablestore__variables__length.length
                                  Variablestore__variables__to_string__m.m)) /\
                            ((Variablestore__variables__length.length__function_guard
                                temp___result_328)
                               Variablestore__variables__to_string__m.m))))) /\
                  ([@GP_Sloc:mystring.ads:10:14:instantiated:variablestore.ads:11:4]
                   [@GP_Pretty_Ada:45960]
                   ((Standard__string.first
                       (variablestore__variables__to_string__result.Standard__string.string____content))
                      = (1 : int)))) /\
                 ([@GP_Sloc:mystring.ads:10:45:instantiated:variablestore.ads:11:4]
                  [@GP_Pretty_Ada:45965]
                  ((Standard__string.last
                      (variablestore__variables__to_string__result.Standard__string.string____content))
                     = (epsilon temp___result_329: int.
                          ((temp___result_329
                              = (Variablestore__variables__length.length
                                   Variablestore__variables__to_string__m.m)) /\
                             ((Variablestore__variables__length.length__function_guard
                                 temp___result_329)
                                Variablestore__variables__to_string__m.m)))))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at variablestore.ads:11]
      ());
     assume {
       ((((Variablestore__variables__mystring___axiom.dynamic_invariant
             Variablestore__variables__to_string__m.m)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram mystring.ads:8 instantiated at variablestore.ads:11]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at variablestore.ads:11]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram mystring.ads:8 instantiated at variablestore.ads:11]
      ());
     (try
        ([#"mystring.adb" 6 0 0]
         (([#"mystring.adb" 6 0 0]
           (begin
              ensures { true }
              let _ =
                let _ =
                  Variablestore__variables__mystring__T13s__rep.to_rep
                    ((Variablestore__variables__mystring.__split_fields
                         Variablestore__variables__to_string__m.m).Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) in
                () in
              ()
            end));
          ([#"mystring.adb" 6 0 0]
           [#"mystring.adb" 6 0 0]
           (val _f : unit
              requires { [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                         [@vc:annotation]
                         [@GP_Sloc:mystring.adb:6:7:instantiated:variablestore.ads:11:4]
                         [@GP_Reason:VC_RANGE_CHECK]
                         [@GP_Id:1]
                         [#"mystring.adb" 6 0 0]
                         (((1 : int)
                             <= (Variablestore__variables__mystring__T13s__rep.to_rep
                                   ((Variablestore__variables__mystring.__split_fields
                                        Variablestore__variables__to_string__m.m).
                                      Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) ->
                            (((1 : int) >= Standard__positive.first) /\
                               ((Variablestore__variables__mystring__T13s__rep.to_rep
                                   ((Variablestore__variables__mystring.__split_fields
                                        Variablestore__variables__to_string__m.m).
                                      Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))
                                  <= Standard__positive.last)))
              }
              ensures { [#"mystring.adb" 6 0 0] true } in
            _f))));
        ([#"mystring.adb" 6 0 0]
         (([#"mystring.adb" 6 0 0]
           assume {
             [#"mystring.adb" 6 0 0]
             (((Variablestore__variables__to_string__TresultS___axiom.default_initial_assumption
                  (((Variablestore__variables__to_string__TresultS.of_array
                       (Variablestore__variables__to_string__result.result__.
                          Array__Int__Standard__character.map__content))
                      (Standard__integer__rep.to_rep
                         Variablestore__variables__to_string__result.result____first))
                     (Standard__integer__rep.to_rep
                        Variablestore__variables__to_string__result.result____last)))
                 False)
                Variablestore__variables__to_string__m.m) });
          ([#"mystring.adb" 6 0 0]
           assume {
             [#"mystring.adb" 6 0 0]
             ((((((Variablestore__variables__to_string__TresultS___axiom.dynamic_invariant
                     (((Variablestore__variables__to_string__TresultS.of_array
                          (Variablestore__variables__to_string__result.result__.
                             Array__Int__Standard__character.map__content))
                         (Standard__integer__rep.to_rep
                            Variablestore__variables__to_string__result.result____first))
                        (Standard__integer__rep.to_rep
                           Variablestore__variables__to_string__result.result____last)))
                    False)
                   False)
                  True)
                 True)
                Variablestore__variables__to_string__m.m) })));
        ([@GP_Sloc:mystring.adb:8:7:instantiated:variablestore.ads:11:4]
         [#"mystring.adb" 8 0 0] ());
        ([@GP_Sloc:mystring.adb:8:14:instantiated:variablestore.ads:11:4]
         [#"mystring.adb" 8 0 0]
         [#"mystring.adb" 8 0 0]
         (Variablestore__variables__to_string__result.result__.Array__Int__Standard__character.map__content <-
            (Variablestore__variables__to_string__TresultS.to_array
               (let temp___322 =
                  let temp___320 =
                    let temp___318 =
                      let temp___316 =
                        Variablestore__variables__mystring__T13s__rep.to_rep
                          ((Variablestore__variables__mystring.__split_fields
                               Variablestore__variables__to_string__m.m).
                             Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) in
                      let temp___315 = 1 : int in
                      let temp___317 =
                        (Variablestore__variables__mystring.__split_fields
                            Variablestore__variables__to_string__m.m).
                          Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in
                      ((Variablestore__variables__to_string__T311s.of_array
                          (([#"mystring.adb" 8 0 0]
                            assert {
                              [#"mystring.adb" 8 0 0]
                              [#"mystring.adb" 8 0 0]
                              [@vc:annotation]
                              [@GP_Reason:VC_RANGE_CHECK]
                              [@GP_Shape:result_assign__typeconv__slice]
                              [@GP_Sloc:mystring.adb:8:25:instantiated:variablestore.ads:11:4]
                              [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                              [@GP_Id:2]
                              ((temp___315 <= temp___316) ->
                                 (((Variablestore__variables__TmystringstrD1.first
                                      <= temp___315) /\
                                     (temp___315
                                        <= Variablestore__variables__TmystringstrD1.last)) /\
                                    ((Variablestore__variables__TmystringstrD1.first
                                        <= temp___316) /\
                                       (temp___316
                                          <= Variablestore__variables__TmystringstrD1.last)))) });
                           temp___317))
                         temp___315)
                        temp___316 in
                    let temp___319 =
                      Variablestore__variables__to_string__T311s.to_array
                        temp___318 in
                    assert {
                      [#"mystring.adb" 8 0 0]
                      [@vc:annotation]
                      [@GP_Reason:VC_RANGE_CHECK]
                      [@GP_Shape:result_assign__typeconv__slice]
                      [@GP_Sloc:mystring.adb:8:25:instantiated:variablestore.ads:11:4]
                      [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                      [@GP_Id:3]
                      ((((Standard__string.dynamic_property
                            Standard__positive.first)
                           Standard__positive.last)
                          (Variablestore__variables__to_string__T311s.first
                             temp___318))
                         (Variablestore__variables__to_string__T311s.last
                            temp___318)) };
                    (((Standard__string.of_array temp___319)
                        (Variablestore__variables__to_string__T311s.first
                           temp___318))
                       (Variablestore__variables__to_string__T311s.last
                          temp___318)) in
                  let temp___321 =
                    ((Array__Int__Standard__character.slide
                        (Standard__string.to_array temp___320))
                       (Standard__string.first temp___320))
                      (1 : int) in
                  assert {
                    [#"mystring.adb" 8 0 0]
                    [@GP_Sloc:mystring.adb:8:17:instantiated:variablestore.ads:11:4]
                    [@vc:annotation]
                    [@GP_Shape:result_assign__typeconv]
                    [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:variablestore.ads:11:4:VC_LENGTH_CHECK]
                    [@GP_Id:4]
                    [@GP_Reason:VC_LENGTH_CHECK]
                    (true /\
                       (if ((Standard__string.first temp___320)
                              <= (Standard__string.last temp___320)) then
                          (((1 : int)
                              <= (Variablestore__variables__mystring__T13s__rep.to_rep
                                    ((Variablestore__variables__mystring.__split_fields
                                         Variablestore__variables__to_string__m.m).
                                       Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) /\
                             (((Standard__string.last temp___320)
                                 - (Standard__string.first temp___320))
                                = ((Variablestore__variables__mystring__T13s__rep.to_rep
                                      ((Variablestore__variables__mystring.__split_fields
                                           Variablestore__variables__to_string__m.m).
                                         Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))
                                     - (1 : int))))
                        else
                          ((Variablestore__variables__mystring__T13s__rep.to_rep
                              ((Variablestore__variables__mystring.__split_fields
                                   Variablestore__variables__to_string__m.m).
                                 Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))
                             < (1 : int)))) };
                  (((Variablestore__variables__to_string__TresultS.of_array
                       temp___321)
                      (1 : int))
                     (Variablestore__variables__mystring__T13s__rep.to_rep
                        ((Variablestore__variables__mystring.__split_fields
                             Variablestore__variables__to_string__m.m).
                           Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) in
                let temp___323 =
                  ((Variablestore__variables__to_string__TresultS.of_array
                      (Variablestore__variables__to_string__result.result__.
                         Array__Int__Standard__character.map__content))
                     (Standard__integer__rep.to_rep
                        Variablestore__variables__to_string__result.result____first))
                    (Standard__integer__rep.to_rep
                       Variablestore__variables__to_string__result.result____last) in
                assert {
                  [#"mystring.adb" 8 0 0]
                  [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:variablestore.ads:11:4:VC_LENGTH_CHECK]
                  [@vc:annotation]
                  [@GP_Shape:result_assign]
                  [@GP_Sloc:mystring.adb:8:14:instantiated:variablestore.ads:11:4]
                  [@GP_Id:5]
                  [@GP_Reason:VC_LENGTH_CHECK]
                  (true /\
                     (if ((Variablestore__variables__to_string__TresultS.first
                             temp___322)
                            <= (Variablestore__variables__to_string__TresultS.last
                                  temp___322)) then
                        (((Variablestore__variables__to_string__TresultS.first
                             temp___323)
                            <= (Variablestore__variables__to_string__TresultS.last
                                  temp___323)) /\
                           (((Variablestore__variables__to_string__TresultS.last
                                temp___322)
                               - (Variablestore__variables__to_string__TresultS.first
                                    temp___322))
                              = ((Variablestore__variables__to_string__TresultS.last
                                    temp___323)
                                   - (Variablestore__variables__to_string__TresultS.first
                                        temp___323))))
                      else
                        ((Variablestore__variables__to_string__TresultS.last
                            temp___323)
                           < (Variablestore__variables__to_string__TresultS.first
                                temp___323)))) };
                temp___322))));
        ([@GP_Sloc:mystring.adb:9:14:instantiated:variablestore.ads:11:4]
         [#"mystring.adb" 9 0 0] ());
        ([@GP_Sloc:mystring.adb:9:7:instantiated:variablestore.ads:11:4]
         [#"mystring.adb" 9 0 0]
         (([#"mystring.adb" 9 0 0]
           (variablestore__variables__to_string__result.Standard__string.string____content <-
              (let temp___324 =
                 ((Variablestore__variables__to_string__TresultS.of_array
                     (Variablestore__variables__to_string__result.result__.
                        Array__Int__Standard__character.map__content))
                    (Standard__integer__rep.to_rep
                       Variablestore__variables__to_string__result.result____first))
                   (Standard__integer__rep.to_rep
                      Variablestore__variables__to_string__result.result____last) in
               let temp___325 =
                 Variablestore__variables__to_string__TresultS.to_array
                   temp___324 in
               ((Standard__string.of_array temp___325)
                  (Variablestore__variables__to_string__TresultS.first
                     temp___324))
                 (Variablestore__variables__to_string__TresultS.last
                    temp___324))));
          ([#"mystring.adb" 9 0 0] ((raise Return__exc) : unit))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               ((Boolean.andb
                   (([#"mystring.ads" 9 0 0]
                     [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref]
                     [@GP_Sloc:mystring.ads:9:30:instantiated:variablestore.ads:11:4]
                     [@vc:annotation]
                     [@GP_Reason:VC_RANGE_CHECK]
                     [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK]
                     [@GP_Id:6]
                     (Standard__integer.range_check_
                        (([#"mystring.ads" 9 0 0]
                          (begin
                             ensures { true }
                             let _ =
                               let _ =
                                 variablestore__variables__to_string__result.
                                   Standard__string.string____content in
                               () in
                             ()
                           end));
                         (Standard__string.length
                            (variablestore__variables__to_string__result.
                               Standard__string.string____content)))))
                      = (Variablestore__variables__length___axiom.length
                           Variablestore__variables__to_string__m.m)))
                  (((begin
                       ensures { true }
                       let _ =
                         let _ =
                           variablestore__variables__to_string__result.
                             Standard__string.string____content in
                         () in
                       ()
                     end);
                    (Standard__string.first
                       (variablestore__variables__to_string__result.Standard__string.string____content)))
                     = (1 : int))))
              (((begin
                   ensures { true }
                   let _ =
                     let _ =
                       variablestore__variables__to_string__result.Standard__string.string____content in
                     () in
                   ()
                 end);
                (Standard__string.last
                   (variablestore__variables__to_string__result.Standard__string.string____content)))
                 = (Variablestore__variables__length___axiom.length
                      Variablestore__variables__to_string__m.m)) in
          () in
        ()
      end);
     (variablestore__variables__to_string__result.Standard__string.string____content))
end
