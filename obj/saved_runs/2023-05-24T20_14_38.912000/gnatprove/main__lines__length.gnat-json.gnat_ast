(* Module for axiomatizing type "T16b" defined at mystring.ads:38 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T16b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t16b  = <range 0 2048>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2048
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t16b,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t16b__ref  = { mutable t16b__content : t16b }
  
  function   t16b__ref_t16b__content__projection (a : t16b__ref) requires
    {  } ensures  {  } returns t16b = a.t16b__content
  
  meta model_projection function t16b__ref_t16b__content__projection
  
  meta inline:no function t16b__ref_t16b__content__projection
  
  function   t16b__havoc (x : t16b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T16b" defined at mystring.ads:38 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T16b__rep
  
  use        Main__lines__mystring__T16b
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Main__lines__mystring__T16b.t16b) requires { True }
    ensures  { True } returns int = (Main__lines__mystring__T16b.t16b'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Main__lines__mystring__T16b.t16b,
    predicate in_range = Main__lines__mystring__T16b.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 2048
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at main.adb:27, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring__T16b
  use        Main__lines__mystring__T16b__rep
  use        Main__lines__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [name:Length]
                           [model_trace:.69878]rec__main__lines__mystring__length : Main__lines__mystring__T16b.t16b;
                           [model_trace:.69882]
                           [name:Str]rec__main__lines__mystring__str : Array__Int__Standard__character.map }
  
  function [name:Length] [model_trace:.69878] 
    __split_fields_rec__main__lines__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Main__lines__mystring__T16b.t16b = a.rec__main__lines__mystring__length
  
  meta model_projection function __split_fields_rec__main__lines__mystring__length__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__length__projection
  
  function [model_trace:.69882] [name:Str] 
    __split_fields_rec__main__lines__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__main__lines__mystring__str
  
  meta model_projection function __split_fields_rec__main__lines__mystring__str__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   main__lines__mystring__length__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__length_ (a : __rep) requires
    { (main__lines__mystring__length__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__length) }
    returns Main__lines__mystring__T16b.t16b
  
  function   main__lines__mystring__str__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__str_ (a : __rep) requires
    { (main__lines__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__str) } returns
    Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Main__lines__mystring__T16b__rep.to_rep
                a.__split_fields.rec__main__lines__mystring__length)
               = (Main__lines__mystring__T16b__rep.to_rep
                    b.__split_fields.rec__main__lines__mystring__length)) /\
              (Main__lines__mystringstr.bool_eq
                 a.__split_fields.rec__main__lines__mystring__str
                 b.__split_fields.rec__main__lines__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at main.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
  
  use export Main__lines__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type mystring  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   main__lines__mystring__length__first__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__last__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__position () requires {  }
    ensures  {  } returns int
  
  axiom main__lines__mystring__length__first__bit_axiom : ((main__lines__mystring__length__first__bit
                                                              ) >= 0)
  
  axiom main__lines__mystring__length__last__bit_axiom : ((main__lines__mystring__length__last__bit
                                                             )
                                                            > (main__lines__mystring__length__first__bit
                                                                 ))
  
  axiom main__lines__mystring__length__position_axiom : ((main__lines__mystring__length__position
                                                            ) >= 0)
  
  function   main__lines__mystring__str__first__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__last__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__position () requires {  } ensures 
    {  } returns int
  
  axiom main__lines__mystring__str__first__bit_axiom : ((main__lines__mystring__str__first__bit
                                                           ) >= 0)
  
  axiom main__lines__mystring__str__last__bit_axiom : ((main__lines__mystring__str__last__bit
                                                          )
                                                         > (main__lines__mystring__str__first__bit
                                                              ))
  
  axiom main__lines__mystring__str__position_axiom : ((main__lines__mystring__str__position
                                                         ) >= 0)
  
  function   user_eq (a : mystring b : mystring) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns mystring
  
  type mystring__ref  = { mutable mystring__content : mystring }
  
  function   mystring__ref_mystring__content__2__projection
    (a : mystring__ref) requires {  } ensures  {  } returns
    mystring = a.mystring__content
  
  meta model_projection function mystring__ref_mystring__content__2__projection
  
  meta inline:no function mystring__ref_mystring__content__2__projection
  
  function   mystring__havoc (x : mystring__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining the constant "m" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__length__m
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function [model_projected] [model_trace:70026] [name:M]
    [sloc:mystring.ads:23] m () requires {  } ensures  {  } returns
    Main__lines__mystring.mystring

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_280) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___is_init_276) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_277) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_278) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_279) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_282) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_283) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_270) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_266) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_267) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_268) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_269) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_272) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_273) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__length__m___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T16b" defined at mystring.ads:38 instantiated at main.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T16b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:23 instantiated at main.adb:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__length__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Main__lines__mystring
  use        Main__lines__length__m
  use        Main__lines__mystring___axiom
  use        Main__lines__mystring__T16b
  use        Main__lines__mystring__T16b__rep
  use        Standard__character___axiom
  use        Main__lines__mystringstr___axiom
  use        Main__lines__mystring___axiom
  use        Main__lines__length__m___axiom
  use        Main__lines__mystring__T16b___axiom
  
  val main__lines__length__result [model_projected] [name:Length]
  [model_trace:70024@result] : int
  
  function [GP_Subp:mystring.ads:23] [sloc:mystring.ads:23] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:mystring.ads:24] ([GP_Reason:VC_POSTCONDITION]
                              [GP_Shape:pragargs__cmp]
                              [comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:main.adb:27:4:VC_POSTCONDITION]
                              [GP_Id:48] [model_vc_post]
                              [GP_Sloc:mystring.ads:24:14:instantiated:main.adb:27:4] 
                              ([GP_Pretty_Ada:70200]
                              [GP_Sloc:mystring.ads:24:14:instantiated:main.adb:27:4] (
                              !main__lines__length__result <= 2048)))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at main.adb:27 *);
        assume
        { (Main__lines__mystring___axiom.dynamic_invariant
             Main__lines__length__m.m True False True True) };
        (* Assume moved pointers in outputs of the subprogram mystring.ads:23 instantiated at main.adb:27 *);
        (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at main.adb:27 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram mystring.ads:23 instantiated at main.adb:27 *);
        (try
        ();
          ([GP_Sloc:mystring.ads:43:8:instantiated:main.adb:27:4] ([sloc:mystring.ads:43] (
                                                                  main__lines__length__result
                                                                  :=
                                                                  ( (
                                                                  Main__lines__mystring__T16b__rep.to_rep
                                                                    ( Main__lines__length__m.m).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)));
                                                                  raise Return__exc));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ = (!main__lines__length__result <= 2048) in
                       ())  end;
        !main__lines__length__result

end
