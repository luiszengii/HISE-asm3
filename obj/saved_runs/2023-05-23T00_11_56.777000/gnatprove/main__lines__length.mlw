module Main__lines__mystring__T13b
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t13b = <range 0 2048>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t13b,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t13b__ref = { mutable t13b__content : t13b }
  
  function t13b__ref_t13b__content__projection (a: t13b__ref) : t13b =
    a.t13b__content
  
  meta "model_projection" function t13b__ref_t13b__content__projection
  
  meta "inline:no" function t13b__ref_t13b__content__projection
  
  val t13b__havoc (x: t13b__ref) : unit
    writes { x }
end

module Main__lines__mystring__T13b__rep
  use Main__lines__mystring__T13b as Main__lines__mystring__T13b
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Main__lines__mystring__T13b.t13b) : int =
    Main__lines__mystring__T13b.t13b'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Main__lines__mystring__T13b.t13b,
    predicate in_range = Main__lines__mystring__T13b.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Main__lines__mystringstr
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type component_type = Standard__character.character
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Main__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring__T13b as Main__lines__mystring__T13b
  use Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
  use Main__lines__mystringstr as Main__lines__mystringstr
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type __split_fields = {
                       rec__main__lines__mystring__length :
                         Main__lines__mystring__T13b.t13b;
                       rec__main__lines__mystring__str :
                         Array__Int__Standard__character.map
                       }
  
  function __split_fields_rec__main__lines__mystring__length__projection (a: __split_fields) : 
    Main__lines__mystring__T13b.t13b =
    a.rec__main__lines__mystring__length
  
  meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
  
  meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
  
  function __split_fields_rec__main__lines__mystring__str__projection (a: __split_fields) : 
    Array__Int__Standard__character.map =
    a.rec__main__lines__mystring__str
  
  meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
  
  meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate main__lines__mystring__length__pred (a: __rep) = true
  
  val main__lines__mystring__length__pred (a: __rep) : bool
    ensures { result <-> (main__lines__mystring__length__pred (a : __rep)) }
  
  val rec__main__lines__mystring__length_ (a: __rep) : Main__lines__mystring__T13b.t13b
    requires { main__lines__mystring__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__main__lines__mystring__length)) }
  
  predicate main__lines__mystring__str__pred (a: __rep) = true
  
  val main__lines__mystring__str__pred (a: __rep) : bool
    ensures { result <-> (main__lines__mystring__str__pred (a : __rep)) }
  
  val rec__main__lines__mystring__str_ (a: __rep) : Array__Int__Standard__character.map
    requires { main__lines__mystring__str__pred a }
    ensures { (result = ((__split_fields a).rec__main__lines__mystring__str)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Main__lines__mystring__T13b__rep.to_rep
            ((__split_fields a).rec__main__lines__mystring__length))
           = (Main__lines__mystring__T13b__rep.to_rep
                ((__split_fields b).rec__main__lines__mystring__length))) /\
          ((Main__lines__mystringstr.bool_eq
              ((__split_fields a).rec__main__lines__mystring__str))
             ((__split_fields b).rec__main__lines__mystring__str))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Main__lines__mystring
  use export Main__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type mystring = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function main__lines__mystring__length__first__bit : int
  
  val function main__lines__mystring__length__last__bit : int
  
  val function main__lines__mystring__length__position : int
  
  axiom main__lines__mystring__length__first__bit_axiom:
    (main__lines__mystring__length__first__bit >= (0 : int))
  
  axiom main__lines__mystring__length__last__bit_axiom:
    (main__lines__mystring__length__last__bit
       > main__lines__mystring__length__first__bit)
  
  axiom main__lines__mystring__length__position_axiom:
    (main__lines__mystring__length__position >= (0 : int))
  
  val function main__lines__mystring__str__first__bit : int
  
  val function main__lines__mystring__str__last__bit : int
  
  val function main__lines__mystring__str__position : int
  
  axiom main__lines__mystring__str__first__bit_axiom:
    (main__lines__mystring__str__first__bit >= (0 : int))
  
  axiom main__lines__mystring__str__last__bit_axiom:
    (main__lines__mystring__str__last__bit
       > main__lines__mystring__str__first__bit)
  
  axiom main__lines__mystring__str__position_axiom:
    (main__lines__mystring__str__position >= (0 : int))
  
  val function user_eq (a: mystring) (b: mystring) : bool
  
  val function dummy : mystring
  
  type mystring__ref = { mutable mystring__content : mystring }
  
  function mystring__ref_mystring__content__2__projection (a: mystring__ref) : mystring =
    a.mystring__content
  
  meta "model_projection" function mystring__ref_mystring__content__2__projection
  
  meta "inline:no" function mystring__ref_mystring__content__2__projection
  
  val mystring__havoc (x: mystring__ref) : unit
    writes { x }
end

module Main__lines__length__m
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val function m : Main__lines__mystring.mystring
end

module Main__lines__mystring___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  predicate dynamic_invariant (temp___expr_266: Main__lines__mystring.mystring) (temp___is_init_262: bool) (temp___skip_constant_263: bool) (temp___do_toplevel_264: bool) (temp___do_typ_inv_265: bool) =
    true
  
  val dynamic_invariant (temp___expr_266: Main__lines__mystring.mystring) (temp___is_init_262: bool) (temp___skip_constant_263: bool) (temp___do_toplevel_264: bool) (temp___do_typ_inv_265: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_266 : Main__lines__mystring.mystring))
                      (temp___is_init_262 : bool))
                     (temp___skip_constant_263 : bool))
                    (temp___do_toplevel_264 : bool))
                   (temp___do_typ_inv_265 : bool)) }
  
  predicate default_initial_assumption (temp___expr_268: Main__lines__mystring.mystring) (temp___skip_top_level_269: bool) =
    true
  
  val default_initial_assumption (temp___expr_268: Main__lines__mystring.mystring) (temp___skip_top_level_269: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_268 : Main__lines__mystring.mystring))
                   (temp___skip_top_level_269 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Main__lines__mystringstr___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  predicate dynamic_invariant (temp___expr_256: Array__Int__Standard__character.map) (temp___is_init_252: bool) (temp___skip_constant_253: bool) (temp___do_toplevel_254: bool) (temp___do_typ_inv_255: bool) =
    true
  
  val dynamic_invariant (temp___expr_256: Array__Int__Standard__character.map) (temp___is_init_252: bool) (temp___skip_constant_253: bool) (temp___do_toplevel_254: bool) (temp___do_typ_inv_255: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_256 : Array__Int__Standard__character.map))
                      (temp___is_init_252 : bool))
                     (temp___skip_constant_253 : bool))
                    (temp___do_toplevel_254 : bool))
                   (temp___do_typ_inv_255 : bool)) }
  
  predicate default_initial_assumption (temp___expr_258: Array__Int__Standard__character.map) (temp___skip_top_level_259: bool) =
    true
  
  val default_initial_assumption (temp___expr_258: Array__Int__Standard__character.map) (temp___skip_top_level_259: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_258 : Array__Int__Standard__character.map))
                   (temp___skip_top_level_259 : bool)) }
end

module Main__lines__length__m___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__mystring__T13b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__length__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length__m as Main__lines__length__m
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Main__lines__mystring__T13b as Main__lines__mystring__T13b
  use Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
  use Standard__character___axiom as Standard__character___axiom
  use Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Main__lines__length__m___axiom as Main__lines__length__m___axiom
  use Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
  
  val main__lines__length__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"mystring.ads" 23 0 0] true }
    ensures { [#"mystring.ads" 23 0 0]
              [#"mystring.ads" 24 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:main.adb:27:4:VC_POSTCONDITION]
              [@GP_Id:32]
              [@model_vc_post]
              [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:27:4]
              [@GP_Sloc:mystring.ads:24:14:instantiated:main.adb:27:4]
              [@GP_Pretty_Ada:69422]
              ((main__lines__length__result.int__content) <= (2048 : int)) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at main.adb:27]
      ());
     assume {
       ((((Main__lines__mystring___axiom.dynamic_invariant
             Main__lines__length__m.m)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram mystring.ads:23 instantiated at main.adb:27]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at main.adb:27]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram mystring.ads:23 instantiated at main.adb:27]
      ());
     (try
        ([@GP_Sloc:mystring.ads:43:8:instantiated:main.adb:27:4]
         [#"mystring.ads" 43 0 0]
         (([#"mystring.ads" 43 0 0]
           (main__lines__length__result.int__content <-
              (Main__lines__mystring__T13b__rep.to_rep
                 ((Main__lines__mystring.__split_fields
                      Main__lines__length__m.m).Main__lines__mystring.rec__main__lines__mystring__length))));
          ([#"mystring.ads" 43 0 0] ((raise Return__exc) : unit))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((main__lines__length__result.int__content) <= (2048 : int)) in
          () in
        ()
      end);
     (main__lines__length__result.int__content))
end
