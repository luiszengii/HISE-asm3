module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Main__lines__mystring__T15b
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t15b = <range 0 2048>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t15b,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t15b__ref = { mutable t15b__content : t15b }
  
  function t15b__ref_t15b__content__projection (a: t15b__ref) : t15b =
    a.t15b__content
  
  meta "model_projection" function t15b__ref_t15b__content__projection
  
  meta "inline:no" function t15b__ref_t15b__content__projection
  
  val t15b__havoc (x: t15b__ref) : unit
    writes { x }
end

module Main__lines__mystring__T15b__rep
  use Main__lines__mystring__T15b as Main__lines__mystring__T15b
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Main__lines__mystring__T15b.t15b) : int =
    Main__lines__mystring__T15b.t15b'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Main__lines__mystring__T15b.t15b,
    predicate in_range = Main__lines__mystring__T15b.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Main__lines__mystringstr
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type component_type = Standard__character.character
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Main__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring__T15b as Main__lines__mystring__T15b
  use Main__lines__mystring__T15b__rep as Main__lines__mystring__T15b__rep
  use Main__lines__mystringstr as Main__lines__mystringstr
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type __split_fields = {
                       rec__main__lines__mystring__length :
                         Main__lines__mystring__T15b.t15b;
                       rec__main__lines__mystring__str :
                         Array__Int__Standard__character.map
                       }
  
  function __split_fields_rec__main__lines__mystring__length__projection (a: __split_fields) : 
    Main__lines__mystring__T15b.t15b =
    a.rec__main__lines__mystring__length
  
  meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
  
  meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
  
  function __split_fields_rec__main__lines__mystring__str__projection (a: __split_fields) : 
    Array__Int__Standard__character.map =
    a.rec__main__lines__mystring__str
  
  meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
  
  meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate main__lines__mystring__length__pred (a: __rep) = true
  
  val main__lines__mystring__length__pred (a: __rep) : bool
    ensures { result <-> (main__lines__mystring__length__pred (a : __rep)) }
  
  val rec__main__lines__mystring__length_ (a: __rep) : Main__lines__mystring__T15b.t15b
    requires { main__lines__mystring__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__main__lines__mystring__length)) }
  
  predicate main__lines__mystring__str__pred (a: __rep) = true
  
  val main__lines__mystring__str__pred (a: __rep) : bool
    ensures { result <-> (main__lines__mystring__str__pred (a : __rep)) }
  
  val rec__main__lines__mystring__str_ (a: __rep) : Array__Int__Standard__character.map
    requires { main__lines__mystring__str__pred a }
    ensures { (result = ((__split_fields a).rec__main__lines__mystring__str)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Main__lines__mystring__T15b__rep.to_rep
            ((__split_fields a).rec__main__lines__mystring__length))
           = (Main__lines__mystring__T15b__rep.to_rep
                ((__split_fields b).rec__main__lines__mystring__length))) /\
          ((Main__lines__mystringstr.bool_eq
              ((__split_fields a).rec__main__lines__mystring__str))
             ((__split_fields b).rec__main__lines__mystring__str))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Main__lines__mystring
  use export Main__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type mystring = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function main__lines__mystring__length__first__bit : int
  
  val function main__lines__mystring__length__last__bit : int
  
  val function main__lines__mystring__length__position : int
  
  axiom main__lines__mystring__length__first__bit_axiom:
    (main__lines__mystring__length__first__bit >= (0 : int))
  
  axiom main__lines__mystring__length__last__bit_axiom:
    (main__lines__mystring__length__last__bit
       > main__lines__mystring__length__first__bit)
  
  axiom main__lines__mystring__length__position_axiom:
    (main__lines__mystring__length__position >= (0 : int))
  
  val function main__lines__mystring__str__first__bit : int
  
  val function main__lines__mystring__str__last__bit : int
  
  val function main__lines__mystring__str__position : int
  
  axiom main__lines__mystring__str__first__bit_axiom:
    (main__lines__mystring__str__first__bit >= (0 : int))
  
  axiom main__lines__mystring__str__last__bit_axiom:
    (main__lines__mystring__str__last__bit
       > main__lines__mystring__str__first__bit)
  
  axiom main__lines__mystring__str__position_axiom:
    (main__lines__mystring__str__position >= (0 : int))
  
  val function user_eq (a: mystring) (b: mystring) : bool
  
  val function dummy : mystring
  
  type mystring__ref = { mutable mystring__content : mystring }
  
  function mystring__ref_mystring__content__2__projection (a: mystring__ref) : mystring =
    a.mystring__content
  
  meta "model_projection" function mystring__ref_mystring__content__2__projection
  
  meta "inline:no" function mystring__ref_mystring__content__2__projection
  
  val mystring__havoc (x: mystring__ref) : unit
    writes { x }
end

module Main__lines__to_string__m
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val function m : Main__lines__mystring.mystring
end

module Main__lines__length
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  val function length (m: Main__lines__mystring.mystring) : int
  
  val predicate length__function_guard (temp___result_164: int) (m: Main__lines__mystring.mystring)
end

module Standard__natural
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type natural = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = natural,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type natural__ref = { mutable natural__content : natural }
  
  function natural__ref_natural__content__projection (a: natural__ref) : natural =
    a.natural__content
  
  meta "model_projection" function natural__ref_natural__content__projection
  
  meta "inline:no" function natural__ref_natural__content__projection
  
  val natural__havoc (x: natural__ref) : unit
    writes { x }
end

module Standard__natural___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural as Standard__natural
  
  predicate dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) =
    if ((temp___is_init_42 = True) \/
          (Standard__natural.first <= Standard__natural.last)) then
      (((Standard__natural.dynamic_property Standard__natural.first)
          Standard__natural.last)
         temp___expr_46)
    else true
  
  val dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_46 : int))
                      (temp___is_init_42 : bool))
                     (temp___skip_constant_43 : bool))
                    (temp___do_toplevel_44 : bool))
                   (temp___do_typ_inv_45 : bool)) }
  
  predicate default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) =
    true
  
  val default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_47 : int))
                   (temp___skip_top_level_48 : bool)) }
end

module Main__lines__mystring___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  
  predicate dynamic_invariant (temp___expr_278: Main__lines__mystring.mystring) (temp___is_init_274: bool) (temp___skip_constant_275: bool) (temp___do_toplevel_276: bool) (temp___do_typ_inv_277: bool) =
    true
  
  val dynamic_invariant (temp___expr_278: Main__lines__mystring.mystring) (temp___is_init_274: bool) (temp___skip_constant_275: bool) (temp___do_toplevel_276: bool) (temp___do_typ_inv_277: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_278 : Main__lines__mystring.mystring))
                      (temp___is_init_274 : bool))
                     (temp___skip_constant_275 : bool))
                    (temp___do_toplevel_276 : bool))
                   (temp___do_typ_inv_277 : bool)) }
  
  predicate default_initial_assumption (temp___expr_280: Main__lines__mystring.mystring) (temp___skip_top_level_281: bool) =
    true
  
  val default_initial_assumption (temp___expr_280: Main__lines__mystring.mystring) (temp___skip_top_level_281: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_280 : Main__lines__mystring.mystring))
                   (temp___skip_top_level_281 : bool)) }
end

module Main__lines__length___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural___axiom as Standard__natural___axiom
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__length as Main__lines__length
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Main__lines__mystring__T15b as Main__lines__mystring__T15b
  use Main__lines__mystring__T15b__rep as Main__lines__mystring__T15b__rep
  
  val length (m: Main__lines__mystring.mystring) : int
    requires { true }
    ensures { (((result = (Main__lines__length.length m)) /\
                  ((Main__lines__length.length__function_guard result) m)) /\
                 ((((((Standard__natural___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    ((result
                        = (Main__lines__mystring__T15b__rep.to_rep
                             ((Main__lines__mystring.__split_fields m).
                                Main__lines__mystring.rec__main__lines__mystring__length))) /\
                       ([@GP_Pretty_Ada:69517] (result <= (2048 : int)))))) }
  
  axiom length__post_axiom:
    forall m : Main__lines__mystring.mystring [Main__lines__length.length m].
      ((((((Main__lines__mystring___axiom.dynamic_invariant m) True) True)
           True)
          True) ->
         (let result = Main__lines__length.length m in
          if ((Main__lines__length.length__function_guard result) m) then
            ((([@GP_Pretty_Ada:69517] (result <= (2048 : int))) /\
                (((((Standard__natural___axiom.dynamic_invariant result) True)
                     False)
                    True)
                   True)) /\
               true)
          else true))
  
  axiom length__def_axiom:
    forall m : Main__lines__mystring.mystring [Main__lines__length.length m].
      ((((((Main__lines__mystring___axiom.dynamic_invariant m) True) True)
           True)
          True) ->
         ((Main__lines__length.length m)
            = (Main__lines__mystring__T15b__rep.to_rep
                 ((Main__lines__mystring.__split_fields m).Main__lines__mystring.rec__main__lines__mystring__length))))
end

module Main__lines__to_string__result
  use _gnatprove_standard.Main
  use int.Int
  use Standard__integer as Standard__integer
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val result__ : Array__Int__Standard__character.map__ref
  
  val function result____first : Standard__integer.integer
  
  val function result____last : Standard__integer.integer
end

module Main__lines__TmystringstrD1
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tmystringstrD1 = <range 1 2048>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = tmystringstrD1,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type tmystringstrD1__ref = {
                            mutable tmystringstrD1__content : tmystringstrD1
                            }
  
  function tmystringstrD1__ref_tmystringstrD1__content__2__projection (a: tmystringstrD1__ref) : tmystringstrD1 =
    a.tmystringstrD1__content
  
  meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
  
  meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
  
  val tmystringstrD1__havoc (x: tmystringstrD1__ref) : unit
    writes { x }
end

module Main__lines__to_string__TresultS
  use export Standard__string
  use _gnatprove_standard.Main
  use int.Int
  
  type tresultS = string__
  
  type tresultS__ref = { mutable tresultS__content : tresultS }
  
  function tresultS__ref_tresultS__content__projection (a: tresultS__ref) : tresultS =
    a.tresultS__content
  
  meta "model_projection" function tresultS__ref_tresultS__content__projection
  
  meta "inline:no" function tresultS__ref_tresultS__content__projection
  
  val tresultS__havoc (x: tresultS__ref) : unit
    writes { x }
end

module Main__lines__TmystringstrB
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  use Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Main__lines__TmystringstrD1.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type tmystringstrB = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type tmystringstrB__ref = {
                           mutable tmystringstrB__content : tmystringstrB
                           }
  
  function tmystringstrB__ref_tmystringstrB__content__2__projection (a: tmystringstrB__ref) : tmystringstrB =
    a.tmystringstrB__content
  
  meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__2__projection
  
  meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__2__projection
  
  val tmystringstrB__havoc (x: tmystringstrB__ref) : unit
    writes { x }
end

module Main__lines__to_string__T64b
  use export Main__lines__TmystringstrB
  use _gnatprove_standard.Main
  use int.Int
  
  type t64b = tmystringstrB
  
  type t64b__ref = { mutable t64b__content : t64b }
  
  function t64b__ref_t64b__content__projection (a: t64b__ref) : t64b =
    a.t64b__content
  
  meta "model_projection" function t64b__ref_t64b__content__projection
  
  meta "inline:no" function t64b__ref_t64b__content__projection
  
  val t64b__havoc (x: t64b__ref) : unit
    writes { x }
end

module Main__lines__to_string__TresultS___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__mystring__T15b as Main__lines__mystring__T15b
  use Main__lines__mystring__T15b__rep as Main__lines__mystring__T15b__rep
  use Main__lines__to_string__TresultS as Main__lines__to_string__TresultS
  
  predicate dynamic_invariant (temp___expr_309: Main__lines__to_string__TresultS.tresultS) (temp___is_init_305: bool) (temp___skip_constant_306: bool) (temp___do_toplevel_307: bool) (temp___do_typ_inv_308: bool) (Main__lines__to_string__m___m___: 
    Main__lines__mystring.mystring) =
    if temp___skip_constant_306 then true
    else
      ((((((Main__lines__to_string__TresultS.dynamic_property (1 : int))
             (Main__lines__mystring__T15b__rep.to_rep
                ((Main__lines__mystring.__split_fields
                     Main__lines__to_string__m___m___).Main__lines__mystring.rec__main__lines__mystring__length)))
            (Main__lines__to_string__TresultS.first temp___expr_309))
           (Main__lines__to_string__TresultS.last temp___expr_309)) /\
          ((Main__lines__to_string__TresultS.first temp___expr_309)
             = (1 : int))) /\
         ((Main__lines__to_string__TresultS.last temp___expr_309)
            = (Main__lines__mystring__T15b__rep.to_rep
                 ((Main__lines__mystring.__split_fields
                      Main__lines__to_string__m___m___).Main__lines__mystring.rec__main__lines__mystring__length))))
  
  val dynamic_invariant (temp___expr_309: Main__lines__to_string__TresultS.tresultS) (temp___is_init_305: bool) (temp___skip_constant_306: bool) (temp___do_toplevel_307: bool) (temp___do_typ_inv_308: bool) (Main__lines__to_string__m___m___: 
    Main__lines__mystring.mystring) : bool
    ensures { result
                <->
                ((((((dynamic_invariant
                        (temp___expr_309 :
                           Main__lines__to_string__TresultS.tresultS))
                       (temp___is_init_305 : bool))
                      (temp___skip_constant_306 : bool))
                     (temp___do_toplevel_307 : bool))
                    (temp___do_typ_inv_308 : bool))
                   (Main__lines__to_string__m___m___ :
                      Main__lines__mystring.mystring)) }
  
  predicate default_initial_assumption (temp___expr_311: Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_312: bool) (Main__lines__to_string__m___m___: 
    Main__lines__mystring.mystring) =
    ((true /\
        ((Main__lines__to_string__TresultS.first temp___expr_311)
           = (1 : int))) /\
       ((Main__lines__to_string__TresultS.last temp___expr_311)
          = (Main__lines__mystring__T15b__rep.to_rep
               ((Main__lines__mystring.__split_fields
                    Main__lines__to_string__m___m___).Main__lines__mystring.rec__main__lines__mystring__length))))
  
  val default_initial_assumption (temp___expr_311: Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_312: bool) (Main__lines__to_string__m___m___: 
    Main__lines__mystring.mystring) : bool
    ensures { result
                <->
                (((default_initial_assumption
                     (temp___expr_311 :
                        Main__lines__to_string__TresultS.tresultS))
                    (temp___skip_top_level_312 : bool))
                   (Main__lines__to_string__m___m___ :
                      Main__lines__mystring.mystring)) }
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Main__lines__mystringstr___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  predicate dynamic_invariant (temp___expr_268: Array__Int__Standard__character.map) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) =
    true
  
  val dynamic_invariant (temp___expr_268: Array__Int__Standard__character.map) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_268 : Array__Int__Standard__character.map))
                      (temp___is_init_264 : bool))
                     (temp___skip_constant_265 : bool))
                    (temp___do_toplevel_266 : bool))
                   (temp___do_typ_inv_267 : bool)) }
  
  predicate default_initial_assumption (temp___expr_270: Array__Int__Standard__character.map) (temp___skip_top_level_271: bool) =
    true
  
  val default_initial_assumption (temp___expr_270: Array__Int__Standard__character.map) (temp___skip_top_level_271: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_270 : Array__Int__Standard__character.map))
                   (temp___skip_top_level_271 : bool)) }
end

module Main__lines__to_string__m___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__TmystringstrD1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__mystring__T15b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__to_string__result___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__to_string__T64b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__lines__to_string__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__integer__rep as Standard__integer__rep
  use Main__lines__mystring as Main__lines__mystring
  use Main__lines__to_string__m as Main__lines__to_string__m
  use Main__lines__length as Main__lines__length
  use Main__lines__length___axiom as Main__lines__length___axiom
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Main__lines__to_string__result as Main__lines__to_string__result
  use Main__lines__mystring__T15b as Main__lines__mystring__T15b
  use Main__lines__mystring__T15b__rep as Main__lines__mystring__T15b__rep
  use Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
  use Main__lines__to_string__TresultS as Main__lines__to_string__TresultS
  use Main__lines__to_string__T64b as Main__lines__to_string__T64b
  use Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
  use Main__lines__mystring___axiom as Main__lines__mystring___axiom
  use Main__lines__to_string__m___axiom as Main__lines__to_string__m___axiom
  use Main__lines__length___axiom as Main__lines__length___axiom
  use Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
  use Main__lines__mystring__T15b___axiom as Main__lines__mystring__T15b___axiom
  use Main__lines__to_string__result___axiom as Main__lines__to_string__result___axiom
  use Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
  use Main__lines__to_string__T64b___axiom as Main__lines__to_string__T64b___axiom
  
  val main__lines__to_string__result : Standard__string.string____ref
  
  let def (__void_param : unit)
    requires { [#"mystring.ads" 8 0 0] true }
    ensures { [#"mystring.ads" 8 0 0]
              [#"mystring.ads" 9 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Id:43]
              [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:main.adb:27:4:VC_POSTCONDITION]
              [@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:27:4]
              [@model_vc_post]
              [@GP_Shape:pragargs__and]
              ((([@GP_Sloc:mystring.ads:9:14:instantiated:main.adb:27:4]
                 [@GP_Pretty_Ada:69235]
                 ((Standard__string.length
                     (main__lines__to_string__result.Standard__string.string____content))
                    = (epsilon temp___result_598: int.
                         ((temp___result_598
                             = (Main__lines__length.length
                                  Main__lines__to_string__m.m)) /\
                            ((Main__lines__length.length__function_guard
                                temp___result_598)
                               Main__lines__to_string__m.m))))) /\
                  ([@GP_Pretty_Ada:69242]
                   [@GP_Sloc:mystring.ads:10:14:instantiated:main.adb:27:4]
                   ((Standard__string.first
                       (main__lines__to_string__result.Standard__string.string____content))
                      = (1 : int)))) /\
                 ([@GP_Sloc:mystring.ads:10:45:instantiated:main.adb:27:4]
                  [@GP_Pretty_Ada:69247]
                  ((Standard__string.last
                      (main__lines__to_string__result.Standard__string.string____content))
                     = (epsilon temp___result_599: int.
                          ((temp___result_599
                              = (Main__lines__length.length
                                   Main__lines__to_string__m.m)) /\
                             ((Main__lines__length.length__function_guard
                                 temp___result_599)
                                Main__lines__to_string__m.m)))))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at main.adb:27]
      ());
     assume {
       ((((Main__lines__mystring___axiom.dynamic_invariant
             Main__lines__to_string__m.m)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram mystring.ads:8 instantiated at main.adb:27]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at main.adb:27]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram mystring.ads:8 instantiated at main.adb:27]
      ());
     (try
        ([#"mystring.adb" 6 0 0]
         (([#"mystring.adb" 6 0 0]
           (begin
              ensures { true }
              let _ =
                let _ =
                  Main__lines__mystring__T15b__rep.to_rep
                    ((Main__lines__mystring.__split_fields
                         Main__lines__to_string__m.m).Main__lines__mystring.rec__main__lines__mystring__length) in
                () in
              ()
            end));
          ([#"mystring.adb" 6 0 0]
           [#"mystring.adb" 6 0 0]
           (val _f : unit
              requires { [@GP_Sloc:mystring.adb:6:7:instantiated:main.adb:27:4]
                         [@vc:annotation]
                         [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:main.adb:27:4:VC_RANGE_CHECK]
                         [@GP_Id:37]
                         [@GP_Reason:VC_RANGE_CHECK]
                         [#"mystring.adb" 6 0 0]
                         (((1 : int)
                             <= (Main__lines__mystring__T15b__rep.to_rep
                                   ((Main__lines__mystring.__split_fields
                                        Main__lines__to_string__m.m).
                                      Main__lines__mystring.rec__main__lines__mystring__length))) ->
                            (((1 : int) >= Standard__positive.first) /\
                               ((Main__lines__mystring__T15b__rep.to_rep
                                   ((Main__lines__mystring.__split_fields
                                        Main__lines__to_string__m.m).
                                      Main__lines__mystring.rec__main__lines__mystring__length))
                                  <= Standard__positive.last)))
              }
              ensures { [#"mystring.adb" 6 0 0] true } in
            _f))));
        ([#"mystring.adb" 6 0 0]
         (([#"mystring.adb" 6 0 0]
           assume {
             [#"mystring.adb" 6 0 0]
             (((Main__lines__to_string__TresultS___axiom.default_initial_assumption
                  (((Main__lines__to_string__TresultS.of_array
                       (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content))
                      (Standard__integer__rep.to_rep
                         Main__lines__to_string__result.result____first))
                     (Standard__integer__rep.to_rep
                        Main__lines__to_string__result.result____last)))
                 False)
                Main__lines__to_string__m.m) });
          ([#"mystring.adb" 6 0 0]
           assume {
             [#"mystring.adb" 6 0 0]
             ((((((Main__lines__to_string__TresultS___axiom.dynamic_invariant
                     (((Main__lines__to_string__TresultS.of_array
                          (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content))
                         (Standard__integer__rep.to_rep
                            Main__lines__to_string__result.result____first))
                        (Standard__integer__rep.to_rep
                           Main__lines__to_string__result.result____last)))
                    False)
                   False)
                  True)
                 True)
                Main__lines__to_string__m.m) })));
        ([@GP_Sloc:mystring.adb:8:7:instantiated:main.adb:27:4]
         [#"mystring.adb" 8 0 0] ());
        ([@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:27:4]
         [#"mystring.adb" 8 0 0]
         [#"mystring.adb" 8 0 0]
         (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content <-
            (Main__lines__to_string__TresultS.to_array
               (let temp___594 =
                  let temp___592 =
                    let temp___590 =
                      let temp___588 =
                        Main__lines__mystring__T15b__rep.to_rep
                          ((Main__lines__mystring.__split_fields
                               Main__lines__to_string__m.m).Main__lines__mystring.rec__main__lines__mystring__length) in
                      let temp___587 = 1 : int in
                      let temp___589 =
                        (Main__lines__mystring.__split_fields
                            Main__lines__to_string__m.m).Main__lines__mystring.rec__main__lines__mystring__str in
                      ((Main__lines__to_string__T64b.of_array
                          (([#"mystring.adb" 8 0 0]
                            assert {
                              [#"mystring.adb" 8 0 0]
                              [#"mystring.adb" 8 0 0]
                              [@vc:annotation]
                              [@GP_Reason:VC_RANGE_CHECK]
                              [@GP_Id:38]
                              [@GP_Shape:result_assign__typeconv__slice]
                              [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:27:4:VC_RANGE_CHECK]
                              [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:27:4]
                              ((temp___587 <= temp___588) ->
                                 (((Main__lines__TmystringstrD1.first
                                      <= temp___587) /\
                                     (temp___587
                                        <= Main__lines__TmystringstrD1.last)) /\
                                    ((Main__lines__TmystringstrD1.first
                                        <= temp___588) /\
                                       (temp___588
                                          <= Main__lines__TmystringstrD1.last)))) });
                           temp___589))
                         temp___587)
                        temp___588 in
                    let temp___591 =
                      Main__lines__to_string__T64b.to_array temp___590 in
                    assert {
                      [#"mystring.adb" 8 0 0]
                      [@vc:annotation]
                      [@GP_Reason:VC_RANGE_CHECK]
                      [@GP_Shape:result_assign__typeconv__slice]
                      [@GP_Id:39]
                      [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:27:4:VC_RANGE_CHECK]
                      [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:27:4]
                      ((((Standard__string.dynamic_property
                            Standard__positive.first)
                           Standard__positive.last)
                          (Main__lines__to_string__T64b.first temp___590))
                         (Main__lines__to_string__T64b.last temp___590)) };
                    (((Standard__string.of_array temp___591)
                        (Main__lines__to_string__T64b.first temp___590))
                       (Main__lines__to_string__T64b.last temp___590)) in
                  let temp___593 =
                    ((Array__Int__Standard__character.slide
                        (Standard__string.to_array temp___592))
                       (Standard__string.first temp___592))
                      (1 : int) in
                  assert {
                    [#"mystring.adb" 8 0 0]
                    [@GP_Id:40]
                    [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:main.adb:27:4:VC_LENGTH_CHECK]
                    [@vc:annotation]
                    [@GP_Shape:result_assign__typeconv]
                    [@GP_Reason:VC_LENGTH_CHECK]
                    [@GP_Sloc:mystring.adb:8:17:instantiated:main.adb:27:4]
                    (true /\
                       (if ((Standard__string.first temp___592)
                              <= (Standard__string.last temp___592)) then
                          (((1 : int)
                              <= (Main__lines__mystring__T15b__rep.to_rep
                                    ((Main__lines__mystring.__split_fields
                                         Main__lines__to_string__m.m).
                                       Main__lines__mystring.rec__main__lines__mystring__length))) /\
                             (((Standard__string.last temp___592)
                                 - (Standard__string.first temp___592))
                                = ((Main__lines__mystring__T15b__rep.to_rep
                                      ((Main__lines__mystring.__split_fields
                                           Main__lines__to_string__m.m).
                                         Main__lines__mystring.rec__main__lines__mystring__length))
                                     - (1 : int))))
                        else
                          ((Main__lines__mystring__T15b__rep.to_rep
                              ((Main__lines__mystring.__split_fields
                                   Main__lines__to_string__m.m).Main__lines__mystring.rec__main__lines__mystring__length))
                             < (1 : int)))) };
                  (((Main__lines__to_string__TresultS.of_array temp___593)
                      (1 : int))
                     (Main__lines__mystring__T15b__rep.to_rep
                        ((Main__lines__mystring.__split_fields
                             Main__lines__to_string__m.m).Main__lines__mystring.rec__main__lines__mystring__length))) in
                let temp___595 =
                  ((Main__lines__to_string__TresultS.of_array
                      (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content))
                     (Standard__integer__rep.to_rep
                        Main__lines__to_string__result.result____first))
                    (Standard__integer__rep.to_rep
                       Main__lines__to_string__result.result____last) in
                assert {
                  [#"mystring.adb" 8 0 0]
                  [@GP_Id:41]
                  [@vc:annotation]
                  [@GP_Shape:result_assign]
                  [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:27:4]
                  [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:main.adb:27:4:VC_LENGTH_CHECK]
                  [@GP_Reason:VC_LENGTH_CHECK]
                  (true /\
                     (if ((Main__lines__to_string__TresultS.first temp___594)
                            <= (Main__lines__to_string__TresultS.last
                                  temp___594)) then
                        (((Main__lines__to_string__TresultS.first temp___595)
                            <= (Main__lines__to_string__TresultS.last
                                  temp___595)) /\
                           (((Main__lines__to_string__TresultS.last
                                temp___594)
                               - (Main__lines__to_string__TresultS.first
                                    temp___594))
                              = ((Main__lines__to_string__TresultS.last
                                    temp___595)
                                   - (Main__lines__to_string__TresultS.first
                                        temp___595))))
                      else
                        ((Main__lines__to_string__TresultS.last temp___595)
                           < (Main__lines__to_string__TresultS.first
                                temp___595)))) };
                temp___594))));
        ([@GP_Sloc:mystring.adb:9:14:instantiated:main.adb:27:4]
         [#"mystring.adb" 9 0 0] ());
        ([@GP_Sloc:mystring.adb:9:7:instantiated:main.adb:27:4]
         [#"mystring.adb" 9 0 0]
         (([#"mystring.adb" 9 0 0]
           (main__lines__to_string__result.Standard__string.string____content <-
              (let temp___596 =
                 ((Main__lines__to_string__TresultS.of_array
                     (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content))
                    (Standard__integer__rep.to_rep
                       Main__lines__to_string__result.result____first))
                   (Standard__integer__rep.to_rep
                      Main__lines__to_string__result.result____last) in
               let temp___597 =
                 Main__lines__to_string__TresultS.to_array temp___596 in
               ((Standard__string.of_array temp___597)
                  (Main__lines__to_string__TresultS.first temp___596))
                 (Main__lines__to_string__TresultS.last temp___596))));
          ([#"mystring.adb" 9 0 0] ((raise Return__exc) : unit))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               ((Boolean.andb
                   (([#"mystring.ads" 9 0 0]
                     [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref]
                     [@GP_Id:42]
                     [@vc:annotation]
                     [@GP_Reason:VC_RANGE_CHECK]
                     [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:main.adb:27:4:VC_RANGE_CHECK]
                     [@GP_Sloc:mystring.ads:9:30:instantiated:main.adb:27:4]
                     (Standard__integer.range_check_
                        (([#"mystring.ads" 9 0 0]
                          (begin
                             ensures { true }
                             let _ =
                               let _ =
                                 main__lines__to_string__result.Standard__string.string____content in
                               () in
                             ()
                           end));
                         (Standard__string.length
                            (main__lines__to_string__result.Standard__string.string____content)))))
                      = (Main__lines__length___axiom.length
                           Main__lines__to_string__m.m)))
                  (((begin
                       ensures { true }
                       let _ =
                         let _ =
                           main__lines__to_string__result.Standard__string.string____content in
                         () in
                       ()
                     end);
                    (Standard__string.first
                       (main__lines__to_string__result.Standard__string.string____content)))
                     = (1 : int))))
              (((begin
                   ensures { true }
                   let _ =
                     let _ =
                       main__lines__to_string__result.Standard__string.string____content in
                     () in
                   ()
                 end);
                (Standard__string.last
                   (main__lines__to_string__result.Standard__string.string____content)))
                 = (Main__lines__length___axiom.length
                      Main__lines__to_string__m.m)) in
          () in
        ()
      end);
     (main__lines__to_string__result.Standard__string.string____content))
end
