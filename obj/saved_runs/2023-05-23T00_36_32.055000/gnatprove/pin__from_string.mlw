module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__natural
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type natural = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = natural,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type natural__ref = { mutable natural__content : natural }
  
  function natural__ref_natural__content__projection (a: natural__ref) : natural =
    a.natural__content
  
  meta "model_projection" function natural__ref_natural__content__projection
  
  meta "inline:no" function natural__ref_natural__content__projection
  
  val natural__havoc (x: natural__ref) : unit
    writes { x }
end

module Standard__natural___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural as Standard__natural
  
  predicate dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) =
    if ((temp___is_init_42 = True) \/
          (Standard__natural.first <= Standard__natural.last)) then
      (((Standard__natural.dynamic_property Standard__natural.first)
          Standard__natural.last)
         temp___expr_46)
    else true
  
  val dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_46 : int))
                      (temp___is_init_42 : bool))
                     (temp___skip_constant_43 : bool))
                    (temp___do_toplevel_44 : bool))
                   (temp___do_typ_inv_45 : bool)) }
  
  predicate default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) =
    true
  
  val default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_47 : int))
                   (temp___skip_top_level_48 : bool)) }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Pin__from_string__s
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function s : Standard__string.string__
end

module Pin__from_string__result
  use _gnatprove_standard.Main
  use int.Int
  
  val result__ : int__ref
end

module Pin__from_string__count
  use _gnatprove_standard.Main
  use int.Int
  
  val count : int__ref
end

module Pin__from_string__L_1__i
  use _gnatprove_standard.Main
  use int.Int
  
  val i : int__ref
end

module Pin__from_string__B_2__ch
  use _gnatprove_standard.Main
  use int.Int
  
  val ch : int__ref
end

module Pin__pin
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type pin = <range 0 9999>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (9999 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = pin,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type pin__ref = { mutable pin__content : pin }
  
  function pin__ref_pin__content__projection (a: pin__ref) : pin =
    a.pin__content
  
  meta "model_projection" function pin__ref_pin__content__projection
  
  meta "inline:no" function pin__ref_pin__content__projection
  
  val pin__havoc (x: pin__ref) : unit
    writes { x }
end

module Pin__from_string__L_1
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_1
end

module Pin__from_string__L_1__T2b
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__integer__rep as Standard__integer__rep
  
  type t2b = Standard__integer.integer
  
  predicate dynamic_property (first_int: int) (last_int: int) (x: int) =
    ((first_int <= x) /\ (x <= last_int))
  
  val dynamic_property (first_int: int) (last_int: int) (x: int) : bool
    ensures { result
                <->
                (((dynamic_property (first_int : int)) (last_int : int))
                   (x : int)) }
  
  clone export ada__model.Dynamic_Discrete with
    axiom .,
    type t = t2b,
    type rep_type = int,
    function base_to_rep = Standard__integer__rep.to_rep,
    function base_of_rep = Standard__integer__rep.of_rep,
    predicate dynamic_property = dynamic_property
  
  type t2b__ref = { mutable t2b__content : t2b }
  
  function t2b__ref_t2b__content__projection (a: t2b__ref) : t2b =
    a.t2b__content
  
  meta "model_projection" function t2b__ref_t2b__content__projection
  
  meta "inline:no" function t2b__ref_t2b__content__projection
  
  val t2b__havoc (x: t2b__ref) : unit
    writes { x }
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Pin__from_string__result___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pin__from_string__count___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pin__from_string__L_1__i___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pin__from_string__B_2__ch___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pin__from_string__L_1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pin__from_string__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pin__pin___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Pin__pin as Pin__pin
  
  predicate dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) =
    if ((temp___is_init_162 = True) \/ (Pin__pin.first <= Pin__pin.last)) then
      (((Pin__pin.dynamic_property Pin__pin.first) Pin__pin.last)
         temp___expr_166)
    else true
  
  val dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_166 : int))
                      (temp___is_init_162 : bool))
                     (temp___skip_constant_163 : bool))
                    (temp___do_toplevel_164 : bool))
                   (temp___do_typ_inv_165 : bool)) }
  
  predicate default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) =
    true
  
  val default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_167 : int))
                   (temp___skip_top_level_168 : bool)) }
end

module Pin__from_string__L_1__T2b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pin__from_string__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Int_Power as Int_Power
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__natural as Standard__natural
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__character as Standard__character
  use Standard__character___axiom as Standard__character___axiom
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Pin__from_string__s as Pin__from_string__s
  use Pin__from_string__result as Pin__from_string__result
  use Pin__from_string__count as Pin__from_string__count
  use Pin__from_string__L_1__i as Pin__from_string__L_1__i
  use Pin__from_string__B_2__ch as Pin__from_string__B_2__ch
  use Pin__pin as Pin__pin
  use Pin__from_string__L_1 as Pin__from_string__L_1
  use Pin__from_string__L_1__T2b as Pin__from_string__L_1__T2b
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Pin__from_string__result___axiom as Pin__from_string__result___axiom
  use Pin__from_string__count___axiom as Pin__from_string__count___axiom
  use Pin__from_string__L_1__i___axiom as Pin__from_string__L_1__i___axiom
  use Pin__from_string__B_2__ch___axiom as Pin__from_string__B_2__ch___axiom
  use Pin__from_string__L_1___axiom as Pin__from_string__L_1___axiom
  use Pin__from_string__s___axiom as Pin__from_string__s___axiom
  use Pin__pin___axiom as Pin__pin___axiom
  use Pin__from_string__L_1__T2b___axiom as Pin__from_string__L_1__T2b___axiom
  
  val pin__from_string__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"pin.ads" 5 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram pin.ads:5]
      ());
     ([#"pin.ads" 5 0 0]
      assume {
        [#"pin.ads" 5 0 0]
        (((((Standard__string___axiom.dynamic_invariant Pin__from_string__s.s)
              True)
             False)
            True)
           True) });
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram pin.ads:5]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram pin.ads:5] ());
     ([#"pin.ads" 5 0 0]
      (begin
         ensures { true }
         let _ =
           let _ =
             (Boolean.andb
                ((([#"pin.ads" 5 0 0] ());
                  (Standard__string.length Pin__from_string__s.s))
                   = (4 : int)))
               ((let i = [#"pin.ads" 5 0 0] (val _f : int in
                                             _f) in
                 if ((Boolean.andb
                        ((([#"pin.ads" 5 0 0] ());
                          (Standard__string.first Pin__from_string__s.s))
                           <= i))
                       (i
                          <= (([#"pin.ads" 5 0 0] ());
                              (Standard__string.last Pin__from_string__s.s)))) then
                   ([#"pin.ads" 5 0 0]
                    (begin
                       ensures { true }
                       let _ =
                         let _ =
                           (Boolean.andb
                              ((Standard__character__rep.to_rep
                                  ((Array__Int__Standard__character.get
                                      (Standard__string.to_array
                                         Pin__from_string__s.s))
                                     (([#"pin.ads" 5 0 0]
                                       assert {
                                         [#"pin.ads" 5 0 0]
                                         [#"pin.ads" 7 0 0]
                                         [@GP_Sloc:pin.ads:7:43]
                                         [@GP_Shape:pragargs__and__forall__and__cmp__ixdcomp]
                                         [@vc:annotation]
                                         [@GP_Reason:VC_INDEX_CHECK]
                                         [@comment:               (for all I in S'Range => S(I) >= '0' and S(I) <= '9'));                                           ^ pin.ads:7:43:VC_INDEX_CHECK]
                                         [@GP_Id:8]
                                         (((Standard__string.first
                                              Pin__from_string__s.s)
                                             <= i) /\
                                            (i
                                               <= (Standard__string.last
                                                     Pin__from_string__s.s))) });
                                      i)))
                                 >= (48 : int)))
                             ((Standard__character__rep.to_rep
                                 ((Array__Int__Standard__character.get
                                     (Standard__string.to_array
                                        Pin__from_string__s.s))
                                    (assert {
                                       [#"pin.ads" 7 0 0]
                                       [@GP_Sloc:pin.ads:7:59]
                                       [@comment:               (for all I in S'Range => S(I) >= '0' and S(I) <= '9'));                                                           ^ pin.ads:7:59:VC_INDEX_CHECK]
                                       [@GP_Shape:pragargs__and__forall__and__cmp__ixdcomp]
                                       [@vc:annotation]
                                       [@GP_Reason:VC_INDEX_CHECK]
                                       [@GP_Id:9]
                                       (((Standard__string.first
                                            Pin__from_string__s.s)
                                           <= i) /\
                                          (i
                                             <= (Standard__string.last
                                                   Pin__from_string__s.s))) };
                                     i)))
                                <= (57 : int)) in
                         () in
                       ()
                     end))
                 else ());
                (val _f : bool
                   ensures { ((result = True) <->
                                (forall i : int.
                                   ((((Standard__string.first
                                         Pin__from_string__s.s)
                                        <= i) /\
                                       (i
                                          <= (Standard__string.last
                                                Pin__from_string__s.s))) ->
                                      (([@GP_Pretty_Ada:958]
                                        ((Standard__character__rep.to_rep
                                            ((Array__Int__Standard__character.get
                                                (Standard__string.to_array
                                                   Pin__from_string__s.s))
                                               i))
                                           >= (48 : int))) /\
                                         ([@GP_Pretty_Ada:964]
                                          ((Standard__character__rep.to_rep
                                              ((Array__Int__Standard__character.get
                                                  (Standard__string.to_array
                                                     Pin__from_string__s.s))
                                                 i))
                                             <= (57 : int))))))) } in
                 _f)) in
           () in
         ()
       end));
     ([@GNAT-comment:Assume Pre of the subprogram pin.ads:5] ());
     assume {
       (([@GP_Pretty_Ada:947]
         ((Standard__string.length Pin__from_string__s.s) = (4 : int))) /\
          (forall i : int.
             ((((Standard__string.first Pin__from_string__s.s) <= i) /\
                 (i <= (Standard__string.last Pin__from_string__s.s))) ->
                (([@GP_Pretty_Ada:958]
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (Standard__string.to_array Pin__from_string__s.s))
                         i))
                     >= (48 : int))) /\
                   ([@GP_Pretty_Ada:964]
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (Standard__string.to_array Pin__from_string__s.s))
                           i))
                       <= (57 : int))))))) };
     (try
        ([#"pin.adb" 3 0 0] ());
        ([#"pin.adb" 4 0 0]
         (([#"pin.adb" 4 0 0]
           (Pin__from_string__result.result__.int__content <- (0 : int)));
          ([#"pin.adb" 4 0 0]
           assume {
             [#"pin.adb" 4 0 0]
             (((((Standard__natural___axiom.dynamic_invariant
                    (Pin__from_string__result.result__.int__content))
                   True)
                  False)
                 True)
                True) })));
        ([#"pin.adb" 5 0 0]
         (([#"pin.adb" 5 0 0]
           (Pin__from_string__count.count.int__content <- (0 : int)));
          ([#"pin.adb" 5 0 0]
           assume {
             [#"pin.adb" 5 0 0]
             (((((Standard__natural___axiom.dynamic_invariant
                    (Pin__from_string__count.count.int__content))
                   True)
                  False)
                 True)
                True) })));
        ([#"pin.adb" 8 0 0] ());
        ([#"pin.adb" 7 0 0] ());
        ([@GP_Sloc:pin.adb:7:24]
         [#"pin.adb" 7 0 0]
         (let temp___181 =
            ([#"pin.adb" 7 0 0] ());
            (Standard__string.first Pin__from_string__s.s) in
          let temp___182 =
            ([#"pin.adb" 7 0 0] ());
            (Standard__string.last Pin__from_string__s.s) in
          ([#"pin.adb" 7 0 0]
           (Pin__from_string__L_1__i.i.int__content <- temp___181));
          ([@GNAT-comment:Translation of an Ada loop from pin.adb:7] ());
          (if ((Boolean.andb
                  (temp___181 <= (Pin__from_string__L_1__i.i.int__content)))
                 ((Pin__from_string__L_1__i.i.int__content) <= temp___182)) then
             ([#"pin.adb" 7 0 0]
              (try
                 ([@GNAT-comment:While loop translating the Ada loop from pin.adb:7]
                  ());
                 ([#"'@Loop 853@'pin.adb" 12 0 0]
                  [#"'@Loop 853@'pin.adb" 12 0 0]
                  ((([@GP_Sloc:pin.adb:9:13]
                     [#"pin.adb" 9 0 0]
                     [#"pin.adb" 9 0 0]
                     (([#"pin.adb" 9 0 0]
                       (Pin__from_string__B_2__ch.ch.int__content <-
                          (Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (Standard__string.to_array
                                    Pin__from_string__s.s))
                                (Pin__from_string__L_1__i.i.int__content)))));
                      ([#"pin.adb" 9 0 0]
                       assume {
                         [#"pin.adb" 9 0 0]
                         (((((Standard__character___axiom.dynamic_invariant
                                (Pin__from_string__B_2__ch.ch.int__content))
                               True)
                              False)
                             True)
                            True) })));
                    ([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                     ());
                    (let temp___inv_186 =
                       (Boolean.andb
                          ((Boolean.andb
                              ((Boolean.andb
                                  ((Boolean.andb
                                      ((Pin__from_string__B_2__ch.ch.int__content)
                                         >= (48 : int)))
                                     ((Pin__from_string__B_2__ch.ch.int__content)
                                        <= (57 : int))))
                                 ((Pin__from_string__count.count.int__content)
                                    = ([#"pin.adb" 12 0 0]
                                       [@vc:annotation]
                                       [@comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                                                         ^ pin.adb:12:73:VC_OVERFLOW_CHECK]
                                       [@GP_Reason:VC_OVERFLOW_CHECK]
                                       [@GP_Shape:L_1_while__B_2_declblk__pragargs__and__and__and__cmp__sub]
                                       [@GP_Sloc:pin.adb:12:73]
                                       [@GP_Id:4]
                                       (Standard__integer.range_check_
                                          ((Pin__from_string__L_1__i.i.int__content)
                                             - (([#"pin.adb" 12 0 0] ());
                                                (Standard__string.first
                                                   Pin__from_string__s.s))))))))
                             ((Pin__from_string__count.count.int__content)
                                <= (4 : int))))
                         ((Pin__from_string__result.result__.int__content)
                            < ([#"pin.adb" 12 0 0]
                               [@GP_Shape:L_1_while__B_2_declblk__pragargs__and__cmp__exp]
                               [@vc:annotation]
                               [@GP_Reason:VC_OVERFLOW_CHECK]
                               [@GP_Sloc:pin.adb:12:114]
                               [@GP_Id:5]
                               [@comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                                                                                                  ^ pin.adb:12:114:VC_OVERFLOW_CHECK]
                               (Standard__integer.range_check_
                                  (let temp___187 = 10 : int in
                                   (Int_Power.power temp___187)
                                     (Pin__from_string__count.count.int__content))))) in
                     ()));
                   while True do
                     invariant LoopInvariant {
                       [#"pin.adb" 12 0 0]
                       [@GP_Reason:VC_LOOP_INVARIANT]
                       [@comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                    ^ pin.adb:12:36:VC_LOOP_INVARIANT]
                       [@vc:annotation]
                       [@GP_Shape:L_1_while__B_2_declblk__pragargs__and]
                       [@GP_Sloc:pin.adb:12:36]
                       [@GP_Id:6]
                       ((((([@GP_Sloc:pin.adb:12:36]
                            [@GP_Pretty_Ada:858]
                            ((Pin__from_string__B_2__ch.ch.int__content)
                               >= (48 : int))) /\
                             ([@GP_Sloc:pin.adb:12:50]
                              [@GP_Pretty_Ada:862]
                              ((Pin__from_string__B_2__ch.ch.int__content)
                                 <= (57 : int)))) /\
                            ([@GP_Pretty_Ada:866]
                             [@GP_Sloc:pin.adb:12:64]
                             ((Pin__from_string__count.count.int__content)
                                = ((Pin__from_string__L_1__i.i.int__content)
                                     - (Standard__string.first
                                          Pin__from_string__s.s))))) /\
                           ([@GP_Pretty_Ada:874]
                            [@GP_Sloc:pin.adb:12:86]
                            ((Pin__from_string__count.count.int__content)
                               <= (4 : int)))) /\
                          ([@GP_Pretty_Ada:878]
                           [@GP_Sloc:pin.adb:12:102]
                           ((Pin__from_string__result.result__.int__content)
                              < (let temp___188 = 10 : int in
                                 (Int_Power.power temp___188)
                                   (Pin__from_string__count.count.int__content))))) }
                     ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                      (([@GNAT-comment:Assume implicit invariants from the loop pin.adb:7]
                        ());
                       assume {
                         (Boolean.andb
                            ((((((((true /\
                                      (((((Standard__natural___axiom.dynamic_invariant
                                             (Pin__from_string__result.result__.int__content))
                                            True)
                                           True)
                                          True)
                                         True)) /\
                                     (true /\ true)) /\
                                    (((((Standard__natural___axiom.dynamic_invariant
                                           (Pin__from_string__count.count.int__content))
                                          True)
                                         True)
                                        True)
                                       True)) /\
                                   (true /\ true)) /\
                                  (if ((True = True) \/
                                         ((Standard__string.first
                                             Pin__from_string__s.s)
                                            <= (Standard__string.last
                                                  Pin__from_string__s.s))) then
                                     (((Pin__from_string__L_1__T2b.dynamic_property
                                          (Standard__string.first
                                             Pin__from_string__s.s))
                                         (Standard__string.last
                                            Pin__from_string__s.s))
                                        (Pin__from_string__L_1__i.i.int__content))
                                   else true)) /\
                                 (true /\ true)) /\
                                (((((Standard__character___axiom.dynamic_invariant
                                       (Pin__from_string__B_2__ch.ch.int__content))
                                      True)
                                     True)
                                    True)
                                   True)) /\
                               (true /\ true)))
                           (((Standard__string.first Pin__from_string__s.s)
                               <= (Pin__from_string__L_1__i.i.int__content)) /\
                              ((Pin__from_string__L_1__i.i.int__content)
                                 <= (Standard__string.last
                                       Pin__from_string__s.s))) };
                       ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                        ());
                       ([@GP_Sloc:pin.adb:13:13] [#"pin.adb" 13 0 0] ());
                       ([@GP_Sloc:pin.adb:13:22] [#"pin.adb" 13 0 0] ());
                       ([@GP_Sloc:pin.adb:13:19]
                        [#"pin.adb" 13 0 0]
                        [#"pin.adb" 13 0 0]
                        (Pin__from_string__count.count.int__content <-
                           ([#"pin.adb" 13 0 0]
                            [@GP_Shape:L_1_while__B_2_declblk__count_assign__add]
                            [@vc:annotation]
                            [@GP_Reason:VC_OVERFLOW_CHECK]
                            [@GP_Sloc:pin.adb:13:28]
                            [@GP_Id:0]
                            [@comment:            Count := Count + 1;                            ^ pin.adb:13:28:VC_OVERFLOW_CHECK]
                            (Standard__integer.range_check_
                               ((Pin__from_string__count.count.int__content)
                                  + (1 : int))))));
                       ([@GP_Sloc:pin.adb:14:13] [#"pin.adb" 14 0 0] ());
                       ([@GP_Sloc:pin.adb:14:23] [#"pin.adb" 14 0 0] ());
                       ([@GP_Sloc:pin.adb:14:20]
                        [#"pin.adb" 14 0 0]
                        [#"pin.adb" 14 0 0]
                        (Pin__from_string__result.result__.int__content <-
                           ([#"pin.adb" 14 0 0]
                            [@comment:            Result := Result * 10;                              ^ pin.adb:14:30:VC_OVERFLOW_CHECK]
                            [@vc:annotation]
                            [@GP_Reason:VC_OVERFLOW_CHECK]
                            [@GP_Shape:L_1_while__B_2_declblk__result_assign__mult]
                            [@GP_Sloc:pin.adb:14:30]
                            [@GP_Id:1]
                            (Standard__integer.range_check_
                               ((Pin__from_string__result.result__.int__content)
                                  * (10 : int))))));
                       ([@GP_Sloc:pin.adb:15:13] [#"pin.adb" 15 0 0] ());
                       ([@GP_Sloc:pin.adb:15:23] [#"pin.adb" 15 0 0] ());
                       ([@GP_Sloc:pin.adb:15:47] [#"pin.adb" 15 0 0] ());
                       ([@GP_Sloc:pin.adb:15:20]
                        [#"pin.adb" 15 0 0]
                        [#"pin.adb" 15 0 0]
                        (Pin__from_string__result.result__.int__content <-
                           ([#"pin.adb" 15 0 0]
                            [@vc:annotation]
                            [@GP_Shape:L_1_while__B_2_declblk__result_assign__add]
                            [@comment:            Result := Result + (Character'Pos(Ch) - Character'Pos('0'));                              ^ pin.adb:15:30:VC_RANGE_CHECK]
                            [@GP_Reason:VC_RANGE_CHECK]
                            [@GP_Id:3]
                            [@GP_Sloc:pin.adb:15:30]
                            (Standard__natural.range_check_
                               ([#"pin.adb" 15 0 0]
                                [@vc:annotation]
                                [@comment:            Result := Result + (Character'Pos(Ch) - Character'Pos('0'));                              ^ pin.adb:15:30:VC_OVERFLOW_CHECK]
                                [@GP_Shape:L_1_while__B_2_declblk__result_assign__add]
                                [@GP_Reason:VC_OVERFLOW_CHECK]
                                [@GP_Id:2]
                                [@GP_Sloc:pin.adb:15:30]
                                (Standard__integer.range_check_
                                   ((Pin__from_string__result.result__.int__content)
                                      + ((Pin__from_string__B_2__ch.ch.int__content)
                                           - (48 : int)))))))));
                       ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop pin.adb:7]
                        ());
                       (if ((Pin__from_string__L_1__i.i.int__content)
                              = temp___182) then
                          (raise Pin__from_string__L_1.L_1)
                        else ());
                       ([#"pin.adb" 7 0 0]
                        [#"pin.adb" 7 0 0]
                        (Pin__from_string__L_1__i.i.int__content <-
                           ((Pin__from_string__L_1__i.i.int__content)
                              + (1 : int))))));
                     ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                      (([@GP_Sloc:pin.adb:9:13]
                        [#"pin.adb" 9 0 0]
                        [#"pin.adb" 9 0 0]
                        (([#"pin.adb" 9 0 0]
                          (Pin__from_string__B_2__ch.ch.int__content <-
                             (Standard__character__rep.to_rep
                                ((Array__Int__Standard__character.get
                                    (Standard__string.to_array
                                       Pin__from_string__s.s))
                                   (Pin__from_string__L_1__i.i.int__content)))));
                         ([#"pin.adb" 9 0 0]
                          assume {
                            [#"pin.adb" 9 0 0]
                            (((((Standard__character___axiom.dynamic_invariant
                                   (Pin__from_string__B_2__ch.ch.int__content))
                                  True)
                                 False)
                                True)
                               True) })));
                       ([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                        ());
                       (let temp___inv_186 =
                          (Boolean.andb
                             ((Boolean.andb
                                 ((Boolean.andb
                                     ((Boolean.andb
                                         ((Pin__from_string__B_2__ch.ch.int__content)
                                            >= (48 : int)))
                                        ((Pin__from_string__B_2__ch.ch.int__content)
                                           <= (57 : int))))
                                    ((Pin__from_string__count.count.int__content)
                                       = ([#"pin.adb" 12 0 0]
                                          [@vc:annotation]
                                          [@comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                                                         ^ pin.adb:12:73:VC_OVERFLOW_CHECK]
                                          [@GP_Reason:VC_OVERFLOW_CHECK]
                                          [@GP_Shape:L_1_while__B_2_declblk__pragargs__and__and__and__cmp__sub]
                                          [@GP_Sloc:pin.adb:12:73]
                                          [@GP_Id:4]
                                          (Standard__integer.range_check_
                                             ((Pin__from_string__L_1__i.i.int__content)
                                                - (([#"pin.adb" 12 0 0] ());
                                                   (Standard__string.first
                                                      Pin__from_string__s.s))))))))
                                ((Pin__from_string__count.count.int__content)
                                   <= (4 : int))))
                            ((Pin__from_string__result.result__.int__content)
                               < ([#"pin.adb" 12 0 0]
                                  [@GP_Shape:L_1_while__B_2_declblk__pragargs__and__cmp__exp]
                                  [@vc:annotation]
                                  [@GP_Reason:VC_OVERFLOW_CHECK]
                                  [@GP_Sloc:pin.adb:12:114]
                                  [@GP_Id:5]
                                  [@comment:            pragma Loop_Invariant (Ch >= '0' and Ch <= '9' and Count = I-S'First and Count <= 4 and  Result < 10 ** Count);                                                                                                                  ^ pin.adb:12:114:VC_OVERFLOW_CHECK]
                                  (Standard__integer.range_check_
                                     (let temp___187 = 10 : int in
                                      (Int_Power.power temp___187)
                                        (Pin__from_string__count.count.int__content))))) in
                        ())));
                     ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                      ())
                   done))
               with Pin__from_string__L_1.L_1 -> ()
               end))
           else ())));
        ([@GP_Sloc:pin.adb:18:18] [#"pin.adb" 18 0 0] ());
        ([@GP_Sloc:pin.adb:18:7]
         [#"pin.adb" 18 0 0]
         (([#"pin.adb" 18 0 0]
           (pin__from_string__result.int__content <-
              ([#"pin.adb" 18 0 0]
               [@comment:      return PIN(Result);                  ^ pin.adb:18:18:VC_RANGE_CHECK]
               [@GP_Shape:return__typeconv]
               [@vc:annotation]
               [@GP_Reason:VC_RANGE_CHECK]
               [@GP_Sloc:pin.adb:18:18]
               [@GP_Id:7]
               (Pin__pin.range_check_
                  (Pin__from_string__result.result__.int__content)))));
          ((raise Return__exc) : unit)));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (pin__from_string__result.int__content))
end
