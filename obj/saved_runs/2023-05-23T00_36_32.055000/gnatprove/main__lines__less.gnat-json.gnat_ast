(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "T14b" defined at mystring.ads:38 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T14b
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t14b  = <range 0 2048>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2048
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t14b,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t14b__ref  = { mutable t14b__content : t14b }
  
  function   t14b__ref_t14b__content__projection (a : t14b__ref) requires
    {  } ensures  {  } returns t14b = a.t14b__content
  
  meta model_projection function t14b__ref_t14b__content__projection
  
  meta inline:no function t14b__ref_t14b__content__projection
  
  function   t14b__havoc (x : t14b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T14b" defined at mystring.ads:38 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T14b__rep
  
  use        Main__lines__mystring__T14b
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Main__lines__mystring__T14b.t14b) requires { True }
    ensures  { True } returns int = (Main__lines__mystring__T14b.t14b'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Main__lines__mystring__T14b.t14b,
    predicate in_range = Main__lines__mystring__T14b.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 2048
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at main.adb:24, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring__T14b
  use        Main__lines__mystring__T14b__rep
  use        Main__lines__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [name:Length]
                           [model_trace:.69168]rec__main__lines__mystring__length : Main__lines__mystring__T14b.t14b;
                           [model_trace:.69172]
                           [name:Str]rec__main__lines__mystring__str : Array__Int__Standard__character.map }
  
  function [name:Length] [model_trace:.69168] 
    __split_fields_rec__main__lines__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Main__lines__mystring__T14b.t14b = a.rec__main__lines__mystring__length
  
  meta model_projection function __split_fields_rec__main__lines__mystring__length__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__length__projection
  
  function [model_trace:.69172] [name:Str] 
    __split_fields_rec__main__lines__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__main__lines__mystring__str
  
  meta model_projection function __split_fields_rec__main__lines__mystring__str__projection
  
  meta inline:no function __split_fields_rec__main__lines__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   main__lines__mystring__length__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__length_ (a : __rep) requires
    { (main__lines__mystring__length__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__length) }
    returns Main__lines__mystring__T14b.t14b
  
  function   main__lines__mystring__str__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__main__lines__mystring__str_ (a : __rep) requires
    { (main__lines__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__main__lines__mystring__str) } returns
    Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Main__lines__mystring__T14b__rep.to_rep
                a.__split_fields.rec__main__lines__mystring__length)
               = (Main__lines__mystring__T14b__rep.to_rep
                    b.__split_fields.rec__main__lines__mystring__length)) /\
              (Main__lines__mystringstr.bool_eq
                 a.__split_fields.rec__main__lines__mystring__str
                 b.__split_fields.rec__main__lines__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
  
  use export Main__lines__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type mystring  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   main__lines__mystring__length__first__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__last__bit () requires {  }
    ensures  {  } returns int
  
  function   main__lines__mystring__length__position () requires {  }
    ensures  {  } returns int
  
  axiom main__lines__mystring__length__first__bit_axiom : ((main__lines__mystring__length__first__bit
                                                              ) >= 0)
  
  axiom main__lines__mystring__length__last__bit_axiom : ((main__lines__mystring__length__last__bit
                                                             )
                                                            > (main__lines__mystring__length__first__bit
                                                                 ))
  
  axiom main__lines__mystring__length__position_axiom : ((main__lines__mystring__length__position
                                                            ) >= 0)
  
  function   main__lines__mystring__str__first__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__last__bit () requires {  } ensures 
    {  } returns int
  
  function   main__lines__mystring__str__position () requires {  } ensures 
    {  } returns int
  
  axiom main__lines__mystring__str__first__bit_axiom : ((main__lines__mystring__str__first__bit
                                                           ) >= 0)
  
  axiom main__lines__mystring__str__last__bit_axiom : ((main__lines__mystring__str__last__bit
                                                          )
                                                         > (main__lines__mystring__str__first__bit
                                                              ))
  
  axiom main__lines__mystring__str__position_axiom : ((main__lines__mystring__str__position
                                                         ) >= 0)
  
  function   user_eq (a : mystring b : mystring) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns mystring
  
  type mystring__ref  = { mutable mystring__content : mystring }
  
  function   mystring__ref_mystring__content__2__projection
    (a : mystring__ref) requires {  } ensures  {  } returns
    mystring = a.mystring__content
  
  meta model_projection function mystring__ref_mystring__content__2__projection
  
  meta inline:no function mystring__ref_mystring__content__2__projection
  
  function   mystring__havoc (x : mystring__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining the constant "m1" defined at mystring.ads:16 instantiated at main.adb:24, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function [model_projected] [name:M1] [model_trace:69260]
    [sloc:mystring.ads:16] m1 () requires {  } ensures  {  } returns
    Main__lines__mystring.mystring

end

(* Module for defining the constant "m2" defined at mystring.ads:16 instantiated at main.adb:24, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function [model_projected] [name:M2] [model_trace:69263]
    [sloc:mystring.ads:16] m2 () requires {  } ensures  {  } returns
    Main__lines__mystring.mystring

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Main__lines__mystring
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_268) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___is_init_264) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_265) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_266) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_267) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_270) : Main__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_271) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at main.adb:24, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__less__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val i [model_projected] [name:I]
  [model_trace:71490] [sloc:mystring.adb:29]: int

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tmystringstrD1  = <range 1 2048>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 2048
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = tmystringstrD1,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tmystringstrD1__ref  = { mutable tmystringstrD1__content : tmystringstrD1 }
  
  function   tmystringstrD1__ref_tmystringstrD1__content__2__projection
    (a : tmystringstrD1__ref) requires {  } ensures  {  } returns
    tmystringstrD1 = a.tmystringstrD1__content
  
  meta model_projection function tmystringstrD1__ref_tmystringstrD1__content__2__projection
  
  meta inline:no function tmystringstrD1__ref_tmystringstrD1__content__2__projection
  
  function   tmystringstrD1__havoc (x : tmystringstrD1__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at main.adb:24, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__less__L_2
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_258) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_254) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_255) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_256) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_257) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_260) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_261) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:16 instantiated at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:16 instantiated at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrD1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "T14b" defined at mystring.ads:38 instantiated at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T14b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__L_2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:16 instantiated at main.adb:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__less__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Main__lines__mystring
  use        Main__lines__less__m1
  use        Main__lines__less__m2
  use        Main__lines__mystring___axiom
  use        Main__lines__less__i
  use        Main__lines__mystring__T14b
  use        Main__lines__mystring__T14b__rep
  use        Main__lines__TmystringstrD1
  use        Main__lines__less__L_2
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer___axiom
  use        Standard__character___axiom
  use        Standard__integer___axiom
  use        Main__lines__mystringstr___axiom
  use        Main__lines__mystring___axiom
  use        Main__lines__less__m1___axiom
  use        Main__lines__less__m2___axiom
  use        Main__lines__TmystringstrD1___axiom
  use        Main__lines__mystring__T14b___axiom
  use        Main__lines__less__i___axiom
  use        Main__lines__less__L_2___axiom
  
  val main__lines__less__result [model_projected] [name:Less]
  [model_trace:69258@result] : bool
  
  function [GP_Subp:mystring.ads:16] [sloc:mystring.ads:16] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at main.adb:24 *);
        assume
        { (Main__lines__mystring___axiom.dynamic_invariant
             Main__lines__less__m1.m1 True False True True) };
        assume
        { (Main__lines__mystring___axiom.dynamic_invariant
             Main__lines__less__m2.m2 True False True True) };
        (* Assume moved pointers in outputs of the subprogram mystring.ads:16 instantiated at main.adb:24 *);
        (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at main.adb:24 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram mystring.ads:16 instantiated at main.adb:24 *);
        (try
        ();
          ([sloc:mystring.adb:29] ( Main__lines__less__i.i := ( 1));
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Main__lines__less__i.i True False True True) });
          ([sloc:mystring.adb:36] ());
          ();
          ([GP_Sloc:mystring.adb:31:7:instantiated:main.adb:24:4] ([sloc:mystring.adb:31] 
                                                                  (if
                                                                  ([sloc:mystring.adb:31] ([branch_id=71552]
                                                                  _gnatprove_standard.Main.spark__branch
                                                                  :=
                                                                  ((Main__lines__mystring__T14b__rep.to_rep
                                                                    ( Main__lines__less__m1.m1).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)
                                                                    < (
                                                                    Main__lines__mystring__T14b__rep.to_rep
                                                                    ( Main__lines__less__m2.m2).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))));
                                                                  ([branch_id=71552] _gnatprove_standard.Main.spark__branch).bool__content
                                                                  then
                                                                  ();
                                                                  ([GP_Sloc:mystring.adb:32:10:instantiated:main.adb:24:4] 
                                                                  ([sloc:mystring.adb:32] (
                                                                  main__lines__less__result
                                                                  :=
                                                                  (_gnatprove_standard.Boolean.of_int
                                                                    1));
                                                                  raise Return__exc))
                                                                   else
                                                                  ([GP_Sloc:mystring.adb:33:7:instantiated:main.adb:24:4] 
                                                                  (if
                                                                  ([sloc:mystring.adb:33] ([branch_id=71614]
                                                                  _gnatprove_standard.Main.spark__branch
                                                                  :=
                                                                  ((Main__lines__mystring__T14b__rep.to_rep
                                                                    ( Main__lines__less__m1.m1).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)
                                                                    > (
                                                                    Main__lines__mystring__T14b__rep.to_rep
                                                                    ( Main__lines__less__m2.m2).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))));
                                                                  ([branch_id=71614] _gnatprove_standard.Main.spark__branch).bool__content
                                                                  then
                                                                  ();
                                                                  ([GP_Sloc:mystring.adb:34:10:instantiated:main.adb:24:4] 
                                                                  ([sloc:mystring.adb:34] (
                                                                  main__lines__less__result
                                                                  :=
                                                                  (_gnatprove_standard.Boolean.of_int
                                                                    0));
                                                                  raise Return__exc))
                                                                   else
                                                                  ();
                                                                  ([GP_Sloc:mystring.adb:36:35:instantiated:main.adb:24:4] 
                                                                  ([sloc:mystring.adb:36] 
                                                                  (* Translation of an Ada loop from mystring.adb:36 instantiated at main.adb:24 *);
                                                                  (if
                                                                  (!Main__lines__less__i.i
                                                                    <= 2048)
                                                                  then
                                                                  (try
                                                                  (* While loop translating the Ada loop from mystring.adb:36 instantiated at main.adb:24 *);
                                                                    ([sloc:mystring.adb:37] 
                                                                    loop
                                                                    (* Check for absence of RTE in the loop invariant and variant *);
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___inv_606)
                                                                    =
                                                                    (!Main__lines__less__i.i
                                                                    >= 1) in
                                                                    abstract
                                                                    ensures
                                                                    { True } begin 
                                                                     (let _ =
                                                                    () in
                                                                    ())  end)
                                                                    invariant
                                                                    {([sloc:mystring.adb:37] 
                                                                    ([GP_Id:59]
                                                                    [GP_Reason:VC_LOOP_INVARIANT]
                                                                    [comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:main.adb:24:4:VC_LOOP_INVARIANT]
                                                                    [vc:annotation]
                                                                    [GP_Sloc:mystring.adb:37:36:instantiated:main.adb:24:4]
                                                                    [GP_Shape:if__L_2_while__pragargs__cmp] 
                                                                    ([GP_Sloc:mystring.adb:37:36:instantiated:main.adb:24:4]
                                                                    [GP_Pretty_Ada:71572] (
                                                                    !Main__lines__less__i.i
                                                                    >= 1))))}
                                                                    
                                                                    (* Assume implicit invariants from the loop mystring.adb:36 instantiated at main.adb:24 *);
                                                                    assume
                                                                    { (
                                                                    _gnatprove_standard.Boolean.andb
                                                                    (True /\
                                                                    (Standard__integer___axiom.dynamic_invariant
                                                                    !Main__lines__less__i.i
                                                                    True True
                                                                    True True)
                                                                    /\ True
                                                                    /\ True)
                                                                    (!Main__lines__less__i.i
                                                                    <= 2048)) };
                                                                    (* Continuation of loop after loop invariant and variant *);
                                                                    ();
                                                                    ([GP_Sloc:mystring.adb:38:23:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:38] ()));
                                                                    ([GP_Sloc:mystring.adb:38:35:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:38] ()));
                                                                    ([GP_Sloc:mystring.adb:38:13:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:38] 
                                                                    (if
                                                                    ([sloc:mystring.adb:38] ([branch_id=71579]
                                                                    _gnatprove_standard.Main.spark__branch
                                                                    :=
                                                                    ((Standard__character__rep.to_rep
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___604)
                                                                    =
                                                                    ( Main__lines__less__m1.m1).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str
                                                                    in
                                                                    (Array__Int__Standard__character.get
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___604)
                                                                    assert
                                                                    { ([sloc:mystring.adb:38] 
                                                                    ([GP_Id:57]
                                                                    [GP_Shape:if__L_2_while__if__cmp__ixdcomp]
                                                                    [vc:annotation]
                                                                    [comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:main.adb:24:4:VC_INDEX_CHECK]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Sloc:mystring.adb:38:23:instantiated:main.adb:24:4] (
                                                                    (Main__lines__TmystringstrD1.first
                                                                    <= !Main__lines__less__i.i)
                                                                    /\
                                                                    (!Main__lines__less__i.i
                                                                    <= Main__lines__TmystringstrD1.last)))) };
                                                                    !Main__lines__less__i.i)))
                                                                    < (Standard__character__rep.to_rep
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___605)
                                                                    =
                                                                    ( Main__lines__less__m2.m2).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str
                                                                    in
                                                                    (Array__Int__Standard__character.get
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___605)
                                                                    assert
                                                                    { ([sloc:mystring.adb:38] 
                                                                    ([GP_Id:58]
                                                                    [GP_Sloc:mystring.adb:38:35:instantiated:main.adb:24:4]
                                                                    [GP_Shape:if__L_2_while__if__cmp__ixdcomp]
                                                                    [vc:annotation]
                                                                    [comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:main.adb:24:4:VC_INDEX_CHECK]
                                                                    [GP_Reason:VC_INDEX_CHECK] (
                                                                    (Main__lines__TmystringstrD1.first
                                                                    <= !Main__lines__less__i.i)
                                                                    /\
                                                                    (!Main__lines__less__i.i
                                                                    <= Main__lines__TmystringstrD1.last)))) };
                                                                    !Main__lines__less__i.i))))));
                                                                    ([branch_id=71579] _gnatprove_standard.Main.spark__branch).bool__content
                                                                    then
                                                                    ();
                                                                    ([GP_Sloc:mystring.adb:39:16:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:39] (
                                                                    main__lines__less__result
                                                                    :=
                                                                    (_gnatprove_standard.Boolean.of_int
                                                                    1));
                                                                    raise Return__exc))
                                                                     else
                                                                    ([GP_Sloc:mystring.adb:40:13:instantiated:main.adb:24:4] 
                                                                    (if
                                                                    ([sloc:mystring.adb:40] ([branch_id=71596]
                                                                    _gnatprove_standard.Main.spark__branch
                                                                    :=
                                                                    ((Standard__character__rep.to_rep
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___602)
                                                                    =
                                                                    ( Main__lines__less__m1.m1).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str
                                                                    in
                                                                    (Array__Int__Standard__character.get
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___602)
                                                                    assert
                                                                    { ([sloc:mystring.adb:40] 
                                                                    ([GP_Shape:if__L_2_while__if__cmp__ixdcomp]
                                                                    [vc:annotation]
                                                                    [comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:main.adb:24:4:VC_INDEX_CHECK]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Sloc:mystring.adb:40:26:instantiated:main.adb:24:4]
                                                                    [GP_Id:55] (
                                                                    (Main__lines__TmystringstrD1.first
                                                                    <= !Main__lines__less__i.i)
                                                                    /\
                                                                    (!Main__lines__less__i.i
                                                                    <= Main__lines__TmystringstrD1.last)))) };
                                                                    !Main__lines__less__i.i)))
                                                                    > (Standard__character__rep.to_rep
                                                                    (let ([mlw:proxy_symbol]
                                                                    [introduced] temp___603)
                                                                    =
                                                                    ( Main__lines__less__m2.m2).Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str
                                                                    in
                                                                    (Array__Int__Standard__character.get
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___603)
                                                                    assert
                                                                    { ([sloc:mystring.adb:40] 
                                                                    ([GP_Sloc:mystring.adb:40:38:instantiated:main.adb:24:4]
                                                                    [GP_Id:56]
                                                                    [GP_Shape:if__L_2_while__if__cmp__ixdcomp]
                                                                    [vc:annotation]
                                                                    [comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:main.adb:24:4:VC_INDEX_CHECK]
                                                                    [GP_Reason:VC_INDEX_CHECK] (
                                                                    (Main__lines__TmystringstrD1.first
                                                                    <= !Main__lines__less__i.i)
                                                                    /\
                                                                    (!Main__lines__less__i.i
                                                                    <= Main__lines__TmystringstrD1.last)))) };
                                                                    !Main__lines__less__i.i))))));
                                                                    ([branch_id=71596] _gnatprove_standard.Main.spark__branch).bool__content
                                                                    then
                                                                    ();
                                                                    ([GP_Sloc:mystring.adb:41:16:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:41] (
                                                                    main__lines__less__result
                                                                    :=
                                                                    (_gnatprove_standard.Boolean.of_int
                                                                    0));
                                                                    raise Return__exc))
                                                                     else
                                                                    ();
                                                                    ([GP_Sloc:mystring.adb:43:16:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:43] ()));
                                                                    ([GP_Sloc:mystring.adb:43:21:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:43] ()));
                                                                    ([GP_Sloc:mystring.adb:43:18:instantiated:main.adb:24:4] 
                                                                    ([sloc:mystring.adb:43] (
                                                                    Main__lines__less__i.i
                                                                    :=
                                                                    ( 
                                                                    ([sloc:mystring.adb:43] 
                                                                    ([comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:main.adb:24:4:VC_OVERFLOW_CHECK]
                                                                    [vc:annotation]
                                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                                    [GP_Sloc:mystring.adb:43:23:instantiated:main.adb:24:4]
                                                                    [GP_Shape:if__L_2_while__if__i_assign__add]
                                                                    [GP_Id:54] (
                                                                    Standard__integer.range_check_
                                                                    (!Main__lines__less__i.i
                                                                    + 1)))))))))))));
                                                                    (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:24 *);
                                                                    (if
                                                                    --pp_not NOT IMPLEMENTED
                                                                    then
                                                                    raise Main__lines__less__L_2.L_2
                                                                    )
                                                                     end loop) with
                                                                  | Main__lines__less__L_2.L_2 
                                                                  -> 
                                                                  ()) )));
                                                                  ([GP_Sloc:mystring.adb:47:10:instantiated:main.adb:24:4] 
                                                                  ([sloc:mystring.adb:47] (
                                                                  main__lines__less__result
                                                                  :=
                                                                  (_gnatprove_standard.Boolean.of_int
                                                                    0));
                                                                  raise Return__exc)))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        !main__lines__less__result

end
